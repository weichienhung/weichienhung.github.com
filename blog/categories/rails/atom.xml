<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | Practice makes perfect]]></title>
  <link href="http://weichienhung.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://weichienhung.github.io/"/>
  <updated>2014-05-04T10:32:08+08:00</updated>
  <id>http://weichienhung.github.io/</id>
  <author>
    <name><![CDATA[Weichien Hung]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[new rails project for fun]]></title>
    <link href="http://weichienhung.github.io/blog/2013/11/30/new-practicing-rails-project/"/>
    <updated>2013-11-30T20:16:00+08:00</updated>
    <id>http://weichienhung.github.io/blog/2013/11/30/new-practicing-rails-project</id>
    <content type="html"><![CDATA[<p>Today i push a new rails project to <a href="http://weichien-lunch.herokuapp.com/">heroku</a> called lunch.
I also push to <a href="https://github.com/weichienhung/lunch">github</a>.
Every week day i and colleague have to discuss which lunch to eat.
It will be very helpful if a site can random pick a lunch restaurant for us. So i create a new rails project for this purpose.
The basic idea is simple, everybody can share a restaurant and add others' restaurants to favorites list. Then site pick a restaurant for you.
I can study new stuff when i practice rails each time. I try to write down here.</p>

<!-- more -->


<h3>image store in S3</h3>

<p>Because the heroku doesn't allow to store images, i move the paperclip default storage to S3.
It's very easy to implement, just follow this <a href="https://devcenter.heroku.com/articles/paperclip-s3">tutorial</a></p>

<h3>social network signin</h3>

<p>This time i integrate three social networks(facebook, twitter, google).
I am stuck in google app setting for a while. Because they all have different callback url setting.
Finally i resolved and here are screenshots for these sites. These samples are for <code>127.0.0.1:3000</code> testing</p>

<h4>google</h4>

<p><img src="/images/posts/20131129-1.png" width="800" height="600" title="list-image" alt="list"></p>

<h4>twitter</h4>

<p><img src="/images/posts/20131129-2.png" width="800" height="600" title="list-image" alt="list"></p>

<h4>facebook</h4>

<p><img src="/images/posts/20131129-3.png" width="800" height="600" title="list-image" alt="list"></p>

<h3>MVP design</h3>

<p>I add a <code>app/presenters</code> folder and make controller logic more impact.
Add folder path to <code>application.rb</code> that controller could access them.
<code>ruby application.rb
config.paths.add "app/presenters", glob: "**/*.rb"
config.autoload_paths += Dir["#{Rails.root}/app/presenters/*"]
</code></p>

<h3>Google map support</h3>

<p>Use <code>gmaps4rails</code> gem. github <a href="https://github.com/apneadiving/Google-Maps-for-Rails">link</a>.
Good video tutorial <a href="https://www.youtube.com/watch?v=R0l-7en3dUw&amp;feature=youtu.be">link</a></p>

<h3>rspec testing</h3>

<h4>devise signin</h4>

<p>Just create a user and call <code>signin</code>.
``` ruby
FactoryGirl.define do</p>

<p>  factory :user do</p>

<pre><code>name Faker::Name.name 
sequence(:email) { |n| "example#{n}@example.com" } # create different email each user.
password 'a1234567'
password_confirmation 'a1234567'

factory :user_with_restaurant do
  after(:create) do |user|
    restaurant = FactoryGirl.build(:restaurant)
    restaurant.creator_id = user.id
    restaurant.save!
    user.favor_restaurant &lt;&lt; restaurant
  end
end
</code></pre>

<p>  end</p>

<p>end</p>

<h1>It's good practice to put in before block</h1>

<p>before(:each) do
  @user = create(:user)
  sign_in @user
end
```</p>

<h4>Use expect to assert result</h4>

<p>For example <code>restaurant</code> is the return object from controller.
``` ruby xx_controller.rb
  def new</p>

<pre><code>@restaurant = Restaurant.new
</code></pre>

<p>  end
<code>
</code> ruby xx_spec.rb
restaurant = assigns(:restaurant)
expect(response.status).to eq 302 # check http status code
expect(response).to render_template :index # check render template
expect(restaurant).to be_a_new(Restaurant) # check restaurant is new object
expect(flash[:notice]).to be # check flash[:notice] exist
expect(flash[:warn]).to be_nil # check flash[:warn] nil</p>

<h1>we could even use block</h1>

<h1>check restaurant is added by 1 after post to create controller</h1>

<p>expect {
  post :create, restaurant: attributes_for(:restaurant)
}.to change(Restaurant, :count).by(1)
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[open source project studying]]></title>
    <link href="http://weichienhung.github.io/blog/2013/11/03/open-source-projects-studying/"/>
    <updated>2013-11-03T09:57:00+08:00</updated>
    <id>http://weichienhung.github.io/blog/2013/11/03/open-source-projects-studying</id>
    <content type="html"><![CDATA[<p>I study the open source project <a href="https://github.com/gitlabhq/gitlabhq">gitlab</a>. It's a well coding rails structure.
Here are some examples i think they are good.</p>

<h3>Don't query data in View/Helper</h3>

<p>Avoid perform query in view/helper in Xdite's <a href="http://blog.xdite.net/posts/2013/10/31/maintainable-rails-view-6">Maintainable Rails View</a>.
``` ruby dashboard_controller.rb
def show
  @projects_limit = 30
  @groups = current_user.authorized_groups.sort_by(&amp;:human_name)
  @has_authorized_projects = @projects.count > 0
  @projects_count = @projects.count
  @projects = @projects.limit(@projects_limit)</p>

<p>  @events = Event.in_projects(current_user.authorized_projects.pluck(:id))
  @events = @event_filter.apply_filter(@events)
  @events = @events.limit(20).offset(params[:offset] || 0)</p>

<p>  @last_push = current_user.recent_push
  respond_to do |format|</p>

<pre><code>format.html
format.js
format.atom { render layout: false }
</code></pre>

<p>  end
end
```</p>

<!-- more -->


<h3>Group class methods</h3>

<p>You could put all your class methods inside <code>class &lt;&lt; self</code>. Avoid to put <code>self.</code> in each methods.
``` ruby</p>

<h1>method 1</h1>

<p>class Ability
  class &lt;&lt; self</p>

<pre><code>def allowed(user, subject)
  ...
end
</code></pre>

<p>  end
end</p>

<h1>method 2</h1>

<p>class Ability
  def self.allowed(user,subject)</p>

<pre><code>...
</code></pre>

<p>  end
end
```</p>

<h3>Always sexy validations</h3>

<p>```
validates :name, presence: true
validates :email, presence: true, format: { with: /\A([<sup>@\s]+)@((?:[-a-z0-9]+.)+[a-z]{2,})\Z/</sup> }
validates :bio, length: { within: 0..255 }
validates :extern_uid, allow_blank: true, uniqueness: {scope: :provider}
validates :projects_limit, presence: true, numericality: {greater_than_or_equal_to: 0}
validates :username, presence: true, uniqueness: true,</p>

<pre><code>      exclusion: { in: Gitlab::Blacklist.path },
      format: { with: Gitlab::Regex.username_regex,
                message: "only letters, digits &amp; '_' '-' '.' allowed. Letter should be first" } 
</code></pre>

<p>validate :namespace_uniq, if: ->(user) { user.username_changed? }
```</p>

<h3>Delgate method</h3>

<p>Reference <a href="http://www.simonecarletti.com/blog/2009/12/inside-ruby-on-rails-delegate/">delegate in rails</a>
```
class Post
  belongs_to :user
  delegate :name, :to => :user, :allow_nil => true, :prefix => true
  delegate :name, :to => :user, :allow_nil => true, :prefix => "author"</p>

<p>end</p>

<p>class User
  has_many :posts
end</p>

<h1>You can call it in Post instance</h1>

<p>post = Post.find(param[:id])
post.user_name # return user's name
post.author_name # return user' name
```</p>

<h2>Some basics i didn't mention before.</h2>

<h3>object.map(&amp;:foo)</h3>

<p>Below are equivalent.
``` ruby
Base = Struct.new(:name)</p>

<p>tag1 = Base.new('hello')
tag2 = Base.new('bye')</p>

<p>result = [tag1, tag2].map { |tag| tag.name }
result = [tag1, tag2].map(&amp;:name)
```</p>

<h3>send</h3>

<p>```</p>

<h1>These statements are equal</h1>

<p>@person.age
@person.send :age</p>

<p>@person.age = 5
@person.send :age=, 5</p>

<p>@person.set_age(5)
@person.send :set_age, 5
```</p>

<h3>content_for ( yield )</h3>

<p>Learned from Xdite's <a href="http://blog.xdite.net/posts/2013/10/31/maintainable-rails-view-3">Maintainable Rails View</a>
``` ruby layout.html.erb</p>

<h1>In your layout, you can put a sidebar with yield :sidebar</h1>

<div class="main">  
  <%= yield %>
</div>




<div class="sidebar"> 
  <%= yield :sidebar %>
</div>


<p><code>
</code> ruby xxx.html.erb</p>

<h1>Use content_for :sidebar to render sidebar.</h1>

<p>&lt;%= content_for :sidebar do %>  <br/>
  &lt;%= render "ad/foo"%>
&lt;% end %>
```</p>

<h3>change entire layout</h3>

<p>Use <code>layout</code> to make profiles page use <em>profile</em> layout not <em>application</em> layout
``` ruby
class ProfilesController &lt; ApplicationController</p>

<p>  layout 'profile'
  ...
end
```</p>

<h3>redirect from localhost/project/yyy.git to localhost/project/yyy</h3>

<p>``` ruby application_controller.rb
def project
  if id =~ /.git\Z/</p>

<pre><code>redirect_to request.original_url.gsub(/\.git\Z/, '') and return
</code></pre>

<p>  end
  ...
end
```</p>

<h2>Good gems</h2>

<ol>
<li><a href="https://github.com/ctran/annotate_models">annotate</a>: add comments to your ActiveRecord models/specs/routes..rb</li>
<li><a href="https://github.com/michaeldv/awesome_print">awesome_print</a>: pretty print your ruby objects</li>
<li><a href="https://github.com/charliesome/better_errors">better_errors</a>: better error page for rails</li>
<li><a href="https://github.com/mbleigh/acts-as-taggable-on">acts-as-taggable-on</a>: a tagging plugin</li>
<li><a href="https://github.com/railsbp/rails_best_practices">rails_best_practices</a>: code metric tool for rails</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mongodb in rails4]]></title>
    <link href="http://weichienhung.github.io/blog/2013/10/25/mongodb-in-rails/"/>
    <updated>2013-10-25T23:53:00+08:00</updated>
    <id>http://weichienhung.github.io/blog/2013/10/25/mongodb-in-rails</id>
    <content type="html"><![CDATA[<p>In the past week i had tried <a href="http://www.mongodb.org">mongodb</a> in rails.
I rewrite my previous project <a href="https://github.com/weichienhung/money">money</a> to use mongodb instead of active record.
The source code is in branch <a href="https://github.com/weichienhung/money/tree/mongodb">money-mongodb</a>.
Here i record the steps of changing active record to mongodb</p>

<!-- more -->


<h3>Install mongodb</h3>

<p>I am using Mac OSX, very easy to install
<code>sh
brew install mongodb
</code>
Run mongodb in your shell
<code>
mongod
</code></p>

<h3>Update Gemfile</h3>

<p>I choose <em>mongoid</em> gem because it has good documents and it's a object document mapper framework.
I am familiar with SQL so i could catch up NonSQL database easily.<br/>
Need to add <code>github: 'mongoid/mongoid'</code> because Rails4.
<code>ruby Gemfile
gem 'mongoid', github: 'mongoid/mongoid'
</code></p>

<h3>Generate mongoid config</h3>

<p><code>sh
rails g mongoid:config
</code></p>

<h3>Mark active record related codes</h3>

<p>In <em>application.rb</em> mark the <code>require rails/all</code> and add below.
``` ruby application.rb</p>

<h1>require 'rails/all'</h1>

<p>require "action_controller/railtie"
require "action_mailer/railtie"
require "sprockets/railtie"
require "rails/test_unit/railtie"
<code>
In _development.rb_ mark the `config.active_record.migration_error = :page_load`
</code> ruby development.rb</p>

<h1>config.active_record.migration_error = :page_load</h1>

<p>```</p>

<h3>Re-generate devise</h3>

<p>Mark <code>devise_for :users</code> in routes.rb
``` ruby routes.rb</p>

<h1>devise_for :users</h1>

<p><code>
Execute `devise:install`
</code> sh
rails g devise:install
<code>
Remember to unmark `devise_for` after new user.rb created.
New _user.rb_ looks like below, it includes `Mongoid::Document`.
</code> ruby user.rb
class User
  include Mongoid::Document
  # Include default devise modules. Others available are:
  # :confirmable, :lockable, :timeoutable and :omniauthable
  devise :database_authenticatable, :registerable,</p>

<pre><code>     :recoverable, :rememberable, :trackable, :validatable
</code></pre>

<p>  ## Database authenticatable
  field :email,              :type => String, :default => ""
  field :encrypted_password, :type => String, :default => ""</p>

<p>  ...
end
```</p>

<h3>Update models</h3>

<p>Bascially we just need to include <code>Mongoid::Document</code> and add <code>field</code>
``` ruby category.rb</p>

<h1>class Category &lt; ActiveRecord::Base</h1>

<h1>end</h1>

<p>class Category
  include Mongoid::Document
  field :name, type: String
  field :cid, type: Integer
end
```</p>

<h3>Update logic of querying data in model</h3>

<p>This is the most difficult part.  Model has methods to query data from database.
All need to rewrite.</p>

<p>No <code>where.not</code>.
``` ruby</p>

<h1>scope :expense, -> { where.not(category_id: 0) }</h1>

<p>scope :expense, -> { where(:category_id.gt => 0) }
<code>
Order by
</code></p>

<h1>where.order('month ASC')</h1>

<p>where.asc(:month)
<code>
Query condition.
</code></p>

<h1>r = where('year = ?', params[:y])</h1>

<p>r = where(year: params[:y])
<code>
No `group()`. Need to use map/reduce funciton. Good [tutorial](http://www.mongovue.com/2010/11/03/yet-another-mongodb-map-reduce-tutorial/#comment-117).  
For instance: calculate each month's total cost.
</code></p>

<h1>r.expense.group(:month).select(:month, 'sum(amount) as total')</h1>

<p>map = %Q(
  function(){</p>

<pre><code>emit(this.month, { month:this.month, amount:this.amount});
</code></pre>

<p>  }
)
reduce = %Q(
  function(key, values) {</p>

<pre><code>var result = { month: 0, total: 0 };
values.forEach(function(value) {
  result.month = value.month;
  if (value.amount)
    result.total += value.amount;
  else
    result.total += value.total;
  });
return result;
</code></pre>

<p>  }
)
final = %Q(
  function(key, value) {</p>

<pre><code>if (value.amount)
  value.total = value.amount
return value;
</code></pre>

<p>  }
)
result = []
where(year: params[:y]).map_reduce(map, reduce).out(inline: true).finalize(final).each do |document|
  result.push self.build_money_record_by_month(document)
end
<code>
Fecth data from reduced document.
If there's more easy way to fetch data from `document`, plz let me know.
</code>
def self.build_money_record_by_month(document)
  value = document.fetch 'value'
  monny = MoneyRecord.new
  monny.total = value.fetch 'total'
  monny.month = value.fetch 'month'
  return monny
end
```</p>

<h3>Update cucumber and rspec testing</h3>

<p>In <em>spec/spec_help.rb</em>
``` ruby spec_help.rb</p>

<h1>mark below</h1>

<h1>config.fixture_path = "#{::Rails.root}/spec/fixtures"</h1>

<h1>config.use_transactional_fixtures = true</h1>

<h1>unmark below</h1>

<p>config.before(:suite) do
  DatabaseCleaner.strategy = :truncation # must be truncation
end
config.before(:each) do
  DatabaseCleaner.start
end
config.after(:each) do
  DatabaseCleaner.clean
end
<code>
In _feature/env/rb_
</code> ruby env.rb
begin
  DatabaseCleaner.strategy = :truncation  # must be truncation
rescue NameError
  raise "You need to add database_cleaner to your Gemfile (in the :test group) if you wish to use it."
end
<code>
That's it. But i still have a question not solved. During my trying the mongod process was crash easily and no idea why.
Error log like below.
</code> sh
Wed Oct 23 00:37:28.314 Invalid access at address: 0x10 from thread: conn5</p>

<p>Wed Oct 23 00:37:28.314 Got signal: 11 (Segmentation fault: 11).</p>

<p>Wed Oct 23 00:37:28.380 Backtrace:
0x100a3eaf0 0x1005515bd 0x1005518f8 0x7fff8904a90a 0 0x100b70cc7 0x100c3e2c9 0x100c3e131 0x1009f873b 0x1009f85ff 0x1009f32c2 0x1009f3093 0x1009f2c0f 0x100699c7d 0x1006a484c 0x1006c72f5 0x1006c82b3 0x1006c9096 0x1007dec8d 0x1007e50a8
 0   mongod                              0x0000000100a3eaf0 <em>ZN5mongo15printStackTraceERSo + 64
 1   mongod                              0x00000001005515bd </em>ZN5mongo10abruptQuitEi + 397
 2   mongod                              0x00000001005518f8 <em>ZN5mongo24abruptQuitWithAddrSignalEiP9__siginfoPv + 344
 3   libsystem_c.dylib                   0x00007fff8904a90a </em>sigtramp + 26
 4   ???                                 0x0000000000000000 0x0 + 0
 5   mongod                              0x0000000100b70cc7 <em>ZN2v88internal15DeoptimizerDataD1Ev + 55
 6   mongod                              0x0000000100c3e2c9 </em>ZN2v88internal7Isolate6DeinitEv + 105
 7   mongod                              0x0000000100c3e131 <em>ZN2v88internal7Isolate8TearDownEv + 81
 8   mongod                              0x00000001009f873b </em>ZN5mongo7V8ScopeD2Ev + 267
 9   mongod                              0x00000001009f85ff _ZN5mongo7V8ScopeD0Ev + 15
 10  mongod
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing,Documentation and others]]></title>
    <link href="http://weichienhung.github.io/blog/2013/10/13/testing/"/>
    <updated>2013-10-13T19:38:00+08:00</updated>
    <id>http://weichienhung.github.io/blog/2013/10/13/testing</id>
    <content type="html"><![CDATA[<p>Past two weeks, i have studied some useful gems in rails. Here are the summary and tips.</p>

<h2><a href="https://github.com/cucumber/cucumber-rails">Cucumber</a></h2>

<p>Cucumber is the Behavior Driven Development(BDD). Writing testing is the most important in software development.
Without testing case it's hard to refactor any code in the future.</p>

<p>For instance: my site provide REST API with JSON and require devise login to use.
How to test?<br/>
Add to Gemfile. Suggest to use rspec and factory_gril gems together.
<code>ruby Gemfile
group :test do
  gem "rspec-rails"
  gem 'cucumber-rails', :require =&gt; false
  gem "factory_girl_rails"
  gem 'database_cleaner'
end
group :development do
  gem "rspec-rails"
end
</code>
Run <code>rails g cucumber:install</code> to initial features/ structure.</p>

<!--more-->


<p>Modify <em>config/initializers/devise.rb</em> if you use devise and need to test sign_out function.
<code>ruby devise.rb
config.sign_out_via = Rails.env.test? ? :get : :delete
</code>
Create <em>api.feature</em> in features/. You should describe your feature by plain english.
``` ruby api.feature
Feature: Provide API
  In order to show list
  As an Frontend javascript
  Should be able to retrieve data through REST API</p>

<p>  Scenario: list category through REST API</p>

<pre><code>Given I exist as a user and logged in
  And the system knows about the following category
   | 1 | 食 |
   | 2 | 交際娛樂 |
   | 3 | 交通 |
When I send a GET request to category api
Then should response correct category JSON data
  """
  {"monny":[{"cid":1,"name":"食"},
  {"cid":2,"name":"交際娛樂"},
  {"cid":3,"name":"交通"}]}
  """
</code></pre>

<p><code>
Create _api_steps.rb_ in features/step_definitions/ and _users.rb_ in spec/factories/.
</code> ruby api_steps.rb
def create_user
  @user = FactoryGirl.create(:user)
end</p>

<p>def sign_in
  visit '/users/sign_in'
  fill_in "user_email", :with => @user[:email]
  fill_in "user_password", :with => @user[:password]
  click_button "Sign in"
end</p>

<p>Given /<sup>I</sup> exist as a user and logged in$/ do
  create_user
  sign_in
  page.should have_content "Signed in successfully."
end</p>

<p>And /<sup>the</sup> system knows about the following category$/ do |table|
  table.raw.each do |cid, name|</p>

<pre><code>Category.create({cid: cid, name: name})
</code></pre>

<p>  end
end</p>

<p>When /<sup>I</sup> send a GET request to category api$/ do
  @response = page.driver.get api_category_path
end</p>

<p>Then /<sup>should</sup> response correct category JSON data$/ do |expect|
  actual = JSON.parse(@response.body)
  expect = JSON.parse(expect)
  expect.each do |key,value|</p>

<pre><code>assert_equal value, actual[key]
</code></pre>

<p>  end
end
<code>
</code> ruby users.rb
FactoryGirl.define do
  factory :user do</p>

<pre><code>email 'a@a.com'
password 'a1234567'
confirmed_at Time.now
</code></pre>

<p>  end
end
<code>``
Here are some items should be take care.  
1. Use capybara to visit _sign_in_ page and click it to sign in  
2. With</code>| name | yyy |<code>, you can pass a table into steps function. I use it to create Category.  
3. Use</code>page.driver.get api_category_path` to send GET request with authentication session(Because you have sign in)<br/>
Run <em>cucumber</em> to test and get report.</p>

<h2><a href="https://github.com/ernie/ransack">Ransack</a></h2>

<p>Search your data in active record. I add the search function into <a href="https://github.com/weichienhung/rails101_groupme">rails101_groupme</a> project.
The usage is quite simple. The groupme site has a search field in the navigation bar to search all posts.<br/>
<img src="/images/posts/20131013-groupme.png" width="500" height="500" title="groupme" alt="groupme">
Add a method in application_controller.rb because we have a search field in nav bar and every controller need to render it.
``` ruby application_controller.rb
...</p>

<h1>exec set_search before_filter</h1>

<p>before_filter :set_search</p>

<p>def set_search
  @q = Post.search(params[:q])
end
...
<code>
Add controller to handle search request.
</code> ruby search_controller.rb
class SearchController &lt; ApplicationController
  def search</p>

<pre><code>@posts = @q.result(distinct: true)
</code></pre>

<p>  end
end
<code>
Add search path in route. Only accepts post here.
</code> ruby routes.rb
...
post 'search' => 'search#search'
...
<code>
Add search view. Ransack has `search_form_for` tag and it's nice!
</code> ruby search.html.erb
&lt;%= search_form_for @q, :class => "navbar-form navbar-left", url: search_path, html: { method: :post }  do |f| %>
  &lt;%= f.text_field :content_or_title_cont %> <br/>
&lt;% end %>
<code>``
</code>:content_or_title_cont<code>means we want to search content or title that matches search keyword.
If you want to search title column only, you should use</code>:title_cont<code>.</code>_cont` is necessary and means column's content.
column name is the same with the active record you defined.</p>

<h2><a href="http://yardoc.org/">Yard</a></h2>

<p>Documentation is important. The Yard syntax is like Java and i like it.
``` ruby</p>

<h1>@author weichienhung</h1>

<h1>Get places data belong to the category.</h1>

<h1>It uses <em>id</em> from ApplicationController#params to query Place from Category.</h1>

<h1>@return [JSON] the Place json format.</h1>

<p>def show
  begin</p>

<pre><code>@category = Category.find(params[:id])
respond_with @category.places
</code></pre>

<p>  rescue</p>

<pre><code>respond_with []
</code></pre>

<p>  end
end
<code>``
Yard supports markdown syntax in describe your method.</code><em>id</em>` is the italic word in markdown.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Generator and Gem]]></title>
    <link href="http://weichienhung.github.io/blog/2013/09/28/rails-generator-in-gem/"/>
    <updated>2013-09-28T20:52:00+08:00</updated>
    <id>http://weichienhung.github.io/blog/2013/09/28/rails-generator-in-gem</id>
    <content type="html"><![CDATA[<p>Recently i created two emberjs-rails projects.(<a href="https://github.com/weichienhung/money">money</a>,<a href="https://github.com/weichienhung/food-ntpc">food-ntpc</a>).
Everytime i have to create a new rails project and add gems(ember-rails,twitter-bootstrap,thin...) repeatedly. Based on DRY principle i try to write a gem to solve trivials.<br/>
Finally, my first gem <a href="http://rubygems.org/gems/railsone">railsone</a> is out and push to RubyGems. There are many Rail proper nouns like Generator,Template,Plugins,Engine.
In the beginning it's very confuse to me but i have solved them luckly :)</p>

<h3>How to make gem and generator?</h3>

<!-- more -->


<p>Use bundler to create gem structure. <em>railsone</em> is my gem name.
<code>sh
bundle gem railsone
</code>
It create structure like below
<code>
railsone/lib/
railsone/lib/railsone.rb
railsone/lib/railsone/version.rb
railsone/railsone.gemspec
railsone/Gemfile
railsone/Rakefile
</code>
Edit <em>railsone.gemspec</em>. We should finish <code>TODO</code> parts.
<code>ruby railsone.gemspec
...
spec.description   = %q{Railsone helps you create emberjs 1.0 with twitter bootstrap 3.0}
spec.summary       = %q{Create emberjs with twitter bootstrap}
...
</code></p>

<p>Then create a file in <em>lib/railsone/generators/install_generator.rb</em>. It's better to put my custom generator in a generators folder.
<code>
vim railsone/lib/railsone/generators/install_generator.rb
</code>
Next the default auto generated file is in <em>lib/railsone.rb</em>. We should modify it to require my generator file.
``` ruby railsone.rb
require "railsone/version"
require "railsone/generators/install_generator" # require my custom generator.</p>

<p>module Railsone
  # Your code goes here...
end
<code>
Now continue to finish our *install_generator.rb*
</code>
require 'rails/generators' # require rails's generator</p>

<p>module Railsone
  module Generators</p>

<pre><code>class InstallGenerator &lt; ::Rails::Generators::Base
  desc "generator to create emberjs and twitter bootstrap" # description when you type rails g railsone:install --help

  self.source_paths &lt;&lt; File.join(File.dirname(__FILE__), '../../../templates') # source_paths is for external files

  def example_cmd
    gem 'ember-rails'
    remove_file 'app/assets/javascripts/application.js'
    copy_file 'application.js', 'app/assets/javascripts/application.js'
    ...
  end
</code></pre>

<p>  end
end
<code>
Your generator may use external files and they should be searched by `source_paths`. I create a *templates* folder to place files. It's under root folder.
</code> sh folder_structure
railsone/lib/
railsone/templates/
<code>``
Any public method in your generator will be executed automatically. It means</code>example_cmd<code>will be executed when you execute generator.  
Directive</code>gem 'ember-rails'<code>means add *gem 'ember-rails'* into Gemfile. All commands can be found in [RubyGuides](http://guides.rubyonrails.org/generators.html) and [Thor:Action](http://rdoc.info/github/wycats/thor/master/Thor/Actions.html).  
Directive</code>copy_file` copy my custom application.js<em>(in templates/application.js)</em> to overwrite project's application.js<em>(in app/assets/javascripts/application.js)</em>.</p>

<h3>How to test?</h3>

<p>Before push to RubyGems, we should do a minimal testing. Create a new rails project.
<code>sh
rails new myrails
</code>
Assume your <em>myrails</em> and <em>railsone</em> are in the same folder
<code>
railsone/
myrails/
</code>
Add <em>railsone</em> to your myrails's Gemfile
<code>ruby Gemfile
...
gem 'railsone', path: '../railsone'
...
</code>
Execute railsone generator. <em>railsone</em> is our namespace and <em>install</em> is our generator name.
<code>sh
cd myrails/
rails g railsone:install
</code>
Then your will find your myrails Gemfile and application.js are changed.</p>

<h3>How to publish?</h3>

<p>Push to RubyGems is incrediblely simple. Refer to <a href="http://rubygems.org/">RubyGems</a>. <strong>Don't forget to create your account first.</strong>
``` sh</p>

<h1>build your gem</h1>

<p>gem build railsone.gemspec</p>

<h1>publish your gem</h1>

<p>gem push railsone-0.0.1.gem
```</p>
]]></content>
  </entry>
  
</feed>
