<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | Weichien's studying note]]></title>
  <link href="http://weichienhung.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://weichienhung.github.io/"/>
  <updated>2013-10-19T15:40:15+08:00</updated>
  <id>http://weichienhung.github.io/</id>
  <author>
    <name><![CDATA[Weichien Hung]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Testing,Documentation and others]]></title>
    <link href="http://weichienhung.github.io/blog/2013/10/13/testing/"/>
    <updated>2013-10-13T19:38:00+08:00</updated>
    <id>http://weichienhung.github.io/blog/2013/10/13/testing</id>
    <content type="html"><![CDATA[<p>Past two weeks, i have studied some useful gems in rails. Here are the summary and tips.</p>

<h2><a href="https://github.com/cucumber/cucumber-rails">Cucumber</a></h2>

<p>Cucumber is the Behavior Driven Development(BDD). Writing testing is the most important in software development.
Without testing case it's hard to refactor any code in the future.</p>

<p>For instance: my site provide REST API with JSON and require devise login to use.
How to test?<br/>
Add to Gemfile. Suggest to use rspec and factory_gril gems together.
<code>ruby Gemfile
group :test do
  gem "rspec-rails"
  gem 'cucumber-rails', :require =&gt; false
  gem "factory_girl_rails"
  gem 'database_cleaner'
end
group :development do
  gem "rspec-rails"
end
</code>
Run <code>rails g cucumber:install</code> to initial features/ structure.</p>

<!--more-->


<p>Create <em>api.feature</em> in features/. You should describe your feature by plain english.
``` ruby api.feature
Feature: Provide API
  In order to show list
  As an Frontend javascript
  Should be able to retrieve data through REST API</p>

<p>  Scenario: list category through REST API</p>

<pre><code>Given I exist as a user and logged in
  And the system knows about the following category
   | 1 | 食 |
   | 2 | 交際娛樂 |
   | 3 | 交通 |
When I send a GET request to category api
Then should response correct category JSON data
  """
  {"monny":[{"cid":1,"name":"食"},
  {"cid":2,"name":"交際娛樂"},
  {"cid":3,"name":"交通"}]}
  """
</code></pre>

<p><code>
Create _api_steps.rb_ in features/step_definitions/ and _users.rb_ in spec/factories/.
</code> ruby api_steps.rb
def create_user
  @user = FactoryGirl.create(:user)
end</p>

<p>def sign_in
  visit '/users/sign_in'
  fill_in "user_email", :with => @user[:email]
  fill_in "user_password", :with => @user[:password]
  click_button "Sign in"
end</p>

<p>Given /<sup>I</sup> exist as a user and logged in$/ do
  create_user
  sign_in
  page.should have_content "Signed in successfully."
end</p>

<p>And /<sup>the</sup> system knows about the following category$/ do |table|
  table.raw.each do |cid, name|</p>

<pre><code>Category.create({cid: cid, name: name})
</code></pre>

<p>  end
end</p>

<p>When /<sup>I</sup> send a GET request to category api$/ do
  @response = page.driver.get api_category_path
end</p>

<p>Then /<sup>should</sup> response correct category JSON data$/ do |expect|
  assert_equal expect.gsub(/\n/,''), @response.body
end
<code>
</code> ruby users.rb
FactoryGirl.define do
  factory :user do</p>

<pre><code>email 'a@a.com'
password 'a1234567'
confirmed_at Time.now
</code></pre>

<p>  end
end
<code>``
Here are some items should be take care.  
1. Use capybara to visit _sign_in_ page and click it to sign in  
2. With</code>| name | yyy |<code>, you can pass a table into steps function. I use it to create Category.  
3. Use</code>page.driver.get api_category_path<code>to send GET request with authentication session(Because you have sign in)  
4. Use</code>expect.gsub(/\n/,'')<code>to eliminate</code>\n` because i use break line in feature description.</p>

<h2><a href="https://github.com/ernie/ransack">Ransack</a></h2>

<p>Search your data in active record. I add the search function into <a href="https://github.com/weichienhung/rails101_groupme">rails101_groupme</a> project.
The usage is quite simple. The groupme site has a search field in the navigation bar to search all posts.<br/>
<img src="/images/20131013-groupme.png" width="500" height="500" title="groupme" alt="groupme">
Add a method in application_controller.rb because we have a search field in nav bar and every controller need to render it.
``` ruby application_controller.rb
...</p>

<h1>exec set_search before_filter</h1>

<p>before_filter :set_search</p>

<p>def set_search
  @q = Post.search(params[:q])
end
...
<code>
Add controller to handle search request.
</code> ruby search_controller.rb
class SearchController &lt; ApplicationController
  def search</p>

<pre><code>@posts = @q.result(distinct: true)
</code></pre>

<p>  end
end
<code>
Add search path in route. Only accepts post here.
</code> ruby routes.rb
...
post 'search' => 'search#search'
...
<code>
Add search view. Ransack has `search_form_for` tag and it's nice!
</code> ruby search.html.erb
&lt;%= search_form_for @q, :class => "navbar-form navbar-left", url: search_path, html: { method: :post }  do |f| %>
  &lt;%= f.text_field :content_or_title_cont %> <br/>
&lt;% end %>
<code>``
</code>:content_or_title_cont<code>means we want to search content or title that matches search keyword.
If you want to search title column only, you should use</code>:title_cont<code>.</code>_cont` is necessary and means column's content.
column name is the same with the active record you defined.</p>

<h2><a href="http://yardoc.org/">Yard</a></h2>

<p>Documentation is important. The Yard syntax is like Java and i like it.
``` ruby</p>

<h1>@author weichienhung</h1>

<h1>Get places data belong to the category.</h1>

<h1>It uses <em>id</em> from ApplicationController#params to query Place from Category.</h1>

<h1>@return [JSON] the Place json format.</h1>

<p>def show
  begin</p>

<pre><code>@category = Category.find(params[:id])
respond_with @category.places
</code></pre>

<p>  rescue</p>

<pre><code>respond_with []
</code></pre>

<p>  end
end
<code>``
Yard supports markdown syntax in describe your method.</code><em>id</em>` is the italic word in markdown.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Generator and Gem]]></title>
    <link href="http://weichienhung.github.io/blog/2013/09/28/rails-generator-in-gem/"/>
    <updated>2013-09-28T20:52:00+08:00</updated>
    <id>http://weichienhung.github.io/blog/2013/09/28/rails-generator-in-gem</id>
    <content type="html"><![CDATA[<p>Recently i created two emberjs-rails projects.(<a href="https://github.com/weichienhung/money">money</a>,<a href="https://github.com/weichienhung/food-ntpc">food-ntpc</a>).
Everytime i have to create a new rails project and add gems(ember-rails,twitter-bootstrap,thin...) repeatedly. Based on DRY principle i try to write a gem to solve trivials.<br/>
Finally, my first gem <a href="http://rubygems.org/gems/railsone">railsone</a> is out and push to RubyGems. There are many Rail proper nouns like Generator,Template,Plugins,Engine.
In the beginning it's very confuse to me but i have solved them luckly :)</p>

<h3>How to make gem and generator?</h3>

<!-- more -->


<p>Use bundler to create gem structure. <em>railsone</em> is my gem name.
<code>sh
bundle gem railsone
</code>
It create structure like below
<code>
railsone/lib/
railsone/lib/railsone.rb
railsone/lib/railsone/version.rb
railsone/railsone.gemspec
railsone/Gemfile
railsone/Rakefile
</code>
Edit <em>railsone.gemspec</em>. We should finish <code>TODO</code> parts.
<code>ruby railsone.gemspec
...
spec.description   = %q{Railsone helps you create emberjs 1.0 with twitter bootstrap 3.0}
spec.summary       = %q{Create emberjs with twitter bootstrap}
...
</code></p>

<p>Then create a file in <em>lib/railsone/generators/install_generator.rb</em>. It's better to put my custom generator in a generators folder.
<code>
vim railsone/lib/railsone/generators/install_generator.rb
</code>
Next the default auto generated file is in <em>lib/railsone.rb</em>. We should modify it to require my generator file.
``` ruby railsone.rb
require "railsone/version"
require "railsone/generators/install_generator" # require my custom generator.</p>

<p>module Railsone
  # Your code goes here...
end
<code>
Now continue to finish our *install_generator.rb*
</code>
require 'rails/generators' # require rails's generator</p>

<p>module Railsone
  module Generators</p>

<pre><code>class InstallGenerator &lt; ::Rails::Generators::Base
  desc "generator to create emberjs and twitter bootstrap" # description when you type rails g railsone:install --help

  self.source_paths &lt;&lt; File.join(File.dirname(__FILE__), '../../../templates') # source_paths is for external files

  def example_cmd
    gem 'ember-rails'
    remove_file 'app/assets/javascripts/application.js'
    copy_file 'application.js', 'app/assets/javascripts/application.js'
    ...
  end
</code></pre>

<p>  end
end
<code>
Your generator may use external files and they should be searched by `source_paths`. I create a *templates* folder to place files. It's under root folder.
</code> sh folder_structure
railsone/lib/
railsone/templates/
<code>``
Any public method in your generator will be executed automatically. It means</code>example_cmd<code>will be executed when you execute generator.  
Directive</code>gem 'ember-rails'<code>means add *gem 'ember-rails'* into Gemfile. All commands can be found in [RubyGuides](http://guides.rubyonrails.org/generators.html) and [Thor:Action](http://rdoc.info/github/wycats/thor/master/Thor/Actions.html).  
Directive</code>copy_file` copy my custom application.js<em>(in templates/application.js)</em> to overwrite project's application.js<em>(in app/assets/javascripts/application.js)</em>.</p>

<h3>How to test?</h3>

<p>Before push to RubyGems, we should do a minimal testing. Create a new rails project.
<code>sh
rails new myrails
</code>
Assume your <em>myrails</em> and <em>railsone</em> are in the same folder
<code>
railsone/
myrails/
</code>
Add <em>railsone</em> to your myrails's Gemfile
<code>ruby Gemfile
...
gem 'railsone', path: '../railsone'
...
</code>
Execute railsone generator. <em>railsone</em> is our namespace and <em>install</em> is our generator name.
<code>sh
cd myrails/
rails g railsone:install
</code>
Then your will find your myrails Gemfile and application.js are changed.</p>

<h3>How to publish?</h3>

<p>Push to RubyGems is incrediblely simple. Refer to <a href="http://rubygems.org/">RubyGems</a>. <strong>Don't forget to create your account first.</strong>
``` sh</p>

<h1>build your gem</h1>

<p>gem build railsone.gemspec</p>

<h1>publish your gem</h1>

<p>gem push railsone-0.0.1.gem
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use HighchartJS to visual data]]></title>
    <link href="http://weichienhung.github.io/blog/2013/09/22/use-highchartjs-to-visual/"/>
    <updated>2013-09-22T17:16:00+08:00</updated>
    <id>http://weichienhung.github.io/blog/2013/09/22/use-highchartjs-to-visual</id>
    <content type="html"><![CDATA[<p>I just push a new project to <a href="https://github.com/weichienhung/money">github</a> and <a href="http://weichien-money.herokuapp.com/">heroku</a>.
This project is derived from my iOS App <a href="https://itunes.apple.com/tw/app/monny/id590327036?mt=8">Monny</a>.
The App I used it to record my daily expense. The free version doesn't have visual graph to show summary data.
So i use EmberJS,HighchartJS and Rails to build this simple web app. I always learned new knowledge during coding.</p>

<p>I take few snaphots of this probject.</p>

<!-- more -->


<h3>List every record</h3>

<p><img src="/images/0922-list.png" width="500" height="500" title="list-image" alt="list"></p>

<h3>Category summary</h3>

<p><img src="/images/0922-summary.png" width="500" height="500" title="summary-image" alt="summary"></p>

<h3>Year trend</h3>

<p><img src="/images/0922-trend.png" width="500" height="500" title="trend-image" alt="trend"></p>

<p>I won't describe studying notes here but write them in other posts.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActionSupport in Rails4 part2]]></title>
    <link href="http://weichienhung.github.io/blog/2013/09/13/actionsupport-in-rails4-part2/"/>
    <updated>2013-09-13T21:42:00+08:00</updated>
    <id>http://weichienhung.github.io/blog/2013/09/13/actionsupport-in-rails4-part2</id>
    <content type="html"><![CDATA[<p>Continue ActionSupport useful record</p>

<h3>Extensions to Numeric</h3>

<hr />

<p>Defined in active_support/core_ext/numeric/bytes.rb.</p>

<h4>Bytes</h4>

<p>All number respond to these methods
<code>ruby
2.kilobytes   # =&gt; 2048
3.megabytes   # =&gt; 3145728
3.5.gigabytes # =&gt; 3758096384
-4.exabytes   # =&gt; -4611686018427387904
</code></p>

<!-- more-->


<hr />

<p>Defined in active_support/core_ext/numeric/time.rb.</p>

<h4>Time</h4>

<p>```</p>

<h1>equivalent to Time.current.advance(months: 1)</h1>

<p>1.month.from_now</p>

<h1>equivalent to Time.current.advance(years: 2)</h1>

<p>2.years.from_now</p>

<h1>equivalent to Time.current.advance(months: 4, years: 5)</h1>

<p>(4.months + 5.years).from_now
```</p>

<h3>Extensions to Integer</h3>

<hr />

<p>Defined in active_support/core_ext/integer/multiple.rb.</p>

<h4>multiple_of</h4>

<p><code>
2.multiple_of?(1) # =&gt; true
1.multiple_of?(2) # =&gt; false
</code></p>

<h3>Extensions to Enumerable</h3>

<hr />

<p>Defined in active_support/core_ext/enumerable.rb.</p>

<h4>sum</h4>

<p><code>
[1, 2, 3].sum # =&gt; 6
(1..100).sum  # =&gt; 5050
</code>
If a block is given, sum becomes an iterator that yields the elements of the collection and sums the returned values:
<code>
(1..5).sum {|n| n * 2 } # =&gt; 30
[2, 4, 6, 8, 10].sum    # =&gt; 30
</code></p>

<h4>many?</h4>

<p>The method many? is shorthand for collection.size > 1:
<code>
&lt;% if pages.many? %&gt;
  &lt;%= pagination_links %&gt;
&lt;% end %&gt;
</code></p>

<h3>Extensions to Array</h3>

<hr />

<p>Defined in active_support/core_ext/array/access.rb.
<code>
%w(a b c d).to(2) # =&gt; %w(a b c)
[].to(7)          # =&gt; []
%w(a b c d).from(2)  # =&gt; %w(c d)
%w(a b c d).from(10) # =&gt; []
</code></p>

<hr />

<p>Defined in active_support/core_ext/array/prepend_and_append.rb.</p>

<h4>prepend and append</h4>

<p><code>
%w(a b c d).prepend('e')  # =&gt; %w(e a b c d)
[].prepend(10)            # =&gt; [10]
%w(a b c d).append('e')  # =&gt; %w(a b c d e)
[].append([1,2])         # =&gt; [[1,2]]
</code></p>

<hr />

<p>Defined in active_support/core_ext/array/grouping.rb</p>

<h4>in_groups_of(number, fill_with = nil)</h4>

<p>The method in_groups_of splits an array into consecutive groups of a certain size.
<code>
[1, 2, 3].in_groups_of(2) # =&gt; [[1, 2], [3, nil]]
[1, 2, 3].in_groups_of(2, false) # =&gt; [[1, 2], [3]]
[1, 2, 3].in_groups_of(2, 0) # =&gt; [[1, 2], [3, 0]]
</code></p>

<h4>in_groups(number, fill_with = nil)</h4>

<p>The method in_groups splits an array into a certain number of groups.
```
%w(1 2 3 4 5 6 7).in_groups(3)</p>

<h1>=> [["1", "2", "3"], ["4", "5", nil], ["6", "7", nil]]</h1>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActionSupport in Rails4 part1]]></title>
    <link href="http://weichienhung.github.io/blog/2013/09/12/actionsupport-methods-in-rails4/"/>
    <updated>2013-09-12T17:23:00+08:00</updated>
    <id>http://weichienhung.github.io/blog/2013/09/12/actionsupport-methods-in-rails4</id>
    <content type="html"><![CDATA[<p>Recently i study documents in <a href="http://edgeguides.rubyonrails.org/">ruby edgeguides</a>.
There are a lot of methods in ActionSupport chapter. I record something useful here and for reference in the future.</p>

<h3>Extensions to All Objects</h3>

<hr />

<p>Defined in active_support/core_ext/object/blank.rb.</p>

<h4>blank?</h4>

<p>Following vlaues are considered to be blank.<br/>
* nil and false<br/>
* strings composed only of whitespace (see note below)<br/>
* empty arrays and hashes<br/>
In particular, 0 and 0.0 are not blank.</p>

<!-- more-->


<h4>present?</h4>

<p>The method <code>present?</code> is equivalent to <code>!blank?</code></p>

<h4>presence</h4>

<p>Returns itself if present?, and nil otherwise. Useful
``` ruby
host = config[:host].presence || 'localhost'</p>

<h2>```</h2>

<p>Defined in active_support/core_ext/object/duplicable.rb.</p>

<h4>duplicable?</h4>

<p>By definition all objects are duplicable? except nil, false, true, symbols, numbers, class, and module objects.</p>

<hr />

<p>Defined in active_support/core_ext/object/duplicable.rb.</p>

<h4>deep_dup</h4>

<p>Deep duplicate. Normally, <code>dup</code> an object that contains other objects, Ruby only creates a shallow copy of the object.</p>

<hr />

<p>Defined in active_support/core_ext/object/try.rb.</p>

<h4>try</h4>

<p>Try to call a method only if it is not nil
```</p>

<h1>without try</h1>

<p>unless @number.nil?
  @number.next
end</p>

<h1>with try</h1>

<p>@number.try(:next)
<code>
try can also be called without arguments but a block
</code>
@person.try { |person| "#{person.first_name} #{person.last_name}" }
```</p>

<hr />

<p>Defined in active_support/core_ext/object/with_options.rb.</p>

<h4>with_options</h4>

<p>```
class Account &lt; ActiveRecord::Base
  has_many :customers, dependent: :destroy
  has_many :products,  dependent: :destroy
  has_many :invoices,  dependent: :destroy
  has_many :expenses,  dependent: :destroy
end</p>

<h1>with options way</h1>

<p>class Account &lt; ActiveRecord::Base
  with_options dependent: :destroy do |assoc|</p>

<pre><code>assoc.has_many :customers
assoc.has_many :products
assoc.has_many :invoices
assoc.has_many :expenses
</code></pre>

<p>  end
end
```</p>

<hr />

<p>Defined in active_support/core_ext/object/instance_variables.rb.</p>

<h4>instance_values</h4>

<p>```
class C
  def initialize(x, y)</p>

<pre><code>@x, @y = x, y
</code></pre>

<p>  end
end</p>

<p>C.new(0, 1).instance_values # => {"x" => 0, "y" => 1}
```</p>

<h4>instance_variable_names</h4>

<p>```
class C
  def initialize(x, y)</p>

<pre><code>@x, @y = x, y
</code></pre>

<p>  end
end</p>

<p>C.new(0, 1).instance_variable_names # => ["@x", "@y"]
```</p>

<hr />

<p>Defined in active_support/core_ext/object/inclusion.rb.</p>

<h4>in?</h4>

<p><code>
1.in?([1,2])        # =&gt; true
"lo".in?("hello")   # =&gt; true
25.in?(30..50)      # =&gt; false
1.in?(1)            # =&gt; ArgumentError because argument passed does not respond to include?.
</code></p>

<h3>Extensions to Module</h3>

<hr />

<p>Defined in active_support/core_ext/module/attr_internal.rb.</p>

<h4>Internal Attributes</h4>

<p>Active Support defines the macros attr_internal_reader, attr_internal_writer, and attr_internal_accessor
The macro attr_internal is a synonym for attr_internal_accessor:
``` ruby</p>

<h1>library</h1>

<p>class ThirdPartyLibrary::Crawler
  attr_internal :log_level
end</p>

<h1>client code</h1>

<p>class MyCrawler &lt; ThirdPartyLibrary::Crawler
  attr_accessor :log_level
end
```</p>

<h3>Extensions to String</h3>

<hr />

<p>Defined in active_support/core_ext/string/filters.rb.</p>

<h4>remove</h4>

<p><code>
Hello World".remove(/Hello /) =&gt; "World"
</code></p>

<h4>squish</h4>

<p>The method squish strips leading and trailing whitespace, and substitutes runs of whitespace with a single space each:
<code>
" \n  foo\n\r \t bar \n".squish # =&gt; "foo bar"
</code></p>

<h4>truncate</h4>

<p>```
"Oh dear! Oh dear! I shall be late!".truncate(20)</p>

<h1>=> "Oh dear! Oh dear!..."</h1>

<p><code>
Ellipsis can be customized with the :omission option
</code>
"Oh dear! Oh dear! I shall be late!".truncate(20, omission: '&hellip;')</p>

<h1>=> "Oh dear! Oh &hellip;"</h1>

<p><code>
Note in particular that truncation takes into account the length of the omission string.
Pass a :separator to truncate the string at a natural break:
</code>
"Oh dear! Oh dear! I shall be late!".truncate(18)</p>

<h1>=> "Oh dear! Oh dea..."</h1>

<p>"Oh dear! Oh dear! I shall be late!".truncate(18, separator: ' ')</p>

<h1>=> "Oh dear! Oh..."</h1>

<h2>```</h2>

<p>Defined in active_support/core_ext/string/starts_ends_with.rb.</p>

<h4>starts_with? and ends_with?</h4>

<p>```
"foo".starts_with?("f") # => true
"foo".ends_with?("o")   # => true</p>

<h2>```</h2>

<p>Defined in active_support/core_ext/string/access.rb.</p>

<h4>at(position)</h4>

<p><code>
"hello".at(0)  # =&gt; "h"
"hello".at(4)  # =&gt; "o"
"hello".at(-1) # =&gt; "o"
"hello".at(10) # =&gt; nil
</code></p>

<h4>from(position)</h4>

<p><code>
"hello".from(0)  # =&gt; "hello"
"hello".from(2)  # =&gt; "llo"
"hello".from(-2) # =&gt; "lo"
"hello".from(10) # =&gt; "" if &lt; 1.9, nil in 1.9
</code></p>

<h4>to(position)</h4>

<p>```
"hello".to(0)  # => "h"
"hello".to(2)  # => "hel"
"hello".to(-2) # => "hell"
"hello".to(10) # => "hello"</p>

<h2>```</h2>

<p>Defined in active_support/core_ext/string/conversions.rb.</p>

<h4>to_date, to_time, to_datetime</h4>

<p>```
"2010-07-27".to_date              # => Tue, 27 Jul 2010
"2010-07-27 23:37:00".to_time     # => Tue Jul 27 23:37:00 UTC 2010
"2010-07-27 23:37:00".to_datetime # => Tue, 27 Jul 2010 23:37:00 +0000</p>

<p>"2010-07-27 23:42:00".to_time(:utc)   # => Tue Jul 27 23:42:00 UTC 2010
"2010-07-27 23:42:00".to_time(:local) # => Tue Jul 27 23:42:00 +0200 2010
```</p>
]]></content>
  </entry>
  
</feed>
