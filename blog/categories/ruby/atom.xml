<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Weichien's studying note]]></title>
  <link href="http://weichienhung.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://weichienhung.github.io/"/>
  <updated>2013-12-28T16:48:35+08:00</updated>
  <id>http://weichienhung.github.io/</id>
  <author>
    <name><![CDATA[Weichien Hung]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[UI automation]]></title>
    <link href="http://weichienhung.github.io/blog/2013/12/28/ui-automation/"/>
    <updated>2013-12-28T15:47:00+08:00</updated>
    <id>http://weichienhung.github.io/blog/2013/12/28/ui-automation</id>
    <content type="html"><![CDATA[<p>This article is the last one in 2013. In the rails project we use capybara to do UI testing.
Like click a button/link or fill the form. But i will show how to use capybara without rails in UI automation today.</p>

<p>Sometimes we have to repeat trivial works and these require user to interactive with browser.
For instance, upload file to server or input necessary data.</p>

<p>Install below gems and Firefox
<code>sh
gem install capybara
gem install selenium-webdriver
</code></p>

<p>In orer to use capybara without rails. You need to require <code>capybara</code> manually.
In default capybara will launch rack server, change <code>run_server</code> to <code>false</code>.
Because we assume your server is running. Use <code>selenium</code> as <code>driver</code>.
``` ruby
require 'capybara'
require 'capybara/dsl'</p>

<p>Capybara.run_server = false
Capybara.current_driver = :selenium</p>

<h1>it will open the browser to 127.0.0.1:8888/admin</h1>

<p>Capybara.app_host = 'http://127.0.0.1:8888/admin'
```</p>

<!-- more -->


<p>With capybara DSL, you can operate UI easily.
Below code shows fill id and password field with <code>admin</code> then click login button.
<code>
def login
  visit('/')
  fill_in 'userNameTxtField', :with =&gt; 'admin'
  fill_in 'passwordTxtField', :with =&gt; 'admin'
  find('#loginBtn').click
end
</code>
In case you have to wait specified element show in page or element class changed
```
def wait_util_find(cssString)
  puts "start waiting until find " &lt;&lt; cssString
  until page.has_selector?(cssString) do</p>

<pre><code>puts "waiting..." &lt;&lt; cssString
sleep 1
</code></pre>

<p>  end
end</p>

<p>def wait_element_enable(cssString)
  elem = find(cssString)
  while elem[:class].include?('disabled') do</p>

<pre><code>puts "waiting..."
sleep 5
</code></pre>

<p>  end
end</p>

<h1>If you need to find multiple elements, you can use page.all</h1>

<h1>find() method can't find multiple elements. It causes exception.</h1>

<p>def wait_something(cssString)
  while page.all(:css, cssString).length > 1</p>

<pre><code>puts "waiting..."
sleep 5
</code></pre>

<p>  end
end
<code>
How to attach file? In capybara official document, you can use `attach_file` to attach file easily.
But i found it doesn't work in HTML5 input file tag with multiple like
</code>
<input id="upload" name="upload-btn" type="file" multiple>
<code>
The capybara always show can't find the element.
</code>
attach_file 'upload-btn', '/upload/1.zip' # it won't work.
<code>
Then i think i could click the button then select the file myself.
</code>
def upload
  find('#upload').click # click upload button</p>

<p>  select_file # select files from disk.
end
<code>
But here is the problem, selenium driver can't control the native file selection window.
There's no way to select files in file selection window.
After few days survey, i solved it with `rautomation`.
</code> sh
gem install rautomation
<code>
After the file selection window popups, the running program is stoped.
It means `select_file` method won't be executed.
I think it's because the native window popups and require user to interactive.
So i change capybara click method to selenium method and `select_file` can be executed.
</code> ruby
require <code>rautomation</code></p>

<p>def upload
  # find('#upload').click</p>

<p>  upload_elem = page.driver.browser.all(:xpath, '//input[@name="upload-btn"]')[1]
  upload_elem.send_keys "gogo"</p>

<p>  select_file
end
<code>
The next step is how to select files in native window.
The first step is find the native window. I use a simple way to do it.
Compare the window number before click upload button and after.
</code>
def upload
  before = RAutomation::Window.windows.map(&amp;:hwnd)</p>

<p>  upload_elem = page.driver.browser.all(:xpath, '//input[@name="upload-btn"]')[1]
  upload_elem.send_keys "gogo"</p>

<p>  after = RAutomation::Window.windows.map(&amp;:hwnd)</p>

<p>  select_file(before, after)
end</p>

<p>def select_file(before, after)
  file_select_window = nil
  candidate = after - before
  case candidate.length</p>

<pre><code>when 0
  nil
when 1
  file_select_window = RAutomation::Window.new(:hwnd =&gt; candidate[0])
else
  select_from_other_criteria(candidate)
</code></pre>

<p>  end
end
<code>
If the candidate length equals 1, that candidate will be the file selection window.
There should be better way to find the native window.
I try to find window by window's title but it won't work. Maybe it's because my OS or Firebox is Chinese.  
After you get the `file_select_window`, set the file path to text_field and click the button.
</code>
def select_file(before, after)
  ...</p>

<p>  file_select_window.text_field.set '/upload/1.zip'
  file_select_window.button.click
end
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Useful methods in ruby]]></title>
    <link href="http://weichienhung.github.io/blog/2013/12/14/utility-tool-by-ruby/"/>
    <updated>2013-12-14T21:14:00+08:00</updated>
    <id>http://weichienhung.github.io/blog/2013/12/14/utility-tool-by-ruby</id>
    <content type="html"><![CDATA[<p>This week i write automatic utility tools for colleague.
It saves time and reduce trivial works. Learn useful ruby built-in methods.</p>

<h3>List all under a folder</h3>

<p>``` ruby</p>

<h1>lists all files and folders under target/ folder</h1>

<p>Dir.glob('target/<strong>/</strong>').select do |f|
  if File.directory? f</p>

<pre><code># do something
</code></pre>

<p>  else</p>

<pre><code># do something
</code></pre>

<p>  end
end</p>

<h1>ONLY list all in target/ , doesn't list subfolders like target/subfolders/</h1>

<p>Dir.glob('target/**').select do |f|</p>

<p>end
```</p>

<!--more -->


<h3>Get folder name or file name from file path</h3>

<p><code>
f = "/abc/def/ghi.rb"
File.dirname(f) # /abc/def
File.basename(f) # ghi.rb
</code></p>

<h3>Read and parse file to json</h3>

<p><code>@data</code> will be JSON object
```
require 'json'</p>

<p>File.open("data.cfg", "r:UTF-8") { |f| @data = JSON.parse(f.read) }
```</p>

<h3>Write json to file</h3>

<p>Use <code>JSON.pretty_generate</code> to create well format json file.
```
require 'json'</p>

<p>File.open("data.cfg", "w") {|file| file.puts JSON.pretty_generate(@data)}
```</p>

<h3>Read a CSV file</h3>

<p><code>{ headers: true }</code> means first row is as header
```
require 'csv'</p>

<p>CSV.open("datacfg.csv", "r", { headers: true }) do |csv|
  matches = csv.find_all do |row|</p>

<pre><code>puts row.headers[0] # first column of header
puts row[0] # first column of each row
</code></pre>

<p>  end
end
```</p>

<h3>Create a http connection to download big file and calculate progress</h3>

<p>```
require 'net/http'</p>

<p>downloadLink = "http://abc/def/ghi.zip"
uri = URI.parse downloadLink
Net::HTTP.start(uri.host, uri.port) do |http|
  request = Net::HTTP::Get.new uri.request_uri
  request.basic_auth USERNAME, PASSWORD # if you need basic web auth</p>

<p>  http.request request do |response|</p>

<pre><code>download_size = 0
begin
  file = File.open("target.zip", 'wb')
  length = response.content_length
  response.read_body do |fragment|
    download_size += fragment.length
    file.write(fragment) 
    progress = '%.2f' % (download_size.to_f * 100 / length)
  end
ensure
  file.close
end
</code></pre>

<p>  end
end       <br/>
```</p>

<h3>XML handle by nokogiri</h3>

<p>```
require 'nokogiri'</p>

<p>doc = Nokogiri::XML(f) # create a xml doc from a file</p>

<p>nodes = doc.xpath('//bean[@id="getcha"]/*') # find nodes under bean with id 'getcha'
nodes.each do |node|
  node['value'] = "good" # set the attribute 'value' to 'good'
  node.content = "bad" # set the content to 'bad'
end</p>

<p>File.open(f, 'w') { |file| file.write(doc) } # write xml to file
```</p>

<h3>xpath with xml namespace</h3>

<p>For example, the <code>bean</code> is under namespace <code>http://www.springframework.org/schema/util</code>
```
nodes = doc.xpath('//util:bean[@id="getcha"]/*', {"util" => "http://www.springframework.org/schema/util"} )</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[String things in ruby]]></title>
    <link href="http://weichienhung.github.io/blog/2013/09/28/string-thing-in-ruby/"/>
    <updated>2013-09-28T22:21:00+08:00</updated>
    <id>http://weichienhung.github.io/blog/2013/09/28/string-thing-in-ruby</id>
    <content type="html"><![CDATA[<p>String alternatives in ruby</p>

<h3>%Q</h3>

<p>Alternative for double-quoted strings. Below are equivalent
<code>ruby
name_of_object = "John"
puts %Q(Hello World #{name_of_object})
puts "Hello World John"
</code>
You could replace <code>(</code> and <code>)</code> with non-alphanumeric characters.
<code>
puts %Q!Hello World!
puts %Q[Hello World]
puts %Q+Hello World+
puts %/Hello World/ # you can use also.
</code></p>

<!-- more -->


<h3>%q</h3>

<p>Alternative for single-quoted strings. But it can't do expression substitution
<code>ruby
puts %q(Hello World #{name_of_object}) # output: Hello World #{name_of_object}
</code></p>

<h3>%W</h3>

<p>Used for double-quoted array.
<code>
world = "World"
%W(Hello #{world} John\ Smile) # output: ["Hello", "World", "John Smile"]
</code></p>

<h3>%w</h3>

<p>Used for single-quoted array. No expression substitution
<code>
%w(Hello #{world} Good) # output: ["Hello", "#{world}", "Good"]
</code></p>

<h3>%s</h3>

<p>Used for symbols. No expression substitution.
<code>
%s(foo) # output: :foo
%s(foo bar) # output: :"foo bar"
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby is elegance]]></title>
    <link href="http://weichienhung.github.io/blog/2013/03/02/ruby-is-deligight/"/>
    <updated>2013-03-02T14:08:00+08:00</updated>
    <id>http://weichienhung.github.io/blog/2013/03/02/ruby-is-deligight</id>
    <content type="html"><![CDATA[<p>今天持續Ruby study,紀錄一下學習到的東西</p>

<h3>Yield</h3>

<p>讓自定義的method可以接受block, 在yield之後的code會等block內容跑完才接著跑
``` ruby
def block_test
  puts "We're in the method!"
  puts "Yielding to the block..."
  yield
  puts "We're back in the method!"
end</p>

<p>block_test { puts ">>> We're in the block!" }</p>

<h1>you can pass parameter too</h1>

<p>def yield_name(name)
  puts "In the method! Let's yield."
  yield name
  puts "Block complete! Back in the method."
end</p>

<p>yield_name("samuel") { |a| puts "My name is #{a}."}
```
The output is</p>

<pre><code>We're in the method!
Yielding to the block...
&gt;&gt;&gt; We're in the block!
We're back in the method!

In the method! Let's yield.
My name is samuel.
Block complete! Back in the method.
</code></pre>

<!--more-->


<h3>Why Proc?</h3>

<p>block can't be saved to a variable and not a regular object. Proc keep your code reusable. With blocks you have to write your code out each time you need it.
With proc, you write your code once. Proc is savable block.
```
floats = [1.2, 3.45, 0.91, 7.727, 11.42, 482.911]
round_down = Proc.new { |x| x.floor }</p>

<h1>&amp; is used to convert round_down proc to block</h1>

<p>ints = floats.collect(&amp;round_down)  # [1, 3, 0, 7, 11, 482]</p>

<h1>you can call proc directly</h1>

<p>round_down.call(10.45) # 10</p>

<h1>convert Symbol to Proc by &amp;</h1>

<p>puts floats.map(&amp;:to_s)
```</p>

<h3>Lambdas</h3>

<p>lambdas are objects and identical to procs
<code>
strings = ["leonardo", "donatello", "raphael", "michaelangelo"]
symbolize = lambda { |x| x.to_sym }
symbols = strings.collect(&amp;symbolize) # [:leonardo, :donatello, :raphael, :michaelangelo]
</code></p>

<h4>Differences between Procs and Lambdas</h4>

<ol>
<li>Lambdas checks the number of arguments passed to it. Procs ignore it.</li>
<li>When Lambdas returns, it passes control back to calling method. Procs doesn't
```
def batman_ironman_proc
victor = Proc.new { return "Batman will win!" }
victor.call
"Iron Man will win!"
end</li>
</ol>


<p>puts batman_ironman_proc  # Batman will win!</p>

<p>def batman_ironman_lambda
  victor = lambda { return "Batman will win!" }
  victor.call
  "Iron Man will win!"
end</p>

<p>puts batman_ironman_lambda  # Iron Man will win!
```</p>

<h3>Class</h3>

<p>Object-Oriented language always has class.  def initialize就相當於constructor
```
class Person</p>

<pre><code>def initialize(name)
    @name = name
end
</code></pre>

<p>end
matz = Person.new("Yukihiro")
```</p>

<h4>global ($), instance (@), class (@@) variable</h4>

<p>```
class Person</p>

<pre><code>$type = "human"
@@other = "other info"
def initialize(name)
    @name = name
end
def getMe
    @name
end
def self.getOther
    @@other
end
</code></pre>

<p>end</p>

<p>man = Person.new("samuel")
puts $type  # human
puts man.getMe  # samuel
puts Person.getOther  # other info
```</p>

<h3>Inheritance</h3>

<p>Like Java, Ruby only allow one parent class
```
class Parent</p>

<pre><code>def isMankind?
    true
end
</code></pre>

<p>end
class Child &lt; Parent
end</p>

<p>child = Child.new
child.isMankind  # true
```</p>

<h3>Public and Private method</h3>

<p>It's very simple, put method declaration under public or private
```
class MyClass</p>

<pre><code>public
def iampublic
end

private
def iamprivate
end
</code></pre>

<p>end</p>

<p>```</p>

<h3>Method getter and setter</h3>

<p>Incredible simple. attr_accessor means both writer and reader.
```
class Person
  class &lt;&lt; self</p>

<pre><code>attr_accessor :is_good?
</code></pre>

<p>  end</p>

<p>  attr_reader :name
  attr_writer :job
  attr_accessor :age
  def initialize(name, job, age)</p>

<pre><code>@name = name
@job = job
@age = age
</code></pre>

<p>  end
end</p>

<p>Person.is_good?
person = Person.new("samuel","engineer",30)
person.name
person.age
```</p>

<h3>Module</h3>

<p>module is like class but it can't create instance and submodule
```
module MyModule</p>

<pre><code>#constant variable
NAME = "samuel"

#class method
def self.showFull
    puts NAME + " hung"
end
</code></pre>

<p>end</p>

<h1>user :: to access variable</h1>

<p>puts MyModule::NAME  # samuel
MyModule.showFull # samuel hung</p>

<h1>you can use include to get module scope</h1>

<p>include MyModule
puts NAME # samuel
showFull  # this line will cause error, you can't do this on method even you change the scope.</p>

<h1>load other module to use</h1>

<p>require 'date'
puts Date.today
```</p>

<h3>Module and Class</h3>

<p>Easily put module in class
```
module MyModule</p>

<pre><code>def showFull
    puts "samuel hung"
end
</code></pre>

<p>end</p>

<p>class Person</p>

<pre><code>include MyModule
</code></pre>

<p>end
man = Person.new
man.showFull
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby study]]></title>
    <link href="http://weichienhung.github.io/blog/2013/03/01/ruby-study/"/>
    <updated>2013-03-01T23:39:00+08:00</updated>
    <id>http://weichienhung.github.io/blog/2013/03/01/ruby-study</id>
    <content type="html"><![CDATA[<p>最近都在看CSS沒什麼時間繼續看Ruby,今天上codecademy練習ruby。
在這裡紀錄一下之前沒看過的語法。</p>

<h3>Multiple comments</h3>

<p><code>ruby
=begin
this is comment,
i am comment too.
=end
</code></p>

<h3>Get input from console</h3>

<p><code>
print "Integer please: "
user_num = Integer(gets.chomp)
</code></p>

<!--more-->


<h3>Different between string.downcase and string.downcase!</h3>

<p>With ! the user's string is modified in-place; otherwise, Ruby will create a copy of user_input and modify that instead
<code>
name = "Samuel"
downcase_name = name.downcase
puts name  # "Samuel"
downcase_name = name.downcase!
puts name  # "samuel"
</code></p>

<h3>Hash sort_by and Array sort!</h3>

<p>```
h = Hash.new(0)
h.sort_by { |a,b| b }  # we can sort by value</p>

<p>my_array = [3, 4, 8, 7, 1, 6, 5, 9, 2]
my_array.sort! # [1, 2, 3, 4, 5, 6, 7, 8, 9]</p>

<h1>descending order</h1>

<p>my_array.sort! { |a,b| b &lt;=> a} # [9, 8, 7, 6, 5, 4, 3, 2, 1]
```</p>

<h3>What's Symbol? it's not a string</h3>

<p>```
"string" == :string # false</p>

<p>"string".object_id == "string".object_id  # false</p>

<p>:symbol.object_id == :symbol.object_id # true</p>

<p>"string".to_sym == :string # true
"string".intern == :string # true, inter is the same as to_sym
```
Why need symbol? 主要是用來當hash的key以及用來參考到method的名字</p>

<ol>
<li>They're immutable, meaning they can't be changed once they're created</li>
<li>Only one copy,節省記憶體</li>
<li>Hashes that use symbols instead of strings as keys work faster</li>
</ol>


<p>來看一下怎麼使用
```
movies = {</p>

<pre><code>:name =&gt; "star_war",
:age =&gt; "1970"
</code></pre>

<p>}</p>

<h1>But since ruby 1.9 hash become more compact</h1>

<p>movies = {</p>

<pre><code>name: "star_war",
age: "1970"
</code></pre>

<p>}
```</p>

<h3>switch conidition</h3>

<p>```
case language
when "JS"
  puts "Websites!"
when "Python"
  puts "Science!"
when "Ruby"
  puts "Web apps!"
else
  puts "I don't know!"
end</p>

<p>case language
  when "JS" then puts "Websites!"
  when "Python" then puts "Science!"
  when "Ruby" then puts "Web apps!"
  else puts "I don't know!"
end
```</p>

<h3>Ternary conditional expression</h3>

<p><code>
puts 3 &lt; 4 ? "hello world"  : "evil"  # hello world
</code></p>

<h3>Conditional assignment.</h3>

<p>```
favorite_book = nil
puts favorite_book  # won't output anything</p>

<p>favorite_book ||= "Cat's Cradle"
puts favorite_book  # Cat's Cradle
```</p>

<h3>upto and downto</h3>

<p>```
95.upto(100) { |num| print num } # 95 96 97 98 99 100</p>

<h1>also apply to alphabet</h1>

<p>"L".upto("P") { |word| print word }
```</p>

<h3>Call and Response</h3>

<p>Here we use symbol to reference a method name. For example, we want to check variable has next method or not.
<code>
age = 30
age.respond_to?(:next) # true
</code></p>
]]></content>
  </entry>
  
</feed>
