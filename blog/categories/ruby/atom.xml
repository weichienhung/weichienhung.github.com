<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Practice makes perfect]]></title>
  <link href="http://weichienhung.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://weichienhung.github.io/"/>
  <updated>2014-05-04T10:32:08+08:00</updated>
  <id>http://weichienhung.github.io/</id>
  <author>
    <name><![CDATA[Weichien Hung]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Add testing to your gem]]></title>
    <link href="http://weichienhung.github.io/blog/2014/03/30/add-testing-to-your-gem/"/>
    <updated>2014-03-30T00:31:00+08:00</updated>
    <id>http://weichienhung.github.io/blog/2014/03/30/add-testing-to-your-gem</id>
    <content type="html"><![CDATA[<p>There's the old <a href="http://weichienhung.github.io/blog/2013/09/28/rails-generator-in-gem/">post</a> about how to create a ruby gem.
This post is focus on how to add testing to gem.<br/>
First, add rspec into your gem dependency. I like to use rspec as my testing framework.
Here i also use webmock to mock my http request during spec testing.
<code>ruby your_gem.gemspec
Gem::Specification.new do |spec|
  ...
  spec.add_development_dependency 'rspec'
  spec.add_development_dependency 'webmock'
end  
</code>
Create a rake task to run rspec. I create <code>rspec.rake</code> under <code>{gem_root_folder}/tasks/</code>.
Set the default task to <code>:spec</code> then i can just type <code>rake</code> to run testing.
In the meantime i set <code>--color -f d</code> to output result with color and document format.
``` ruby rspec.rake
require 'rspec/core/rake_task'</p>

<p>desc 'Default: run specs.'
task :default => :spec</p>

<p>RSpec::Core::RakeTask.new do |task|
  task.rspec_opts = '--color -f d'
end
<code>
In order to exec our rspec.rake. Import all .rake file under tasks folder to Rakefile.
</code> ruby Rakefile
require "bundler/gem_tasks"</p>

<p>Dir.glob('tasks/<em>*/</em>.rake').each(&amp;method(:import))
<code>
Now we could start to write testing.  
Create `{gem_root_folder}/spec/` folder and `spec_helper.rb` under it.
</code> ruby spec_helper.rb</p>

<h1>require webmock/rspec to use webmock in rspec testing framework</h1>

<p>require 'webmock/rspec'</p>

<h1>mvn_utils is the target class to be test</h1>

<p>require 'mvn_utils'
<code>
Create `mvn_utils_spec.rb` under `{gem_root_folder}/spec/` and require `spec_helper`.
We could require all targets in `spec_helper.rb` and each spec.rb file just require `spec_helper`.
</code> ruby mvn_utils_spec.rb
require 'spec_helper'
describe MvnUtils do</p>

<p>  let(:mvn_base) { "mvn.example.net/service/local/repositories/" }
  let(:header_hash) { {'Accept'=>'<em>/</em>', 'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3', 'User-Agent'=>'Ruby'} }</p>

<p>  describe 'should find the latest version' do</p>

<pre><code>let(:response_xml) { "&lt;metadata&gt;&lt;groupId&gt;a.b&lt;/groupId&gt;&lt;artifactId&gt;x.y&lt;/artifactId&gt;&lt;versioning&gt;" + 
                     "&lt;release&gt;1.0.100&lt;/release&gt;&lt;versions&gt;&lt;version&gt;1.0.98&lt;/version&gt;" + 
                     "&lt;version&gt;1.0.99&lt;/version&gt;&lt;/versions&gt;&lt;/versioning&gt;&lt;/metadata&gt;" }

it 'find_latest_version' do
  stub_request(:get, "http://#{mvn_base}a/b/x/y/maven-metadata.xml")
  .with(:headers =&gt; header_hash)
  .to_return(:status =&gt; 200, :body =&gt; response_xml, :headers =&gt; {})

  expect(MvnUtils.find_latest_version).to eq('1.0.100')
end
</code></pre>

<p>end
<code>``
In the above example, i test</code>MvnUtils.find_latest_version<code>and expect the value should be</code>1.0.100`.
This function will inovke http request to mvn server but i use stub request here to prevent real http connection.
With stub request i could control the returned xml data.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Refactor ruby code by meta programming]]></title>
    <link href="http://weichienhung.github.io/blog/2014/02/22/refactor-ruby-code-by-meta-programming/"/>
    <updated>2014-02-22T12:52:00+08:00</updated>
    <id>http://weichienhung.github.io/blog/2014/02/22/refactor-ruby-code-by-meta-programming</id>
    <content type="html"><![CDATA[<p>最近重構了一些自動化部署的程式碼，因為發現程式碼裡面大部份的邏輯是一樣的。
決定使用meta programming來重構這些程式碼順便學習ruby的meta programming。</p>

<h3>dynamic define method</h3>

<p>看看底下的程式碼，想取得使用者輸入的版號來進行自動部署。
``` ruby before_refactor
  def get_gc_version_from_user</p>

<pre><code>puts "Type a version d.d.d or leave blank to get the latest gc:"
@gc_version = get_user_input
</code></pre>

<p>  end</p>

<p>  def get_gv_version_from_user</p>

<pre><code>return unless @config[:import_gv]
puts "Type a version d.d.d or leave blank to get the latest gv:"
@gv_version = get_user_input
</code></pre>

<p>  end</p>

<p>  def get_game_combo_version_from_user</p>

<pre><code>return unless @config[:import_game_combo]
puts "Type a version d.d.d or leave blank to get the latest game combo:"
@game_combo_version = get_user_input
</code></pre>

<p>  end
<code>
After refactor, use array to create methods. `define_method` is used to define new methods dynamically.
`do |argument|` means your could pass parameters in. `instance_variable_set` is used to set a instance varaible
</code> ruby after_refactor
  ['gc','gv','game_combo'].each do |item|</p>

<pre><code>define_method("get_#{item}_version_from_user") do |argument|
  return unless argument
  puts "Type a version d.d.d or leave blank to get the #{item}"
  instance_variable_set("@#{item}_version", get_user_input)
end
</code></pre>

<p>  end
```</p>

<!-- more -->


<p>After refactor, how to invoke these methods?
<code>ruby how_to_invoke
def prefer_versions
  get_gc_version_from_user(true)
  get_gv_version_from_user(@config[:import_gv])
  get_game_combo_version_from_user(@config[:import_game_combo])
end
</code>
I found it's unconvenient to pass parameter everytime. Methods should determine if it's executed or not.
So i did a little updated. Use <code>instance_variable_get</code> to access instance variable and determine return or not.
``` ruby after_refactor2
  ['gc','gv','game_combo'].each do |item|</p>

<pre><code>define_method("get_#{item}_version_from_user")
  return unless instance_variable_get("@config")["import_#{item}".to_sym]
  puts "Type a version d.d.d or leave blank to get the #{item}"
  instance_variable_set("@#{item}_version", get_user_input)
end
</code></pre>

<p>  end
<code>
How to invoke?
</code> ruby how_to_invoke2
def prefer_versions
  get_gc_version_from_user
  get_gv_version_from_user
  get_game_combo_version_from_user
end
```</p>

<h3>dynamic define class method</h3>

<p>I have a util class and most of methods are class method.
``` ruby before_refactor
class MvnUtils
  class &lt;&lt; self</p>

<pre><code>def find_latest_gc_version
  find_latest_version 'http://xxx.yyy.zzz/folder_a/gc/maven-metadata.xml'
end
def find_latest_gv_version
  find_latest_version 'http://xxx.yyy.zzz/folder_b/gv/maven-metadata.xml'
end
def find_latest_game_combo_version
  find_latest_version 'http://xxx.yyy.zzz/folder_c/game_combo/maven-metadata.xml'
end
</code></pre>

<p>  end
  ...
end
<code>
There're few ways to create class methods but i think below are favroite.  
Use `define_method` inside `class &lt;&lt; self`
</code> ruby first way
class MvnUtils
  class &lt;&lt; self</p>

<pre><code>[%w(gc folder_a),%w(gv folder_b),%w(game_combo folder_c)].each do |item|
  define_method("find_latest_#{item[0]}_version")
    find_latest_version "http://xxx.yyy.zzz/#{item[1]}/#{item[0]}/maven-metadata.xml"
  end
end
</code></pre>

<p>  end
  ...
end
<code>
OR use `define_singleton_method` to create class method
</code> ruby second way
class MvnUtils
  [%w(gc folder_a),%w(gv folder_b),%w(game_combo folder_c)].each do |item|</p>

<pre><code>define_singleton_method("find_latest_#{item[0]}_version")
  find_latest_version "http://xxx.yyy.zzz/#{item[1]}/#{item[0]}/maven-metadata.xml"
end
</code></pre>

<p>  end
  ...
end
```</p>

<h3>dynamic call</h3>

<p>Originally i will retrieve the latest version from mvn if user doens't specific the target deployment version.
``` ruby before_refactor
  def check_gc_version</p>

<pre><code>if @gc_version.nil?
  @gc_version = MvnUtils.find_latest_gc_version 
  abort("Can't find the latest gc version.") if @version.nil?  
end
</code></pre>

<p>  end
  def check_gv_version</p>

<pre><code>return unless @config[:import_gv_game]
if @gv_version.nil?
  @gv_version = MvnUtils.find_latest_gv_version 
  abort("Can't find the latest gv version.") if @gv_version.nil?  
end
</code></pre>

<p>  end
  def check_game_combo_version</p>

<pre><code>return unless @config[:import_game_combo]
if @game_comb_version.nil?
  @game_comb_version = MvnUtils.find_latest_game_combo_version 
  abort("Can't find the latest game comb version.") if @game_comb_version.nil?  
end
</code></pre>

<p>  end
<code>
Use `.send()` to invoke object's method
</code> ruby after_factor
  ['gc','gv','game_combo'].each do |item|</p>

<pre><code>define_method("check_#{item}_version")
  return unless instance_variable_get("@config")["import_#{item}".to_sym]
  if instance_variable_get("@#{item}_version").nil?
    instance_variable_set("@#{item}_version", MvnUtils.send("find_latest_#{item}_version"))
    abort("Can't find the latest #{item} version.") if instance_variable_get("@#{item}_version").nil?  
  end
end
</code></pre>

<p>  end
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UI automation]]></title>
    <link href="http://weichienhung.github.io/blog/2013/12/28/ui-automation/"/>
    <updated>2013-12-28T15:47:00+08:00</updated>
    <id>http://weichienhung.github.io/blog/2013/12/28/ui-automation</id>
    <content type="html"><![CDATA[<p>This article is the last one in 2013. In the rails project we use capybara to do UI testing.
Like click a button/link or fill the form. But i will show how to use capybara without rails in UI automation today.</p>

<p>Sometimes we have to repeat trivial works and these require user to interactive with browser.
For instance, upload file to server or input necessary data.</p>

<p>Install below gems and Firefox
<code>sh
gem install capybara
gem install selenium-webdriver
</code></p>

<p>In orer to use capybara without rails. You need to require <code>capybara</code> manually.
In default capybara will launch rack server, change <code>run_server</code> to <code>false</code>.
Because we assume your server is running. Use <code>selenium</code> as <code>driver</code>.
``` ruby
require 'capybara'
require 'capybara/dsl'</p>

<p>Capybara.run_server = false
Capybara.current_driver = :selenium</p>

<h1>it will open the browser to 127.0.0.1:8888/admin</h1>

<p>Capybara.app_host = 'http://127.0.0.1:8888/admin'
```</p>

<!-- more -->


<p>With capybara DSL, you can operate UI easily.
Below code shows fill id and password field with <code>admin</code> then click login button.
<code>
def login
  visit('/')
  fill_in 'userNameTxtField', :with =&gt; 'admin'
  fill_in 'passwordTxtField', :with =&gt; 'admin'
  find('#loginBtn').click
end
</code>
In case you have to wait specified element show in page or element class changed
```
def wait_util_find(cssString)
  puts "start waiting until find " &lt;&lt; cssString
  until page.has_selector?(cssString) do</p>

<pre><code>puts "waiting..." &lt;&lt; cssString
sleep 1
</code></pre>

<p>  end
end</p>

<p>def wait_element_enable(cssString)
  elem = find(cssString)
  while elem[:class].include?('disabled') do</p>

<pre><code>puts "waiting..."
sleep 5
</code></pre>

<p>  end
end</p>

<h1>If you need to find multiple elements, you can use page.all</h1>

<h1>find() method can't find multiple elements. It causes exception.</h1>

<p>def wait_something(cssString)
  while page.all(:css, cssString).length > 1</p>

<pre><code>puts "waiting..."
sleep 5
</code></pre>

<p>  end
end
<code>
How to attach file? In capybara official document, you can use `attach_file` to attach file easily.
But i found it doesn't work in HTML5 input file tag with multiple like
</code>
<input id="upload" name="upload-btn" type="file" multiple>
<code>
The capybara always show can't find the element.
</code>
attach_file 'upload-btn', '/upload/1.zip' # it won't work.
<code>
Then i think i could click the button then select the file myself.
</code>
def upload
  find('#upload').click # click upload button</p>

<p>  select_file # select files from disk.
end
<code>
But here is the problem, selenium driver can't control the native file selection window.
There's no way to select files in file selection window.
After few days survey, i solved it with `rautomation`.
</code> sh
gem install rautomation
<code>
After the file selection window popups, the running program is stoped.
It means `select_file` method won't be executed.
I think it's because the native window popups and require user to interactive.
So i change capybara click method to selenium method and `select_file` can be executed.
</code> ruby
require <code>rautomation</code></p>

<p>def upload
  # find('#upload').click</p>

<p>  upload_elem = page.driver.browser.all(:xpath, '//input[@name="upload-btn"]')[1]
  upload_elem.send_keys "gogo"</p>

<p>  select_file
end
<code>
The next step is how to select files in native window.
The first step is find the native window. I use a simple way to do it.
Compare the window number before click upload button and after.
</code>
def upload
  before = RAutomation::Window.windows.map(&amp;:hwnd)</p>

<p>  upload_elem = page.driver.browser.all(:xpath, '//input[@name="upload-btn"]')[1]
  upload_elem.send_keys "gogo"</p>

<p>  after = RAutomation::Window.windows.map(&amp;:hwnd)</p>

<p>  select_file(before, after)
end</p>

<p>def select_file(before, after)
  file_select_window = nil
  candidate = after - before
  case candidate.length</p>

<pre><code>when 0
  nil
when 1
  file_select_window = RAutomation::Window.new(:hwnd =&gt; candidate[0])
else
  select_from_other_criteria(candidate)
</code></pre>

<p>  end
end
<code>
If the candidate length equals 1, that candidate will be the file selection window.
There should be better way to find the native window.
I try to find window by window's title but it won't work. Maybe it's because my OS or Firebox is Chinese.  
After you get the `file_select_window`, set the file path to text_field and click the button.
</code>
def select_file(before, after)
  ...</p>

<p>  file_select_window.text_field.set '/upload/1.zip'
  file_select_window.button.click
end
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Useful methods in ruby]]></title>
    <link href="http://weichienhung.github.io/blog/2013/12/14/utility-tool-by-ruby/"/>
    <updated>2013-12-14T21:14:00+08:00</updated>
    <id>http://weichienhung.github.io/blog/2013/12/14/utility-tool-by-ruby</id>
    <content type="html"><![CDATA[<p>This week i write automatic utility tools for colleague.
It saves time and reduce trivial works. Learn useful ruby built-in methods.</p>

<h3>List all under a folder</h3>

<p>``` ruby</p>

<h1>lists all files and folders under target/ folder</h1>

<p>Dir.glob('target/<strong>/</strong>').select do |f|
  if File.directory? f</p>

<pre><code># do something
</code></pre>

<p>  else</p>

<pre><code># do something
</code></pre>

<p>  end
end</p>

<h1>ONLY list all in target/ , doesn't list subfolders like target/subfolders/</h1>

<p>Dir.glob('target/**').select do |f|</p>

<p>end
```</p>

<!--more -->


<h3>Get folder name or file name from file path</h3>

<p><code>
f = "/abc/def/ghi.rb"
File.dirname(f) # /abc/def
File.basename(f) # ghi.rb
</code></p>

<h3>Read and parse file to json</h3>

<p><code>@data</code> will be JSON object
```
require 'json'</p>

<p>File.open("data.cfg", "r:UTF-8") { |f| @data = JSON.parse(f.read) }
```</p>

<h3>Write json to file</h3>

<p>Use <code>JSON.pretty_generate</code> to create well format json file.
```
require 'json'</p>

<p>File.open("data.cfg", "w") {|file| file.puts JSON.pretty_generate(@data)}
```</p>

<h3>Read a CSV file</h3>

<p><code>{ headers: true }</code> means first row is as header
```
require 'csv'</p>

<p>CSV.open("datacfg.csv", "r", { headers: true }) do |csv|
  matches = csv.find_all do |row|</p>

<pre><code>puts row.headers[0] # first column of header
puts row[0] # first column of each row
</code></pre>

<p>  end
end
```</p>

<h3>Create a http connection to download big file and calculate progress</h3>

<p>```
require 'net/http'</p>

<p>downloadLink = "http://abc/def/ghi.zip"
uri = URI.parse downloadLink
Net::HTTP.start(uri.host, uri.port) do |http|
  request = Net::HTTP::Get.new uri.request_uri
  request.basic_auth USERNAME, PASSWORD # if you need basic web auth</p>

<p>  http.request request do |response|</p>

<pre><code>download_size = 0
begin
  file = File.open("target.zip", 'wb')
  length = response.content_length
  response.read_body do |fragment|
    download_size += fragment.length
    file.write(fragment) 
    progress = '%.2f' % (download_size.to_f * 100 / length)
  end
ensure
  file.close
end
</code></pre>

<p>  end
end       <br/>
```</p>

<h3>XML handle by nokogiri</h3>

<p>```
require 'nokogiri'</p>

<p>doc = Nokogiri::XML(f) # create a xml doc from a file</p>

<p>nodes = doc.xpath('//bean[@id="getcha"]/*') # find nodes under bean with id 'getcha'
nodes.each do |node|
  node['value'] = "good" # set the attribute 'value' to 'good'
  node.content = "bad" # set the content to 'bad'
end</p>

<p>File.open(f, 'w') { |file| file.write(doc) } # write xml to file
```</p>

<h3>xpath with xml namespace</h3>

<p>For example, the <code>bean</code> is under namespace <code>http://www.springframework.org/schema/util</code>
```
nodes = doc.xpath('//util:bean[@id="getcha"]/*', {"util" => "http://www.springframework.org/schema/util"} )</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[String things in ruby]]></title>
    <link href="http://weichienhung.github.io/blog/2013/09/28/string-thing-in-ruby/"/>
    <updated>2013-09-28T22:21:00+08:00</updated>
    <id>http://weichienhung.github.io/blog/2013/09/28/string-thing-in-ruby</id>
    <content type="html"><![CDATA[<p>String alternatives in ruby</p>

<h3>%Q</h3>

<p>Alternative for double-quoted strings. Below are equivalent
<code>ruby
name_of_object = "John"
puts %Q(Hello World #{name_of_object})
puts "Hello World John"
</code>
You could replace <code>(</code> and <code>)</code> with non-alphanumeric characters.
<code>
puts %Q!Hello World!
puts %Q[Hello World]
puts %Q+Hello World+
puts %/Hello World/ # you can use also.
</code></p>

<!-- more -->


<h3>%q</h3>

<p>Alternative for single-quoted strings. But it can't do expression substitution
<code>ruby
puts %q(Hello World #{name_of_object}) # output: Hello World #{name_of_object}
</code></p>

<h3>%W</h3>

<p>Used for double-quoted array.
<code>
world = "World"
%W(Hello #{world} John\ Smile) # output: ["Hello", "World", "John Smile"]
</code></p>

<h3>%w</h3>

<p>Used for single-quoted array. No expression substitution
<code>
%w(Hello #{world} Good) # output: ["Hello", "#{world}", "Good"]
</code></p>

<h3>%s</h3>

<p>Used for symbols. No expression substitution.
<code>
%s(foo) # output: :foo
%s(foo bar) # output: :"foo bar"
</code></p>
]]></content>
  </entry>
  
</feed>
