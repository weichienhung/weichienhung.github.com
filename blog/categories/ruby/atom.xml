<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Weichien's studying note]]></title>
  <link href="http://weichienhung.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://weichienhung.github.io/"/>
  <updated>2013-11-30T23:44:28+08:00</updated>
  <id>http://weichienhung.github.io/</id>
  <author>
    <name><![CDATA[Weichien Hung]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[String things in ruby]]></title>
    <link href="http://weichienhung.github.io/blog/2013/09/28/string-thing-in-ruby/"/>
    <updated>2013-09-28T22:21:00+08:00</updated>
    <id>http://weichienhung.github.io/blog/2013/09/28/string-thing-in-ruby</id>
    <content type="html"><![CDATA[<p>String alternatives in ruby</p>

<h3>%Q</h3>

<p>Alternative for double-quoted strings. Below are equivalent
<code>ruby
name_of_object = "John"
puts %Q(Hello World #{name_of_object})
puts "Hello World John"
</code>
You could replace <code>(</code> and <code>)</code> with non-alphanumeric characters.
<code>
puts %Q!Hello World!
puts %Q[Hello World]
puts %Q+Hello World+
puts %/Hello World/ # you can use also.
</code></p>

<!-- more -->


<h3>%q</h3>

<p>Alternative for single-quoted strings. But it can't do expression substitution
<code>ruby
puts %q(Hello World #{name_of_object}) # output: Hello World #{name_of_object}
</code></p>

<h3>%W</h3>

<p>Used for double-quoted array.
<code>
world = "World"
%W(Hello #{world} John\ Smile) # output: ["Hello", "World", "John Smile"]
</code></p>

<h3>%w</h3>

<p>Used for single-quoted array. No expression substitution
<code>
%w(Hello #{world} Good) # output: ["Hello", "#{world}", "Good"]
</code></p>

<h3>%s</h3>

<p>Used for symbols. No expression substitution.
<code>
%s(foo) # output: :foo
%s(foo bar) # output: :"foo bar"
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rails practice]]></title>
    <link href="http://weichienhung.github.io/blog/2013/08/11/rails-practice/"/>
    <updated>2013-08-11T12:36:00+08:00</updated>
    <id>http://weichienhung.github.io/blog/2013/08/11/rails-practice</id>
    <content type="html"><![CDATA[<p>I push my first rails project <a href="https://github.com/weichienhung/bookmarks-rails">bookmarks-rails</a> to github today. It's a very small project for practicing rails framework.
The web provide user a very simple interface to create a bookmark and basic authentication. I take free time after work to finish this project.
Thanks to ihower's <a href="http://ihower.tw/rails3/index.html">Ruby on Rails實戰聖經</a>,Yangtheman's <a href="http://blog.yangtheman.com/2012/02/09/facebook-connect-with-rails-omniauth-devise/">post</a> and <a href="https://www.codeschool.com/">Code school</a>, it helps me a lot.<br/>
I try skills in this projects<br/>
1. Twitter Bootstrap 3.0.0.rc1<br/>
2. devise account system<br/>
3. omniauth with facebook login<br/>
4. rails REST<br/>
5. RSpec<br/>
6. Capybara</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby is elegance]]></title>
    <link href="http://weichienhung.github.io/blog/2013/03/02/ruby-is-deligight/"/>
    <updated>2013-03-02T14:08:00+08:00</updated>
    <id>http://weichienhung.github.io/blog/2013/03/02/ruby-is-deligight</id>
    <content type="html"><![CDATA[<p>今天持續Ruby study,紀錄一下學習到的東西</p>

<h3>Yield</h3>

<p>讓自定義的method可以接受block, 在yield之後的code會等block內容跑完才接著跑
``` ruby
def block_test
  puts "We're in the method!"
  puts "Yielding to the block..."
  yield
  puts "We're back in the method!"
end</p>

<p>block_test { puts ">>> We're in the block!" }</p>

<h1>you can pass parameter too</h1>

<p>def yield_name(name)
  puts "In the method! Let's yield."
  yield name
  puts "Block complete! Back in the method."
end</p>

<p>yield_name("samuel") { |a| puts "My name is #{a}."}
```
The output is</p>

<pre><code>We're in the method!
Yielding to the block...
&gt;&gt;&gt; We're in the block!
We're back in the method!

In the method! Let's yield.
My name is samuel.
Block complete! Back in the method.
</code></pre>

<!--more-->


<h3>Why Proc?</h3>

<p>block can't be saved to a variable and not a regular object. Proc keep your code reusable. With blocks you have to write your code out each time you need it.
With proc, you write your code once. Proc is savable block.
```
floats = [1.2, 3.45, 0.91, 7.727, 11.42, 482.911]
round_down = Proc.new { |x| x.floor }</p>

<h1>&amp; is used to convert round_down proc to block</h1>

<p>ints = floats.collect(&amp;round_down)  # [1, 3, 0, 7, 11, 482]</p>

<h1>you can call proc directly</h1>

<p>round_down.call(10.45) # 10</p>

<h1>convert Symbol to Proc by &amp;</h1>

<p>puts floats.map(&amp;:to_s)
```</p>

<h3>Lambdas</h3>

<p>lambdas are objects and identical to procs
<code>
strings = ["leonardo", "donatello", "raphael", "michaelangelo"]
symbolize = lambda { |x| x.to_sym }
symbols = strings.collect(&amp;symbolize) # [:leonardo, :donatello, :raphael, :michaelangelo]
</code></p>

<h4>Differences between Procs and Lambdas</h4>

<ol>
<li>Lambdas checks the number of arguments passed to it. Procs ignore it.</li>
<li>When Lambdas returns, it passes control back to calling method. Procs doesn't
```
def batman_ironman_proc
victor = Proc.new { return "Batman will win!" }
victor.call
"Iron Man will win!"
end</li>
</ol>


<p>puts batman_ironman_proc  # Batman will win!</p>

<p>def batman_ironman_lambda
  victor = lambda { return "Batman will win!" }
  victor.call
  "Iron Man will win!"
end</p>

<p>puts batman_ironman_lambda  # Iron Man will win!
```</p>

<h3>Class</h3>

<p>Object-Oriented language always has class.  def initialize就相當於constructor
```
class Person</p>

<pre><code>def initialize(name)
    @name = name
end
</code></pre>

<p>end
matz = Person.new("Yukihiro")
```</p>

<h4>global ($), instance (@), class (@@) variable</h4>

<p>```
class Person</p>

<pre><code>$type = "human"
@@other = "other info"
def initialize(name)
    @name = name
end
def getMe
    @name
end
def self.getOther
    @@other
end
</code></pre>

<p>end</p>

<p>man = Person.new("samuel")
puts $type  # human
puts man.getMe  # samuel
puts Person.getOther  # other info
```</p>

<h3>Inheritance</h3>

<p>Like Java, Ruby only allow one parent class
```
class Parent</p>

<pre><code>def isMankind?
    true
end
</code></pre>

<p>end
class Child &lt; Parent
end</p>

<p>child = Child.new
child.isMankind  # true
```</p>

<h3>Public and Private method</h3>

<p>It's very simple, put method declaration under public or private
```
class MyClass</p>

<pre><code>public
def iampublic
end

private
def iamprivate
end
</code></pre>

<p>end</p>

<p>```</p>

<h3>Method getter and setter</h3>

<p>Incredible simple. attr_accessor means both writer and reader
```
class Person
attr_reader :name
attr_writer :job
attr_accessor :age
  def initialize(name, job, age)</p>

<pre><code>@name = name
@job = job
@age = age
</code></pre>

<p>  end
end</p>

<p>person = Person.new("samuel","engineer",30)
person.name
person.age
```</p>

<h3>Module</h3>

<p>module is like class but it can't create instance and submodule
```
module MyModule</p>

<pre><code>#constant variable
NAME = "samuel"

#class method
def self.showFull
    puts NAME + " hung"
end
</code></pre>

<p>end</p>

<h1>user :: to access variable</h1>

<p>puts MyModule::NAME  # samuel
MyModule.showFull # samuel hung</p>

<h1>you can use include to get module scope</h1>

<p>include MyModule
puts NAME # samuel
showFull  # this line will cause error, you can't do this on method even you change the scope.</p>

<h1>load other module to use</h1>

<p>require 'date'
puts Date.today
```</p>

<h3>Module and Class</h3>

<p>Easily put module in class
```
module MyModule</p>

<pre><code>def showFull
    puts "samuel hung"
end
</code></pre>

<p>end</p>

<p>class Person</p>

<pre><code>include MyModule
</code></pre>

<p>end
man = Person.new
man.showFull
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby study]]></title>
    <link href="http://weichienhung.github.io/blog/2013/03/01/ruby-study/"/>
    <updated>2013-03-01T23:39:00+08:00</updated>
    <id>http://weichienhung.github.io/blog/2013/03/01/ruby-study</id>
    <content type="html"><![CDATA[<p>最近都在看CSS沒什麼時間繼續看Ruby,今天上codecademy練習ruby。
在這裡紀錄一下之前沒看過的語法。</p>

<h3>Multiple comments</h3>

<p><code>ruby
=begin
this is comment,
i am comment too.
=end
</code></p>

<h3>Get input from console</h3>

<p><code>
print "Integer please: "
user_num = Integer(gets.chomp)
</code></p>

<!--more-->


<h3>Different between string.downcase and string.downcase!</h3>

<p>With ! the user's string is modified in-place; otherwise, Ruby will create a copy of user_input and modify that instead
<code>
name = "Samuel"
downcase_name = name.downcase
puts name  # "Samuel"
downcase_name = name.downcase!
puts name  # "samuel"
</code></p>

<h3>Hash sort_by and Array sort!</h3>

<p>```
h = Hash.new(0)
h.sort_by { |a,b| b }  # we can sort by value</p>

<p>my_array = [3, 4, 8, 7, 1, 6, 5, 9, 2]
my_array.sort! # [1, 2, 3, 4, 5, 6, 7, 8, 9]</p>

<h1>descending order</h1>

<p>my_array.sort! { |a,b| b &lt;=> a} # [9, 8, 7, 6, 5, 4, 3, 2, 1]
```</p>

<h3>What's Symbol? it's not a string</h3>

<p>```
"string" == :string # false</p>

<p>"string".object_id == "string".object_id  # false</p>

<p>:symbol.object_id == :symbol.object_id # true</p>

<p>"string".to_sym == :string # true
"string".intern == :string # true, inter is the same as to_sym
```
Why need symbol? 主要是用來當hash的key以及用來參考到method的名字</p>

<ol>
<li>They're immutable, meaning they can't be changed once they're created</li>
<li>Only one copy,節省記憶體</li>
<li>Hashes that use symbols instead of strings as keys work faster</li>
</ol>


<p>來看一下怎麼使用
```
movies = {</p>

<pre><code>:name =&gt; "star_war",
:age =&gt; "1970"
</code></pre>

<p>}</p>

<h1>But since ruby 1.9 hash become more compact</h1>

<p>movies = {</p>

<pre><code>name: "star_war",
age: "1970"
</code></pre>

<p>}
```</p>

<h3>switch conidition</h3>

<p>```
case language
when "JS"
  puts "Websites!"
when "Python"
  puts "Science!"
when "Ruby"
  puts "Web apps!"
else
  puts "I don't know!"
end</p>

<p>case language
  when "JS" then puts "Websites!"
  when "Python" then puts "Science!"
  when "Ruby" then puts "Web apps!"
  else puts "I don't know!"
end
```</p>

<h3>Ternary conditional expression</h3>

<p><code>
puts 3 &lt; 4 ? "hello world"  : "evil"  # hello world
</code></p>

<h3>Conditional assignment.</h3>

<p>```
favorite_book = nil
puts favorite_book  # won't output anything</p>

<p>favorite_book ||= "Cat's Cradle"
puts favorite_book  # Cat's Cradle
```</p>

<h3>upto and downto</h3>

<p>```
95.upto(100) { |num| print num } # 95 96 97 98 99 100</p>

<h1>also apply to alphabet</h1>

<p>"L".upto("P") { |word| print word }
```</p>

<h3>Call and Response</h3>

<p>Here we use symbol to reference a method name. For example, we want to check variable has next method or not.
<code>
age = 30
age.respond_to?(:next) # true
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby beginning]]></title>
    <link href="http://weichienhung.github.io/blog/2013/02/21/ruby-beginning/"/>
    <updated>2013-02-21T22:31:00+08:00</updated>
    <id>http://weichienhung.github.io/blog/2013/02/21/ruby-beginning</id>
    <content type="html"><![CDATA[<p>前幾天開始看Ruby起因是網路上很多分享的project都是Rails,為了能夠加速了解理面的內容就來學一下Rails,
不過為了Rails必須要先打好Ruby的基礎。在這裡紀錄下學習過的語法避免自己忘光,光是昨天沒看語法我已經忘了不少XD。</p>

<!--more-->


<p>Everything is object,在Ruby裡每一個東西都是物件,像直接對1這個object呼叫next兩次就會得到3
<code>ruby
1.next.next
</code>
呼叫methods得到一個array包含所有的methods
<code>
1.methods
</code>
Ruby裡蠻特殊的是會回傳布林值的method傳參數是用'?',其它的用'()'或空格
<code>
2.between?1,3  /* true */
"I am a Rubyist".index('R')
"I am a Rubyist".index 'R'
</code></p>

<h2>String operations</h2>

<h4>search</h4>

<p><code>
"[Luke:] I can’t believe it. [Yoda:] That is why you fail.".include?'Yoda'
"Ruby is a beautiful language".start_with?'Ruby'
"I can't work with any other language but Ruby".end_with?'Ruby'
</code></p>

<h4>在字串裡可以輕易地使用#{}把值傳進去,puts就是console output</h4>

<p><code>
a = 1
b = 1
puts "The number #{a} is less than #{b}"
</code></p>

<h4>case change</h4>

<p><code>
'This is Mixed CASE'.downcase
'This is Mixed CASE'.upcase
'This is Mixed CASE'.swapcase
</code></p>

<h4>split</h4>

<p><code>
'Fear is the path to the dark side'.split(' ')
</code></p>

<h4>concatenat</h4>

<p><code>
'Ruby'+'Monk'
'Ruby' &lt;&lt; 'Monk'
</code></p>

<h4>replacing</h4>

<p><code>
"I should look into your problem when I get time".sub('I','We') /* only replace first found */
"I should look into your problem when I get time".gsub('I','We') /* replace all */
'RubyMonk'.gsub(/[aeiou]/,'1')  /* use RegEX, it must wrap it with / / */
</code></p>

<h2>Boolean operations</h2>

<h4>Like Java, use ==,&amp;&amp;,||,>=,&lt;=</h4>

<p><code>
name = "Bob"
name == "Bob" /* true */
</code></p>

<h2>Conditional</h2>

<h4>if..else</h4>

<p>```
def check_sign(number)
  if number > 0</p>

<pre><code>"#{number} is positive"
</code></pre>

<p>  elsif number &lt; 25</p>

<pre><code>"#{number} is smaller than 25"
</code></pre>

<p>  else</p>

<pre><code>"#{number} is negative"
</code></pre>

<p>  end      <br/>
end
```</p>

<h2>Loop</h2>

<h4>remember to use 'break' to break loop</h4>

<p><code>
loop do
  monk.meditate
  break if monk.nirvana?
end
</code></p>

<h4>run N times</h4>

<p>```
n.times do</p>

<pre><code>puts "Hello"
</code></pre>

<p>end
```</p>

<h2>Arrays</h2>

<h4>access array</h4>

<p><code>
[1, 2, 3, 4, 5][2] /* answer is 3 */
[1, 2, 3, 4, 5][-1] /* answer is 5 */
</code></p>

<h4>add array, you could put different type object in Ruby Array</h4>

<p><code>
[1,2,3,4,5] &lt;&lt; '6'
[1,2,3,4,5].push('6')
</code></p>

<h4>delete</h4>

<p><code>
[1,2,3,4,5].delete 3 /* [1,2,4,5] */
[1,2,3,4,5,6,7].delete_if{ |i| i &lt; 4 }
</code></p>

<h4>filter elements of array</h4>

<p>Ruby會有許多如底下的寫法, number代表存在於array裡面的object, 如果大於3會被挑出來
<code>
[1,2,3,4,5].select{ |number| number &gt; 3}
</code></p>

<h4>array iteration</h4>

<p>```
array = [1, 2, 3, 4, 5]
for i in array
  puts i
end</p>

<p>array = [1, 2, 3, 4, 5]
array.each do |i|
  puts i
end
```</p>

<h2>Hashs</h2>

<h4>create a hash</h4>

<p><code>
restaurant_menu = {
  'Ramen' =&gt; 3,
  'Dal Makhani' =&gt; 4,
  'Tea' =&gt;2
  }
</code></p>

<h4>fetch and modify value, like Array access</h4>

<p>```
restaurant_menu['Ramen'] /<em> 3 </em>/
restaurant_menu['Dal Makhani']=4.5</p>

<p>restaurant_menu.delete('Tea') /<em> delete it </em>/
```</p>

<h4>hash iteration</h4>

<p>```
restaurant_menu = { 'Ramen' => 3, 'Dal Makhani' => 4, 'Coffee' => 2 }
restaurant_menu.each do |item, price|
  restaurant_menu[item] = price + (price * 0.1)
end</p>

<p>restaurant_menu.each_key do |item|
  puts item
end</p>

<p>restaurant_menu.each_value do |price|
  puts price
end</p>

<p>```
Class和def Function就留到下次再來寫。在Ruby Function中Method叫做Behaviour,Variable叫做State。</p>
]]></content>
  </entry>
  
</feed>
