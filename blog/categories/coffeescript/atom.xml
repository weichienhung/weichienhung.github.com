<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: coffeescript | Practice makes perfect]]></title>
  <link href="http://weichienhung.github.io/blog/categories/coffeescript/atom.xml" rel="self"/>
  <link href="http://weichienhung.github.io/"/>
  <updated>2014-03-17T23:03:14+08:00</updated>
  <id>http://weichienhung.github.io/</id>
  <author>
    <name><![CDATA[Weichien Hung]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[design pattern in javascript]]></title>
    <link href="http://weichienhung.github.io/blog/2013/10/19/design-pattern-in-javascript/"/>
    <updated>2013-10-19T14:50:00+08:00</updated>
    <id>http://weichienhung.github.io/blog/2013/10/19/design-pattern-in-javascript</id>
    <content type="html"><![CDATA[<p>I read the <a href="http://addyosmani.com/resources/essentialjsdesignpatterns/book/">javascript design pattern</a> from Addy Osmani.
There're code examples in the book and i try to re-write it by coffeescript.
It helps me understand pattern more and clear. During writing i found a good coffeescript <a href="http://coffeescriptcookbook.com">cookbook</a> and very helpful.
I put the final result to <a href="https://gist.github.com/weichienhung/7055412">gist</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Coffee script memo]]></title>
    <link href="http://weichienhung.github.io/blog/2013/09/01/coffee-script-memo/"/>
    <updated>2013-09-01T16:35:00+08:00</updated>
    <id>http://weichienhung.github.io/blog/2013/09/01/coffee-script-memo</id>
    <content type="html"><![CDATA[<p>From last week i tried the Ember-Rails and studied the coffee script btw. Because more and more people use coffee script and i want to understand their codes!
In the beginning the coffee script syntax confuses me a lot and cost a lot of time to google it.
I decide to keep it on post for reference in the future.</p>

<!--more-->


<p>The indent is the most important to coffeescript. Wrong indent cause compile fail.
For example: define a method to call ajax. You can insert variable into string using <code>"#{}"</code>. <code>@successHandle</code> is the same as <code>this.successHandle</code>.
``` coffeescript
getData: ->
  $.ajax '/api/post/',</p>

<pre><code>type: 'GET'
dataType: 'json'
success: (data, textStatus, jqXHR) -&gt;
  @successHandle data

successHandle: (data) -&gt;
  console.log "success #{data}"
</code></pre>

<p><code>
Pass a string and function. For example: listen a click event
</code>
button.addListener 'click',() ->
  console.log 'btn click'
<code>
All variable definition will be scoped in function. If you want to def a variable in each loop, you should use `do () -&gt;`
</code>
check = () ->
  for person in people</p>

<pre><code>post = new Post()
person.setPost post
</code></pre>

<h1>every person has the same post reference</h1>

<p>check = () ->
  for person in people</p>

<pre><code>do (person) -&gt;
  post = new Post()
  person.setPost post
</code></pre>

<h1>every person has his post</h1>

<p>```</p>

<h3>iterate a hash object</h3>

<p>```
hashobject =
  name: 'ben'
  address: 'xxxxx'</p>

<p>for key, value of hashobject
  console.log key
  console.log value
```</p>

<h3>timeout syntax</h3>

<p><code>
setTimeout (-&gt;
  console.log "hello world"
), 100
</code></p>

<h3>loop a array from middle</h3>

<p>Usually we use below to iter a array
<code>coffeescript
myarray = [1..5]
for element in myarray
  console.log element # output 1~5
</code>
Can strat from index 2, index is from 0. Means from third element
<code>
for index in [2...myarray.length]
  console.log myarray[index] # output 3~5
</code></p>

<h3>ternary opeartor</h3>

<p>```
console.log if 10>5 ? "hi" : "bye" # Compile ERROR</p>

<p>console.log if 10>5 then "hi" else "bye" # output hi
```</p>

<h3>set value using ?=</h3>

<p>If you use <code>?=</code> you have to declare 'instance = null' first.
```
instance = null # without this, Compile ERROR
instance ?= "abc"
console.log instance # output abc</p>

<h1>the old way.</h1>

<p>instance2 = instance2 || "abc"
console.log instance2 # output abc
```</p>

<h3>regular expression</h3>

<p>Put regular exprssion in <code>/// ///</code> block
```
summaries_pattern = ///
  summaries.*
///</p>

<p>msg = "the final summaries is good"
if msg.match summaries_pattern
  console.log 'good job'
```</p>
]]></content>
  </entry>
  
</feed>
