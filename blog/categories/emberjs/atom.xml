<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: emberjs | Weichien's studying note]]></title>
  <link href="http://weichienhung.github.io/blog/categories/emberjs/atom.xml" rel="self"/>
  <link href="http://weichienhung.github.io/"/>
  <updated>2013-09-29T15:34:04+08:00</updated>
  <id>http://weichienhung.github.io/</id>
  <author>
    <name><![CDATA[Weichien Hung]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Async in Emberjs]]></title>
    <link href="http://weichienhung.github.io/blog/2013/09/22/async-in-emberjs/"/>
    <updated>2013-09-22T17:40:00+08:00</updated>
    <id>http://weichienhung.github.io/blog/2013/09/22/async-in-emberjs</id>
    <content type="html"><![CDATA[<h2>Async Routing</h2>

<p>Reference to <a href="http://emberjs.com/guides/routing/asynchronous-routing/">ember guide</a>.<br/>
If you want to make sure model is ready before entering the target route. You could use async routing. How?<br/>
Make your model as Promise object in route's model function.
For example: In year route i return a model that comes from <code>ModelMgr.listMonth(params.year_id)</code>.
Because model is Promise object, i add a <code>then</code> method to set id attribute to model(resolve will be model here)
``` coffeescript YearRoute
model: (params) ->
  model = ModelMgr.listMonth(params.year_id)</p>

<pre><code>model.then (resolve, reject)-&gt;
  resolve.set 'id', params.year_id
</code></pre>

<p>  return model
<code>
In `ModelMgr.listMonth` method, use `Ember.RSVP.Promise` to wrap your function. Because i don't return anything in the last line of function.
CoffeeScript will return the promise object automatically. `months` will be the real model object.
</code> coffeescript ModelMgr
listMonth: (year) ->
  months = Ember.ArrayProxy.create({content:[]})
  new Ember.RSVP.Promise (resolve) -></p>

<pre><code>$.ajax '/api/list',
type: 'GET'
dataType: 'json'
data: 'y='+year
success: (data, textStatus, jqXHR) -&gt;
  for raw in data
    months.addObject raw
  months.set 'isReady', true
  resolve(months)
</code></pre>

<p>```</p>

<h2>Wait multiple function call ready</h2>

<p>Sometimes you will use 3rd party library and it requires element existed in the DOM tree.
For example: I use highchartJS to draw diagram.<br/>
In the route it queries two models to finish the whole scenarios.
<code>model</code> is the result from <code>ModelMgr.listMonth</code> and <code>modelForTrend</code> is the result from <code>ModelMgr.queryTrend</code>.
The models all have attributes called <code>isReady</code> with false default. After <code>ModelMgr</code> get the data, it will set to true.
``` coffeescript SummaryRoute
  model: (params)-></p>

<pre><code>model = ModelMgr.listMonth(params.year_id)
model.year = params.year_id #For queryTrend needs year as parameter
return model
</code></pre>

<p>  setupController: (controller, model)-></p>

<pre><code>modelForTrend = ModelMgr.queryTrend(model.year)
controller.set 'model', model
controller.set 'modelForTrend', modelForTrend
</code></pre>

<p><code>
We have two attribute bindings to model's attributes in controller.
</code> coffeescript SummaryController
SummaryController = Ember.ObjectController.extend
  dataReadyBinding: 'model.isReady'
  trendDataReadyBinding: 'modelForTrend.isReady'
```</p>

<p>Create a method to observe all attributes we care about. View shouldn't connect to Model directly.
So i make <code>drawLineChart</code> method to observe controller's attribute.
``` coffeescript SummaryView
SummaryView = Ember.View.extend
  elementReady: false
  drawLineChart: ( -></p>

<pre><code>if @get('controller.dataReady') and @get('controller.trendDataReady') and @get('elementReady')
  content = @get 'controller.model.content' # content is ready
  contentForTrend = @get 'controller.modelForTrend.content' # contentForTrend is ready
  $('#myTrend').highcharts( ... ) # element is ready.
  # do something here...
</code></pre>

<p>  ).observes('controller.dataReady', 'elementReady', 'controller.trendDataReady')
  didInsertElement: -></p>

<pre><code>@set 'elementReady', true
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use HighchartJS to visual data]]></title>
    <link href="http://weichienhung.github.io/blog/2013/09/22/use-highchartjs-to-visual/"/>
    <updated>2013-09-22T17:16:00+08:00</updated>
    <id>http://weichienhung.github.io/blog/2013/09/22/use-highchartjs-to-visual</id>
    <content type="html"><![CDATA[<p>I just push a new project to <a href="https://github.com/weichienhung/money">github</a> and <a href="http://weichien-money.herokuapp.com/">heroku</a>.
This project is derived from my iOS App <a href="https://itunes.apple.com/tw/app/monny/id590327036?mt=8">Monny</a>.
The App I used it to record my daily expense. The free version doesn't have visual graph to show summary data.
So i use EmberJS,HighchartJS and Rails to build this simple web app. I always learned new knowledge during coding.</p>

<p>I take few snaphots of this probject.</p>

<!-- more -->


<h3>List every record</h3>

<p><img src="/images/0922-list.png" width="500" height="500" title="list-image" alt="list"></p>

<h3>Category summary</h3>

<p><img src="/images/0922-summary.png" width="500" height="500" title="summary-image" alt="summary"></p>

<h3>Year trend</h3>

<p><img src="/images/0922-trend.png" width="500" height="500" title="trend-image" alt="trend"></p>

<p>I won't describe studying notes here but write them in other posts.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First ember_rails project]]></title>
    <link href="http://weichienhung.github.io/blog/2013/09/03/first-ember-rails-project/"/>
    <updated>2013-09-03T23:57:00+08:00</updated>
    <id>http://weichienhung.github.io/blog/2013/09/03/first-ember-rails-project</id>
    <content type="html"><![CDATA[<p>Last time i said i want to make an ember-rails project(<a href="http://127.0.0.1:4000/blog/2013/08/25/rails-and-ember-study/">post</a>).
Today I push my first Ember-Rails(food-ntpc) project to <a href="https://github.com/weichienhung/food-ntpc">github</a> and <a href="http://food-ntpc.herokuapp.com/">heroku</a>.
It takes me more time to finish it because i am not familiar with coffee script. I also create a new <a href="http://weichienhung.github.io/blog/2013/09/01/coffee-script-memo/">post</a> for coffee script memo.
During practicing i use Emberjs 1.0.0.rc7. But Emberjs 1.0.0 was released few days ago and i upgrade it to 1.0.0.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Multiple models in a view]]></title>
    <link href="http://weichienhung.github.io/blog/2013/09/01/multiple-model-in-a-view/"/>
    <updated>2013-09-01T20:29:00+08:00</updated>
    <id>http://weichienhung.github.io/blog/2013/09/01/multiple-model-in-a-view</id>
    <content type="html"><![CDATA[<p>How to use multiple models in a view?
Retrieve another data and set to controller in Route's setupController method.
``` coffeescript
model: ->
  return Place.places()</p>

<p>setupController: (controller, model) ->
  #model is the result of Place.places()
  controller.set 'content', model</p>

<p>  #another data
  categorys = Category.categorys()
  controller.set 'categorys', categorys
```
I create CategoryView and bind data to it in template</p>

<pre>
&#123;{#each category in categorys}}
  &#123;{#view CategoryView contentBinding="category"}}
    &#123;{category.name}}
  &#123;{/view}}
&#123;{/each}}

&#123;{#each place in content}}
  &#123;{place.name}}
&#123;{/each}}
</pre>


<p>CategoryView code:
I use classNameBinding to auto update class when status is changed.
```
CategoryView = Ember.View.extend
  classNameBindings: ['getClass']
  status: true</p>

<p>  getClass: ( -></p>

<pre><code>if this.get('status')
  return "btn-info"
else
  return "btn-default"
</code></pre>

<p>  ).property('status')
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rails and ember study]]></title>
    <link href="http://weichienhung.github.io/blog/2013/08/25/rails-and-ember-study/"/>
    <updated>2013-08-25T07:13:00+08:00</updated>
    <id>http://weichienhung.github.io/blog/2013/08/25/rails-and-ember-study</id>
    <content type="html"><![CDATA[<p>I pushed two project(<a href="https://github.com/weichienhung/rails101_groupme">rails101-groupme</a>,<a href="https://github.com/weichienhung/project101">project101</a>)to github yesterday.
I bought the ebook <a href="http://rails-101.logdown.com/">rails101</a> and make rails101-groupme project by follow instructions of book.
Besides i add some features into rails101-groupme.<br/>
1.Every user could reply the post<br/>
2.Rich text editor, CKeditor</p>

<p><a href="https://github.com/weichienhung/project101">project101</a> is the old project i practiced emberjs. It retrieves data from <a href="http://data.taipei.gov.tw/">open data Taipei</a> and show on table.
This project was made because inspired by yunglinho's <a href="http://blog.yunglinho.com/blog/2011/11/15/">post</a>. I study google map API and add into it recently.
Most of locations could be show on google map. Somes are not because can't be geocode to <a href="https://developers.google.com/maps/documentation/javascript/reference#LatLng">LatLng</a>.
There's a disadvantage here. Geocode needs to send requests to google but google will block it if you use API frequently. Implement it on clide side is not a good idea.
I am planing to have a new project that use Rails and Emberjs. I could add my json API and store LatLng in database to prevent too many requests to google.</p>
]]></content>
  </entry>
  
</feed>
