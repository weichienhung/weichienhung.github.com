<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Practice makes perfect]]></title>
  <link href="http://weichienhung.github.io/atom.xml" rel="self"/>
  <link href="http://weichienhung.github.io/"/>
  <updated>2014-05-04T10:28:44+08:00</updated>
  <id>http://weichienhung.github.io/</id>
  <author>
    <name><![CDATA[Weichien Hung]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dependency Injection in Emberjs]]></title>
    <link href="http://weichienhung.github.io/blog/2014/05/04/dependency-injection-in-emberjs/"/>
    <updated>2014-05-04T09:47:00+08:00</updated>
    <id>http://weichienhung.github.io/blog/2014/05/04/dependency-injection-in-emberjs</id>
    <content type="html"><![CDATA[<p>I read some articles about Emberjs Dependency Injection(DI) and try to upgrade my old project <a href="https://github.com/weichienhung/food-ntpc">food_ntpc</a>
to use DI. The pros of DI is to reduce gobal object and make code clean, testing easily.
There are few changes.</p>

<h3>before</h3>

<p>I create a <code>CategoryManager</code> and put in <code>FoodNtpc</code> App.</p>

<figure class='code'><figcaption><span>category.js.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">CategoryManager</span>
</span><span class='line'>  <span class="nv">categorys: </span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">categorys</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="nv">FoodNtpc.CategoryManager = </span><span class="k">new</span> <span class="nx">CategoryManager</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&#8217;s very easy to access through <code>FoodNtpc.CategoryManager</code> everywhere. BUT it makes testing hardly and more coupling.</p>

<figure class='code'><figcaption><span>index_route.js.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">FoodNtpc.IndexRoute = </span><span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span>
</span><span class='line'>  <span class="nv">model: </span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">FoodNtpc</span><span class="p">.</span><span class="nx">CategoryManager</span><span class="p">.</span><span class="nx">categorys</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h3>after</h3>

<p>Only the <em>Ember.Object</em> class can be registered. I change <code>class CategoryManager</code> to <code>CategoryManager = Ember.Object.extend</code>.
Then create an <code>initializer</code> to register the <code>CategoryManager</code> in <code>foodntpc:categoryManager</code> naming. Set singleton to true because i want only one CategoryManager in system.</p>

<figure class='code'><figcaption><span>category.js.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="c1">#class CategoryManager </span>
</span><span class='line'><span class="nv">CategoryManager = </span><span class="nx">Ember</span><span class="p">.</span><span class="nb">Object</span><span class="p">.</span><span class="nx">extend</span>
</span><span class='line'>  <span class="nv">categorys: </span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">categorys</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#FoodNtpc.CategoryManager = new CategoryManager</span>
</span><span class='line'><span class="nx">Ember</span><span class="p">.</span><span class="nx">Application</span><span class="p">.</span><span class="nx">initializer</span>
</span><span class='line'>  <span class="nv">name: </span><span class="s">&#39;categoryManager&#39;</span>
</span><span class='line'>  <span class="nv">initialize: </span><span class="nf">(container, application) -&gt;</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="s">&#39;register categoryManager&#39;</span>
</span><span class='line'>    <span class="nx">container</span><span class="p">.</span><span class="nx">register</span><span class="p">(</span><span class="s">&#39;foodntpc:categoryManager&#39;</span><span class="p">,</span> <span class="nx">CategoryManager</span><span class="p">,</span> <span class="p">{</span><span class="nv">singleton: </span><span class="kc">true</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, create another initializer to inject those dependency. We can use <code>after</code> or <code>before</code> to adjust initializer sequence.<br/>
In <code>application.js</code> line 6 means <code>foodntpc:categoryManager</code> is injected to IndexRoute and use <code>CategoryManager</code> reference.
In line 7 means inject into all controller.</p>

<figure class='code'><figcaption><span>application.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Ember</span><span class="p">.</span><span class="nx">Application</span><span class="p">.</span><span class="nx">initializer</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;injectModelManager&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">after</span><span class="o">:</span> <span class="s1">&#39;categoryManager&#39;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">container</span><span class="p">,</span> <span class="nx">application</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">application</span><span class="p">.</span><span class="nx">inject</span><span class="p">(</span><span class="s1">&#39;route:index&#39;</span><span class="p">,</span> <span class="s1">&#39;CategoryManager&#39;</span><span class="p">,</span> <span class="s1">&#39;foodntpc:categoryManager&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">application</span><span class="p">.</span><span class="nx">inject</span><span class="p">(</span><span class="s1">&#39;controller&#39;</span><span class="p">,</span> <span class="s1">&#39;CategoryManager&#39;</span><span class="p">,</span> <span class="s1">&#39;foodntpc:categoryManager&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>In IndexRoute, we use <code>this.CategoryManager</code> to access it.</p>

<figure class='code'><figcaption><span>index_route.js.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">FoodNtpc.IndexRoute = </span><span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span>
</span><span class='line'>  <span class="nv">model: </span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">@CategoryManager</span><span class="p">.</span><span class="nx">categorys</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Add testing to your gem]]></title>
    <link href="http://weichienhung.github.io/blog/2014/03/30/add-testing-to-your-gem/"/>
    <updated>2014-03-30T00:31:00+08:00</updated>
    <id>http://weichienhung.github.io/blog/2014/03/30/add-testing-to-your-gem</id>
    <content type="html"><![CDATA[<p>There&#8217;s the old <a href="http://weichienhung.github.io/blog/2013/09/28/rails-generator-in-gem/">post</a> about how to create a ruby gem.
This post is focus on how to add testing to gem.<br/>
First, add rspec into your gem dependency. I like to use rspec as my testing framework.
Here i also use webmock to mock my http request during spec testing.</p>

<figure class='code'><figcaption><span>your_gem.gemspec</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">Gem</span><span class="p">:</span><span class="ss">:Specification</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">spec</span><span class="o">|</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="n">spec</span><span class="o">.</span><span class="n">add_development_dependency</span> <span class="s1">&#39;rspec&#39;</span>
</span><span class='line'>  <span class="n">spec</span><span class="o">.</span><span class="n">add_development_dependency</span> <span class="s1">&#39;webmock&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Create a rake task to run rspec. I create <code>rspec.rake</code> under <code>{gem_root_folder}/tasks/</code>.
Set the default task to <code>:spec</code> then i can just type <code>rake</code> to run testing.
In the meantime i set <code>--color -f d</code> to output result with color and document format.</p>

<figure class='code'><figcaption><span>rspec.rake</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rspec/core/rake_task&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">desc</span> <span class="s1">&#39;Default: run specs.&#39;</span>
</span><span class='line'><span class="n">task</span> <span class="ss">:default</span> <span class="o">=&gt;</span> <span class="ss">:spec</span>
</span><span class='line'>
</span><span class='line'><span class="ss">RSpec</span><span class="p">:</span><span class="ss">:Core</span><span class="o">::</span><span class="no">RakeTask</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">task</span><span class="o">|</span>
</span><span class='line'>  <span class="n">task</span><span class="o">.</span><span class="n">rspec_opts</span> <span class="o">=</span> <span class="s1">&#39;--color -f d&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In order to exec our rspec.rake. Import all .rake file under tasks folder to Rakefile.</p>

<figure class='code'><figcaption><span>Rakefile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s2">&quot;bundler/gem_tasks&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="no">Dir</span><span class="o">.</span><span class="n">glob</span><span class="p">(</span><span class="s1">&#39;tasks/**/*.rake&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">each</span><span class="p">(</span><span class="o">&amp;</span><span class="nb">method</span><span class="p">(</span><span class="ss">:import</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we could start to write testing.<br/>
Create <code>{gem_root_folder}/spec/</code> folder and <code>spec_helper.rb</code> under it.</p>

<figure class='code'><figcaption><span>spec_helper.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># require webmock/rspec to use webmock in rspec testing framework</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;webmock/rspec&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># mvn_utils is the target class to be test</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;mvn_utils&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Create <code>mvn_utils_spec.rb</code> under <code>{gem_root_folder}/spec/</code> and require <code>spec_helper</code>.
We could require all targets in <code>spec_helper.rb</code> and each spec.rb file just require <code>spec_helper</code>.</p>

<figure class='code'><figcaption><span>mvn_utils_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>
</span><span class='line'><span class="n">describe</span> <span class="no">MvnUtils</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:mvn_base</span><span class="p">)</span> <span class="p">{</span> <span class="s2">&quot;mvn.example.net/service/local/repositories/&quot;</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:header_hash</span><span class="p">)</span> <span class="p">{</span> <span class="p">{</span><span class="s1">&#39;Accept&#39;</span><span class="o">=&gt;</span><span class="s1">&#39;*/*&#39;</span><span class="p">,</span> <span class="s1">&#39;Accept-Encoding&#39;</span><span class="o">=&gt;</span><span class="s1">&#39;gzip;q=1.0,deflate;q=0.6,identity;q=0.3&#39;</span><span class="p">,</span> <span class="s1">&#39;User-Agent&#39;</span><span class="o">=&gt;</span><span class="s1">&#39;Ruby&#39;</span><span class="p">}</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">describe</span> <span class="s1">&#39;should find the latest version&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">let</span><span class="p">(</span><span class="ss">:response_xml</span><span class="p">)</span> <span class="p">{</span> <span class="s2">&quot;&lt;metadata&gt;&lt;groupId&gt;a.b&lt;/groupId&gt;&lt;artifactId&gt;x.y&lt;/artifactId&gt;&lt;versioning&gt;&quot;</span> <span class="o">+</span>
</span><span class='line'>                         <span class="s2">&quot;&lt;release&gt;1.0.100&lt;/release&gt;&lt;versions&gt;&lt;version&gt;1.0.98&lt;/version&gt;&quot;</span> <span class="o">+</span>
</span><span class='line'>                         <span class="s2">&quot;&lt;version&gt;1.0.99&lt;/version&gt;&lt;/versions&gt;&lt;/versioning&gt;&lt;/metadata&gt;&quot;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;find_latest_version&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">stub_request</span><span class="p">(</span><span class="ss">:get</span><span class="p">,</span> <span class="s2">&quot;http://</span><span class="si">#{</span><span class="n">mvn_base</span><span class="si">}</span><span class="s2">a/b/x/y/maven-metadata.xml&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="o">.</span><span class="n">with</span><span class="p">(</span><span class="ss">:headers</span> <span class="o">=&gt;</span> <span class="n">header_hash</span><span class="p">)</span>
</span><span class='line'>      <span class="o">.</span><span class="n">to_return</span><span class="p">(</span><span class="ss">:status</span> <span class="o">=&gt;</span> <span class="mi">200</span><span class="p">,</span> <span class="ss">:body</span> <span class="o">=&gt;</span> <span class="n">response_xml</span><span class="p">,</span> <span class="ss">:headers</span> <span class="o">=&gt;</span> <span class="p">{})</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="no">MvnUtils</span><span class="o">.</span><span class="n">find_latest_version</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span><span class="p">(</span><span class="s1">&#39;1.0.100&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the above example, i test <code>MvnUtils.find_latest_version</code> and expect the value should be <code>1.0.100</code>.
This function will inovke http request to mvn server but i use stub request here to prevent real http connection.
With stub request i could control the returned xml data.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ES6 preview]]></title>
    <link href="http://weichienhung.github.io/blog/2014/03/12/es6-preview/"/>
    <updated>2014-03-12T22:23:00+08:00</updated>
    <id>http://weichienhung.github.io/blog/2014/03/12/es6-preview</id>
    <content type="html"><![CDATA[<p>這篇文章用來記錄ES6的一些新功能。參考Lukehoban的<a href="https://github.com/lukehoban/es6features">版本</a>並加以中文化。
基本上所有的example codes我都有在<a href="http://www.es6fiddle.net/">ES6 fiddle</a>或用<a href="https://github.com/google/traceur-compiler">Traceur</a>執行過。</p>

<p>ES6包含這些新的功能:<br/>
- <a href="#let--const">let + const</a><br/>
- <a href="#enhanced-object-literals">enhanced object literals</a><br/>
- <a href="#arrows">arrows</a><br/>
- <a href="#classes">classes</a><br/>
- <a href="#template-strings">template strings</a><br/>
- <a href="#destructuring">destructuring</a><br/>
- <a href="#default--rest--spread">default + rest + spread</a><br/>
- <a href="#iterators--forof">iterators + for..of</a><br/>
- <a href="#generators">generators</a><br/>
- <a href="#comprehensions">comprehensions</a><br/>
- <a href="#unicode">unicode</a><br/>
- <a href="#modules">modules</a><br/>
- <a href="#module-loaders">module loaders</a><br/>
- <a href="#map--set--weakmap--weakset">map + set + weakmap + weakset</a><br/>
- <a href="#proxies">proxies</a><br/>
- <a href="#symbols">symbols</a><br/>
- <a href="#promises">promises</a><br/>
- <a href="#math--number--string--object-apis">math + number + string + object APIs</a><br/>
- <a href="#binary-and-octal-literals">binary and octal literals</a><br/>
- <a href="#reflect-api">reflect api</a><br/>
- <a href="#tail-calls">tail calls</a></p>

<h2>ECMAScript 6 Features</h2>

<h3><a name=let--const></a> Let + Const</h3>

<p><code>let</code>可以想成是新的<code>var</code>，建立的變數只會存活在Block scope裡。
<code>const</code>是用來建立常數。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">x</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">a</span> <span class="o">=</span> <span class="nx">a</span> <span class="o">+</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">a</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">());</span> <span class="c1">//5</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span> <span class="c1">// undefined</span>
</span><span class='line'>
</span><span class='line'><span class="kd">let</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">44</span><span class="p">;</span>
</span><span class='line'><span class="kd">let</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">55</span><span class="p">;</span> <span class="c1">//應該要報錯，但目前模擬器實作都不會報錯</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">b</span> <span class="o">=</span> <span class="s2">&quot;hello&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nx">b</span> <span class="o">=</span> <span class="s2">&quot;abc&quot;</span><span class="p">;</span> <span class="c1">//應該要報錯，但目前模擬器實作都不會報錯</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a name=enhanced-object-literals></a> Enhanced Object Literals</h3>

<p>增強的物件描述(Object Literal)支援在建構子設定prototype。可直接在定義的函數內呼叫父類別方法(super call)。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="s2">&quot;i am foo&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">__proto__</span><span class="o">:</span> <span class="p">[],</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 定義方法</span>
</span><span class='line'>  <span class="nx">getLength</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 動態設定變數/方法名稱</span>
</span><span class='line'>  <span class="p">[</span> <span class="s1">&#39;prop_&#39;</span> <span class="o">+</span> <span class="p">(()</span> <span class="o">=&gt;</span> <span class="mi">42</span><span class="p">)()</span> <span class="p">]</span><span class="o">:</span> <span class="s2">&quot;Should be 42&quot;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//foo:foo 的縮寫</span>
</span><span class='line'>  <span class="nx">foo</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">obj</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s2">&quot;1&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">getLength</span><span class="p">());</span> <span class="c1">//1</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">prop_42</span><span class="p">);</span> <span class="c1">//&quot;Should be 42&quot;</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">foo</span><span class="p">);</span> <span class="c1">//&quot;i am foo&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a name=arrows></a> Arrows</h3>

<p>箭號&#8217;=>&#8217;是一種定義函數的縮寫方式。
同時支援函數表達式(function expression)跟函數聲明(function statement)。
但跟傳統函數有點不一樣的是在箭號定義函數裡面的this是跟呼叫它的程式碼擁有一樣的lexical scope。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">let</span> <span class="nx">square</span> <span class="o">=</span> <span class="nx">x</span> <span class="o">=&gt;</span> <span class="nx">x</span> <span class="o">*</span> <span class="nx">x</span><span class="p">;</span>
</span><span class='line'><span class="kd">let</span> <span class="nx">add</span> <span class="o">=</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
</span><span class='line'><span class="kd">let</span> <span class="nx">pi</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="mf">3.1415</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">square</span><span class="p">(</span><span class="mi">5</span><span class="p">));</span> <span class="c1">//25</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">add</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">));</span> <span class="c1">//7</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">pi</span><span class="p">());</span> <span class="c1">//3.1415</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Lexical this</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">bob</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">_name</span><span class="o">:</span> <span class="s2">&quot;Bob&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">_friends</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;Ken&#39;</span><span class="p">],</span>
</span><span class='line'>  <span class="nx">printFriends</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">_friends</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">f</span> <span class="o">=&gt;</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_name</span> <span class="o">+</span> <span class="s2">&quot; knows &quot;</span> <span class="o">+</span> <span class="nx">f</span><span class="p">)</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">bob</span><span class="p">.</span><span class="nx">printFriends</span><span class="p">();</span> <span class="c1">//Bob knows Ken</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a name=classes></a> Classes</h3>

<p>ES6類別提供一種簡單宣告方式讓class pattern更容易使用。
類別支援繼承(inheritance)，父類別呼叫(super calls)，建構子(constructor)，個體方法(instance method)和類別方法(class method)。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">class</span> <span class="nx">Polygon</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">constructor</span><span class="p">(</span><span class="nx">height</span><span class="p">,</span> <span class="nx">width</span><span class="p">)</span> <span class="p">{</span> <span class="c1">//class constructor</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="s1">&#39;Polygon&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">height</span> <span class="o">=</span> <span class="nx">height</span><span class="p">;</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">=</span> <span class="nx">width</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kr">static</span> <span class="nx">doIt</span><span class="p">()</span> <span class="p">{</span>  <span class="c1">//class method</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Do it now&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">class</span> <span class="nx">Square</span> <span class="kr">extends</span> <span class="nx">Polygon</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">constructor</span><span class="p">(</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">super</span><span class="p">(</span><span class="nx">length</span><span class="p">,</span> <span class="nx">length</span><span class="p">);</span> <span class="c1">//call the parent method with super</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="s1">&#39;Square&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">get</span> <span class="nx">area</span><span class="p">()</span> <span class="p">{</span> <span class="c1">//calculated attribute getter</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">height</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">let</span> <span class="nx">s</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Square</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">area</span><span class="p">);</span> <span class="c1">//25</span>
</span><span class='line'><span class="nx">Square</span><span class="p">.</span><span class="nx">doIt</span><span class="p">();</span> <span class="c1">//&quot;Do it now&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a name=template-strings></a> Template Strings</h3>

<p>Template String提供許多方便方法建立字串。
還可以使用函式來預先處理Template String。被稱為Tagged Template String。可以避免被塞入非預期中的字串。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">myString</span> <span class="o">=</span> <span class="err">`</span><span class="nx">In</span> <span class="nx">JavaScript</span> <span class="s1">&#39;\n&#39;</span> <span class="nx">is</span> <span class="nx">a</span> <span class="nx">line</span><span class="o">-</span><span class="nx">feed</span><span class="p">.</span><span class="err">`</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Multiline strings</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">myString2</span> <span class="o">=</span> <span class="err">`</span><span class="nx">In</span> <span class="nx">JavaScript</span> <span class="k">this</span> <span class="nx">is</span>
</span><span class='line'> <span class="nx">not</span> <span class="nx">legal</span><span class="p">.</span><span class="err">`</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="s2">&quot;Bob&quot;</span><span class="p">,</span> <span class="nx">time</span> <span class="o">=</span> <span class="s2">&quot;today&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">myString3</span> <span class="o">=</span> <span class="err">`</span><span class="nx">Hello</span> <span class="nx">$</span><span class="p">{</span><span class="nx">name</span><span class="p">},</span> <span class="nx">how</span> <span class="nx">are</span> <span class="nx">you</span> <span class="nx">$</span><span class="p">{</span><span class="nx">time</span><span class="p">}</span><span class="o">?</span><span class="err">`</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myString</span><span class="p">);</span> <span class="c1">//&quot;In JavaScript &#39; &#39; is a line-feed.&quot;</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myString2</span><span class="p">);</span> <span class="c1">//&quot;In JavaScript this is not legal.&quot;</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myString3</span><span class="p">);</span> <span class="c1">//&quot;Hello Bob, how are you today?&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">tag</span><span class="p">(</span><span class="nx">strings</span><span class="p">,</span> <span class="p">...</span><span class="nx">values</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">strings</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">===</span> <span class="s1">&#39;a&#39;</span> <span class="o">&amp;&amp;</span> <span class="nx">strings</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">===</span> <span class="s1">&#39;b&#39;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s1">&#39;bad&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="s1">&#39;good&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">tag</span> <span class="err">`</span><span class="nx">a$</span><span class="p">{</span> <span class="mi">123</span> <span class="p">}</span><span class="nx">b</span><span class="err">`</span><span class="p">);</span>  <span class="c1">// &quot;good&quot;</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">tag</span> <span class="err">`</span><span class="nx">c$</span><span class="p">{</span> <span class="mi">123</span> <span class="p">}</span><span class="nx">d</span><span class="err">`</span><span class="p">);</span>  <span class="c1">// &quot;bad&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a name=destructuring></a> Destructuring</h3>

<p>Destructuring assignment允許使用陣列或物件pattern來自動給予值。
Destructuring是錯誤安全(fail-soft)的。當配對不上時會給予undefined。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">let</span> <span class="p">[</span><span class="nx">one</span><span class="p">,</span> <span class="nx">two</span><span class="p">,</span> <span class="nx">three</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="p">,</span><span class="mi">3</span><span class="p">];</span>
</span><span class='line'><span class="kd">let</span> <span class="p">{</span><span class="nx">four</span><span class="p">,</span> <span class="nx">five</span><span class="p">}</span> <span class="o">=</span> <span class="p">{</span><span class="nx">four</span><span class="o">:</span><span class="mi">4</span><span class="p">,</span> <span class="nx">five</span><span class="o">:</span>  <span class="mi">5</span><span class="p">};</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">two</span> <span class="o">===</span> <span class="kc">undefined</span><span class="p">);</span> <span class="c1">//true</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">one</span><span class="p">,</span> <span class="nx">two</span><span class="p">,</span> <span class="nx">three</span><span class="p">,</span> <span class="nx">four</span><span class="p">,</span> <span class="nx">five</span><span class="p">);</span> <span class="c1">// 1 3 4 5</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">today</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="p">{</span> <span class="nx">d</span><span class="o">:</span> <span class="mi">11</span><span class="p">,</span> <span class="nx">m</span><span class="o">:</span> <span class="mi">3</span><span class="p">,</span> <span class="nx">y</span><span class="o">:</span> <span class="mi">2014</span> <span class="p">};</span> <span class="p">}</span>
</span><span class='line'><span class="kd">var</span> <span class="p">{</span> <span class="nx">m</span><span class="o">:</span> <span class="nx">month</span><span class="p">,</span> <span class="nx">y</span><span class="o">:</span> <span class="nx">year</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">today</span><span class="p">();</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">month</span><span class="p">);</span> <span class="c1">//3</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">year</span><span class="p">);</span> <span class="c1">//2014</span>
</span><span class='line'>
</span><span class='line'><span class="nx">books</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'><span class="nx">books</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span> <span class="nx">title</span><span class="o">:</span><span class="s2">&quot;hello&quot;</span><span class="p">,</span> <span class="nx">author</span><span class="o">:</span><span class="s2">&quot;samuel&quot;</span> <span class="p">});</span>
</span><span class='line'><span class="nx">books</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span> <span class="nx">title</span><span class="o">:</span><span class="s2">&quot;hello2&quot;</span><span class="p">,</span> <span class="nx">author</span><span class="o">:</span><span class="s2">&quot;samuel2&quot;</span> <span class="p">});</span>
</span><span class='line'><span class="nx">books</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span> <span class="p">({</span> <span class="nx">title</span><span class="o">:</span> <span class="nx">t</span><span class="p">,</span> <span class="nx">author</span><span class="o">:</span> <span class="nx">a</span> <span class="p">})</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span> <span class="nx">a</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// hello samuel</span>
</span><span class='line'>  <span class="c1">// hello2 samuel2</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a name=default--rest--spread></a> Default + Rest + Spread</h3>

<p>函數參數可設定預設值(Default)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">f</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="o">=</span><span class="mi">12</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// y值會是12 當呼叫者沒有傳入值或傳入值為undefined</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">f</span><span class="p">(</span><span class="mi">3</span><span class="p">));</span> <span class="c1">//15</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">f</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="kc">undefined</span><span class="p">));</span> <span class="c1">//15</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">f</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="kc">null</span><span class="p">));</span> <span class="c1">//3</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">f</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">));</span> <span class="c1">//7</span>
</span></code></pre></td></tr></table></div></figure>


<p>不定長度函數參數(Rest Parameter)，函數傳入值當做陣列處理</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">f</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="p">...</span><span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// y 是一個陣列</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">x</span> <span class="o">*</span> <span class="nx">y</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">f</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="s2">&quot;hello&quot;</span><span class="p">,</span> <span class="kc">true</span><span class="p">));</span> <span class="c1">//6</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">f</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="s2">&quot;hello&quot;</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="mi">444</span><span class="p">));</span> <span class="c1">//9</span>
</span></code></pre></td></tr></table></div></figure>


<p>Spread Operator可使用陣列當做函數參數，陣列內的值會被當做相對應的參數值</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">f</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">z</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span> <span class="o">+</span> <span class="nx">z</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">f</span><span class="p">(...[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]));</span> <span class="c1">//6</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">f</span><span class="p">(...[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]));</span> <span class="c1">//6</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">];</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">y</span> <span class="o">=</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">];</span>
</span><span class='line'><span class="nx">x</span><span class="p">.</span><span class="nx">push</span><span class="p">(...</span><span class="nx">y</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span> <span class="c1">//1,2,3,4</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a name=iterators--forof></a>Iterators + For..Of</h3>

<p>Iterator Object讓使用者可以客製化iteration行為，就像Java的Iteratable。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//For..Of</span>
</span><span class='line'><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">];</span>
</span><span class='line'><span class="kd">let</span> <span class="nx">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">v</span> <span class="nx">of</span> <span class="nx">arr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">sum</span> <span class="o">+=</span> <span class="nx">v</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;1 + 2 + 3 + 4 + 5 =&#39;</span><span class="p">,</span> <span class="nx">sum</span><span class="p">);</span> <span class="c1">// 1 + 2 + 3 + 4 + 5 = 15</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Basic Iterator</span>
</span><span class='line'><span class="c1">// fibonacci整個object就是iterator</span>
</span><span class='line'><span class="kd">let</span> <span class="nx">fibonacci</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="nx">Symbol</span><span class="p">.</span><span class="nx">iterator</span><span class="p">]()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="nx">pre</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">cur</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">next</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="nx">pre</span><span class="p">,</span> <span class="nx">cur</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="nx">cur</span><span class="p">,</span> <span class="nx">pre</span> <span class="o">+</span> <span class="nx">cur</span><span class="p">];</span> <span class="c1">//每次循徊把pre值設成cur，cur值則為cur+pre</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">{</span> <span class="nx">done</span><span class="o">:</span> <span class="nx">pre</span> <span class="o">&gt;</span> <span class="mi">100</span><span class="p">,</span> <span class="nx">value</span><span class="o">:</span> <span class="nx">pre</span> <span class="p">}</span> <span class="c1">//當pre值大於100時終止</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">n</span> <span class="nx">of</span> <span class="nx">fibonacci</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">n</span><span class="p">);</span> <span class="c1">// 1 1 2 3 5 8 13 21 34 55 89</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Iteration相關的介面</span>
</span><span class='line'><span class="kr">interface</span> <span class="nx">IteratorResult</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">done</span><span class="o">:</span> <span class="kr">boolean</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">value</span><span class="o">:</span> <span class="nx">any</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kr">interface</span> <span class="nx">Iterator</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">next</span><span class="p">()</span><span class="o">:</span> <span class="nx">IteratorResult</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kr">interface</span> <span class="nx">Iterable</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="nx">Symbol</span><span class="p">.</span><span class="nx">iterator</span><span class="p">]()</span><span class="o">:</span> <span class="nx">Iterator</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a name=generators></a> Generators</h3>

<p>Generator使用<code>function*</code>來宣告函數並且返回一個Generator實例。
Generator實例是一種Iterator。可以透過<code>yield</code>與<code>next</code>可以一步一步執行函數內容。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span><span class="o">*</span> <span class="nx">range</span><span class="p">(</span><span class="nx">start</span><span class="p">,</span> <span class="nx">end</span><span class="p">,</span> <span class="nx">step</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="nx">start</span> <span class="o">&lt;</span> <span class="nx">end</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">yield</span> <span class="nx">start</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">start</span> <span class="o">+=</span> <span class="nx">step</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="nx">of</span> <span class="nx">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span> <span class="c1">// 0 2 4 6 8</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">//Fibonacci數列實作by Generator</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">fibonacci</span> <span class="o">=</span> <span class="kd">function</span><span class="o">*</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">pre</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">cur</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">yield</span> <span class="nx">cur</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">tmp</span> <span class="o">=</span> <span class="nx">cur</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">cur</span> <span class="o">+=</span> <span class="nx">pre</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">pre</span> <span class="o">=</span> <span class="nx">tmp</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">f</span> <span class="o">=</span> <span class="nx">fibonacci</span><span class="p">();</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">n</span> <span class="nx">of</span> <span class="nx">f</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">n</span> <span class="o">&gt;</span> <span class="mi">100</span><span class="p">)</span>
</span><span class='line'>    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">n</span><span class="p">);</span> <span class="c1">// 1 1 2 3 5 8 13 21 34 55 89</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//你也可以自己使用next一步一步取值</span>
</span><span class='line'><span class="c1">//可以用done這個boolean值來判斷是否已經沒有next</span>
</span><span class='line'><span class="nx">f</span> <span class="o">=</span> <span class="nx">fibonacci</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">obj</span><span class="p">;</span>
</span><span class='line'><span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">obj</span> <span class="o">=</span> <span class="nx">f</span><span class="p">.</span><span class="nx">next</span><span class="p">()).</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">value</span> <span class="o">&gt;</span> <span class="mi">100</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>  <span class="c1">// 1 1 2 3 5 8 13 21 34 55 89</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Generator的介面</span>
</span><span class='line'><span class="kr">interface</span> <span class="nx">Generator</span> <span class="kr">extends</span> <span class="nx">Iterator</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">next</span><span class="p">(</span><span class="nx">value</span><span class="o">?:</span> <span class="nx">any</span><span class="p">)</span><span class="o">:</span> <span class="nx">IteratorResult</span><span class="p">;</span>
</span><span class='line'>  <span class="k">throw</span><span class="p">(</span><span class="nx">exception</span><span class="o">:</span> <span class="nx">any</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a name=comprehensions></a> Comprehensions</h3>

<p>Array Comprehension和Generator Comprehension提供簡單方式來處理數列</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//Array Comprehension</span>
</span><span class='line'><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">];</span>
</span><span class='line'><span class="kd">let</span> <span class="nx">squared</span> <span class="o">=</span> <span class="p">[</span><span class="k">for</span> <span class="p">(</span><span class="nx">x</span> <span class="nx">of</span> <span class="nx">arr</span><span class="p">)</span> <span class="nx">x</span> <span class="o">*</span> <span class="nx">x</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">squared</span><span class="p">);</span> <span class="c1">//1,4,9,16,25</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Generator Comprehension</span>
</span><span class='line'><span class="kd">let</span> <span class="nx">squared2</span> <span class="o">=</span> <span class="p">(</span><span class="k">for</span> <span class="p">(</span><span class="nx">x</span> <span class="nx">of</span> <span class="nx">arr</span><span class="p">)</span> <span class="nx">x</span> <span class="o">*</span> <span class="nx">x</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">z</span> <span class="nx">of</span> <span class="nx">squared2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">z</span><span class="p">);</span> <span class="c1">//1 4 9 16 25</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a name=unicode></a> Unicode</h3>

<p>完整21bit的Unicode支援</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// same as ES5.1</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;𠮷&quot;</span><span class="p">.</span><span class="nx">length</span> <span class="o">==</span> <span class="mi">2</span><span class="p">);</span> <span class="c1">//true</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// new RegExp behaviour, opt-in ‘u’</span>
</span><span class='line'><span class="c1">//console.log(&quot;𠮷&quot;.match(/./u)[0].length == 2); //在ES6模擬器上無法使用</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// new form</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;\uD842\uDFB7&quot;</span> <span class="o">==</span> <span class="s2">&quot;𠮷&quot;</span><span class="p">);</span> <span class="c1">//true</span>
</span><span class='line'><span class="c1">//console.log(&quot;\u{20BB7}&quot; == &quot;𠮷&quot;); //在ES6模擬器上無法使用</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// new String ops</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;𠮷&quot;</span><span class="p">.</span><span class="nx">codePointAt</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">==</span> <span class="mh">0x20BB7</span><span class="p">);</span> <span class="c1">//true</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//在ES6模擬器上無法使用</span>
</span><span class='line'><span class="c1">// for-of iterates code points</span>
</span><span class='line'><span class="c1">//for(var c of &quot;𠮷&quot;) {</span>
</span><span class='line'><span class="c1">//  console.log(c);</span>
</span><span class='line'><span class="c1">//}</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a name=modules></a> Modules</h3>

<p>像AMD,CommonJS一樣可以自行定義module以及彼此之間的相依性。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// lib/math.js</span>
</span><span class='line'><span class="kr">export</span> <span class="kd">function</span> <span class="nx">sum</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kr">export</span> <span class="kd">var</span> <span class="nx">pi</span> <span class="o">=</span> <span class="mf">3.141593</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">msg2</span> <span class="o">=</span> <span class="s2">&quot;Ya&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kr">export</span> <span class="p">{</span> <span class="nx">msg2</span> <span class="nx">as</span> <span class="nx">message</span><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用<code>module</code>語法載入math.js</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// app.js</span>
</span><span class='line'><span class="nx">module</span> <span class="nx">math</span> <span class="nx">from</span> <span class="s2">&quot;lib/math&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;2π = &quot;</span> <span class="o">+</span> <span class="nx">math</span><span class="p">.</span><span class="nx">sum</span><span class="p">(</span><span class="nx">math</span><span class="p">.</span><span class="nx">pi</span><span class="p">,</span> <span class="nx">math</span><span class="p">.</span><span class="nx">pi</span><span class="p">));</span> <span class="c1">//2π = 6.283186 </span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">math</span><span class="p">.</span><span class="nx">msg2</span><span class="p">);</span> <span class="c1">//undefined</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">math</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span> <span class="c1">//Ya</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用<code>import</code>語法來載入sum函數和pi變數</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// otherApp.js</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span><span class="nx">sum</span><span class="p">,</span> <span class="nx">pi</span><span class="p">}</span> <span class="nx">from</span> <span class="s2">&quot;lib/math&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;2π = &quot;</span> <span class="o">+</span> <span class="nx">sum</span><span class="p">(</span><span class="nx">pi</span><span class="p">,</span> <span class="nx">pi</span><span class="p">));</span> <span class="c1">//2π = 6.283186</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">message</span><span class="p">);</span> <span class="c1">//undefined </span>
</span></code></pre></td></tr></table></div></figure>


<h3><a name=module-loaders></a> Module Loaders</h3>

<p>Module Loader提供動態載入(Dynamic loading)，命名空間(Namespace)，狀態獨立(State isolation)等功能</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//更改預設js目錄</span>
</span><span class='line'><span class="nx">System</span><span class="p">.</span><span class="nx">baseURL</span> <span class="o">=</span> <span class="s1">&#39;/lib/&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//動態載入math.js</span>
</span><span class='line'><span class="nx">System</span><span class="p">.</span><span class="kr">import</span><span class="p">(</span><span class="s1">&#39;math&#39;</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">m</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">//m 是math的namespace</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;2π = &quot;</span> <span class="o">+</span> <span class="nx">m</span><span class="p">.</span><span class="nx">sum</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">pi</span><span class="p">,</span> <span class="nx">m</span><span class="p">.</span><span class="nx">pi</span><span class="p">));</span> <span class="c1">//2π = 6.283186</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//理論上可以用Loader來執行程式碼在某一個context底下</span>
</span><span class='line'><span class="c1">//但模擬器找不到Loader..</span>
</span><span class='line'><span class="c1">// Create execution sandboxes – new Loaders</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">loader</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Loader</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">global</span><span class="o">:</span> <span class="nx">fixup</span><span class="p">(</span><span class="nb">window</span><span class="p">)</span> <span class="c1">// replace ‘console.log’</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="nx">loader</span><span class="p">.</span><span class="nb">eval</span><span class="p">(</span><span class="s2">&quot;console.log(&#39;hello world!&#39;);&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a name=map--set--weakmap--weakset></a> Map+Set+Weakmap+Weakset</h3>

<p>新的資料結構，由於目前模擬器都還沒有實作所以沒有親自試過。不過我相信這部份上手很快不難。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Sets</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">s</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Set</span><span class="p">();</span>
</span><span class='line'><span class="nx">s</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="s2">&quot;hello&quot;</span><span class="p">).</span><span class="nx">add</span><span class="p">(</span><span class="s2">&quot;goodbye&quot;</span><span class="p">).</span><span class="nx">add</span><span class="p">(</span><span class="s2">&quot;hello&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">s</span><span class="p">.</span><span class="nx">size</span> <span class="o">===</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'><span class="nx">s</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="s2">&quot;hello&quot;</span><span class="p">)</span> <span class="o">===</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Maps</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">m</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Map</span><span class="p">();</span>
</span><span class='line'><span class="nx">m</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s2">&quot;hello&quot;</span><span class="p">,</span> <span class="mi">42</span><span class="p">);</span>
</span><span class='line'><span class="nx">m</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span> <span class="mi">34</span><span class="p">);</span>
</span><span class='line'><span class="nx">m</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span> <span class="o">==</span> <span class="mi">34</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Weak Maps</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">wm</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">WeakMap</span><span class="p">();</span>
</span><span class='line'><span class="nx">wm</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span> <span class="p">{</span> <span class="nx">extra</span><span class="o">:</span> <span class="mi">42</span> <span class="p">});</span>
</span><span class='line'><span class="nx">wm</span><span class="p">.</span><span class="nx">size</span> <span class="o">===</span> <span class="kc">undefined</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Weak Sets</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">ws</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">WeakSet</span><span class="p">();</span>
</span><span class='line'><span class="nx">ws</span><span class="p">.</span><span class="nx">add</span><span class="p">({</span> <span class="nx">data</span><span class="o">:</span> <span class="mi">42</span> <span class="p">});</span>
</span><span class='line'><span class="c1">// Because the added object has no other references, it will not be held in the set</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a name=proxies></a> Proxies</h3>

<p>Proxy故名思義就是讓對某一個物件(host object)的所有行為透過代理物件(proxy object)。
方便用來logging或效能分析(profiling)。目前模擬器還沒實作。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Proxying a normal object</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">target</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">handler</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">get</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">receiver</span><span class="p">,</span> <span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="err">`</span><span class="nx">Hello</span><span class="p">,</span> <span class="nx">$</span><span class="p">{</span><span class="nx">name</span><span class="p">}</span><span class="o">!</span><span class="err">`</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">p</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Proxy</span><span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="nx">handler</span><span class="p">);</span>
</span><span class='line'><span class="nx">p</span><span class="p">.</span><span class="nx">world</span> <span class="o">===</span> <span class="s1">&#39;Hello, world!&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Proxying a function object</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">target</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="s1">&#39;I am the target&#39;</span><span class="p">;</span> <span class="p">};</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">handler</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">apply</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">receiver</span><span class="p">,</span> <span class="p">...</span><span class="nx">args</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s1">&#39;I am the proxy&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">p</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Proxy</span><span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="nx">handler</span><span class="p">);</span>
</span><span class='line'><span class="nx">p</span><span class="p">()</span> <span class="o">===</span> <span class="s1">&#39;I am the proxy&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a name=symbols></a> Symbols</h3>

<p>Symbol是一種新的primitive type。Symbol可以用來當做property的key值而且是唯一的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">key</span> <span class="o">=</span> <span class="nx">Symbol</span><span class="p">(</span><span class="s2">&quot;key&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">MyClass</span><span class="p">(</span><span class="nx">privateData</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="nx">privateData</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">MyClass</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">say</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">[</span><span class="nx">key</span><span class="p">]);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">c</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MyClass</span><span class="p">(</span><span class="s2">&quot;hello&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="s2">&quot;key&quot;</span><span class="p">]);</span> <span class="c1">//undefined 因為Symbol並不是String</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="nx">key</span><span class="p">]);</span> <span class="c1">//hello</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">say</span><span class="p">());</span> <span class="c1">//hello</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a name=promises></a> Promises</h3>

<p>Promise就不用再多提，目前已經有很多現成的ES5 library有實作Promise pattern了。
像<a href="https://github.com/tildeio/rsvp.js">RSVP.js</a>和<a href="https://github.com/kriskowal/q">Q</a>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">promise</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Promise</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// do a thing, possibly async, then…</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="cm">/* everything turned out fine */</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">resolve</span><span class="p">(</span><span class="s2">&quot;Stuff worked!&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">reject</span><span class="p">(</span><span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;It broke&quot;</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">promise</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span> <span class="c1">// &quot;Stuff worked!&quot;</span>
</span><span class='line'><span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span> <span class="c1">// Error: &quot;It broke&quot;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a name=math--number--string--object-apis></a> Math+Number+String+Object APIs</h3>

<p>ES6增加了許多好用的函數。底下範例在目前模擬器上尚無法完全支援。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nb">Number</span><span class="p">.</span><span class="nx">EPSILON</span>
</span><span class='line'><span class="nb">Number</span><span class="p">.</span><span class="nx">isInteger</span><span class="p">(</span><span class="kc">Infinity</span><span class="p">)</span> <span class="c1">// false</span>
</span><span class='line'><span class="nb">Number</span><span class="p">.</span><span class="nb">isNaN</span><span class="p">(</span><span class="s2">&quot;NaN&quot;</span><span class="p">)</span> <span class="c1">// false</span>
</span><span class='line'>
</span><span class='line'><span class="nb">Math</span><span class="p">.</span><span class="nx">acosh</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="c1">// 1.762747174039086</span>
</span><span class='line'><span class="nb">Math</span><span class="p">.</span><span class="nx">hypot</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span> <span class="c1">// 5</span>
</span><span class='line'><span class="nb">Math</span><span class="p">.</span><span class="nx">imul</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">32</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">32</span><span class="p">)</span> <span class="o">-</span> <span class="mi">2</span><span class="p">)</span> <span class="c1">// 2</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot;abcde&quot;</span><span class="p">.</span><span class="nx">contains</span><span class="p">(</span><span class="s2">&quot;cd&quot;</span><span class="p">)</span> <span class="c1">// true</span>
</span><span class='line'><span class="s2">&quot;abc&quot;</span><span class="p">.</span><span class="nx">repeat</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="c1">// &quot;abcabcabc&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">Array</span><span class="p">.</span><span class="nx">from</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="s1">&#39;*&#39;</span><span class="p">))</span> <span class="c1">// Returns a real Array</span>
</span><span class='line'><span class="nb">Array</span><span class="p">.</span><span class="nx">of</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span> <span class="c1">// Similar to new Array(...), but without special one-arg behavior</span>
</span><span class='line'><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">].</span><span class="nx">fill</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="c1">// [0,7,7]</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">].</span><span class="nx">findIndex</span><span class="p">(</span><span class="nx">x</span> <span class="o">=&gt;</span> <span class="nx">x</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span> <span class="c1">// 1</span>
</span><span class='line'><span class="p">[</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="s2">&quot;b&quot;</span><span class="p">,</span> <span class="s2">&quot;c&quot;</span><span class="p">].</span><span class="nx">entries</span><span class="p">()</span> <span class="c1">// iterator [0, &quot;a&quot;], [1,&quot;b&quot;], [2,&quot;c&quot;]</span>
</span><span class='line'><span class="p">[</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="s2">&quot;b&quot;</span><span class="p">,</span> <span class="s2">&quot;c&quot;</span><span class="p">].</span><span class="nx">keys</span><span class="p">()</span> <span class="c1">// iterator 0, 1, 2</span>
</span><span class='line'><span class="p">[</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="s2">&quot;b&quot;</span><span class="p">,</span> <span class="s2">&quot;c&quot;</span><span class="p">].</span><span class="nx">values</span><span class="p">()</span> <span class="c1">// iterator &quot;a&quot;, &quot;b&quot;, &quot;c&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Object copying</span>
</span><span class='line'><span class="nb">Object</span><span class="p">.</span><span class="nx">assign</span><span class="p">(</span><span class="nx">Point</span><span class="p">,</span> <span class="p">{</span> <span class="nx">origin</span><span class="o">:</span> <span class="k">new</span> <span class="nx">Point</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span> <span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a name=binary-and-octal-literals></a> Binary and Octal Literals</h3>

<p>新的二進位(b)和八進位(o)表示式</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">0</span><span class="nx">b111110111</span> <span class="o">===</span> <span class="mi">503</span><span class="p">);</span> <span class="c1">// true</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">0</span><span class="nx">o767</span> <span class="o">===</span> <span class="mi">503</span><span class="p">);</span> <span class="c1">// true</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a name=reflect-api></a> Reflect API</h3>

<p>參考<a href="http://wiki.ecmascript.org/doku.php?id=harmony:reflect_api">ECMAScript wiki</a>。</p>

<h3><a name=tail-calls></a> Tail Calls</h3>

<p>Tail Call最佳化讓遞迴程式call stack不會無限增加導致記憶體用完。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">factorial</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span> <span class="nx">acc</span> <span class="o">=</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="s1">&#39;use strict&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">n</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="p">)</span> <span class="k">return</span> <span class="nx">acc</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">factorial</span><span class="p">(</span><span class="nx">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">n</span> <span class="o">*</span> <span class="nx">acc</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 在目前的browser幾乎都會stack overflow</span>
</span><span class='line'><span class="c1">// 未來ES6上面是安全的</span>
</span><span class='line'><span class="nx">factorial</span><span class="p">(</span><span class="mi">100000</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unit testing in Emberjs]]></title>
    <link href="http://weichienhung.github.io/blog/2014/03/08/unit-testing-in-emberjs/"/>
    <updated>2014-03-08T12:52:00+08:00</updated>
    <id>http://weichienhung.github.io/blog/2014/03/08/unit-testing-in-emberjs</id>
    <content type="html"><![CDATA[<p>I apply the <a href="https://qunitjs.com/">QUnit</a> to my Emberjs project to do unit/integration testing.
In unit testing we usually have to mock object/methods to test every condition.
I choose <a href="http://sinonjs.org/">SinonJS</a> as my mock library. It&#8217;s really easy to use.</p>

<p>Let&#8217;s see how to unit testing my components.</p>

<h3>Testing html</h3>

<p>Create a html that includes qunit,sinon,emberjs and your source codes. Remeber to use debug Emberjs(<code>ember-1.x.x.js</code>) not production(<code>ember-1.x.x.min.js</code>)<br/>
Make sure you invoke <code>setupForTesting</code> and <code>injectTestHelpers</code> after Application created.</p>

<figure class='code'><figcaption><span>test.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>  <span class="c">&lt;!-- vendor libs --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;js/vendor/jquery-1.9.1.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;js/vendor/handlebars-1.0.0.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;lib/ember-1.0.1.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">&lt;!-- testing libs --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;lib/qunit-1.14.0.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;lib/qunit-1.14.0.css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">&lt;!-- mock libs --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;lib/sinon-1.8.2.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">&lt;!-- source codes --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;js/components/lobby.component.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;application&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;script&gt;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">MyApp</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Application</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">rootElement</span><span class="o">:</span> <span class="s1">&#39;#application&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="nx">MyApp</span><span class="p">.</span><span class="nx">setupForTesting</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">MyApp</span><span class="p">.</span><span class="nx">injectTestHelpers</span><span class="p">();</span>
</span><span class='line'>  <span class="nt">&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">&lt;!-- spec codes --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;spec/lobby.spec.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Route</h3>

<p>I have a lobby route.</p>

<figure class='code'><figcaption><span>LobbyRoute</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">MyApp</span><span class="p">.</span><span class="nx">LobbyRoute</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">renderTemplate</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="s2">&quot;lobby&quot;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">controller</span><span class="o">:</span> <span class="s2">&quot;lobby&quot;</span> <span class="p">}</span> <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>In QUnit we could use <code>module()</code> to group test cases. <code>test()</code> after <code>module()</code> will be grouped.
Then we could add <code>setup</code> and <code>teardown</code> methods. They will be invoked in each test case.</p>

<figure class='code'><figcaption><span>lobby.spec.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">module</span><span class="p">(</span><span class="s2">&quot;LobbyRoute&quot;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">setup</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">MyApp</span><span class="p">.</span><span class="nx">reset</span><span class="p">();</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">teardown</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//do something here.</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">test</span><span class="p">(</span><span class="s2">&quot;should render lobby template&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">Ember</span><span class="p">.</span><span class="nx">run</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">route</span> <span class="o">=</span> <span class="nx">MyApp</span><span class="p">.</span><span class="nx">__container__</span><span class="p">.</span><span class="nx">lookup</span><span class="p">(</span><span class="s1">&#39;route:lobby&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">sinon</span><span class="p">.</span><span class="nx">spy</span><span class="p">(</span><span class="nx">route</span><span class="p">,</span> <span class="s2">&quot;render&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">route</span><span class="p">.</span><span class="nx">renderTemplate</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">ok</span><span class="p">(</span><span class="nx">route</span><span class="p">.</span><span class="nx">render</span><span class="p">.</span><span class="nx">calledOnce</span><span class="p">,</span> <span class="s2">&quot;render should be calledOnce&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Above example uses Ember&#8217;s <code>__container__.lookup</code> to find specific component and testing it.<br/>
But how we make sure the specified method is called?
Use <code>sinon.spy</code> to spy a object/method and check it.</p>

<!-- more -->


<h3>Controller</h3>

<p>I have a <code>backward</code> function and it will invoke <code>exitApp</code> when <code>isWebview()</code> is true.</p>

<figure class='code'><figcaption><span>LobbyController</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">MyApp</span><span class="p">.</span><span class="nx">LobbyController</span> <span class="o">=</span> <span class="nx">application</span><span class="p">.</span><span class="nx">AccessibleObjectController</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">backward</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="nx">ViewManager</span><span class="p">.</span><span class="nx">isWebview</span><span class="p">()</span> <span class="p">){</span>
</span><span class='line'>      <span class="nx">LifeManager</span><span class="p">.</span><span class="nx">exitApp</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>In below example, we <code>stub</code> the ViewManager&#8217;s <code>isWebview</code> method.
I want it returns true during testing. Here is a little difference from previous example.
In the last two lines. I have to invoke <code>restore</code> in each stub/spy method.
Why? The same method can&#8217;t be spy/stub twice.  We have to <code>restore</code> it to prevent other test cases be influenced.
Why previous example doesn&#8217;t have <code>restore</code> in route? Because lobby route is in Ember container and it will be re-created in <code>MyApp.reset()</code></p>

<figure class='code'><figcaption><span>lobby.spec.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">test</span><span class="p">(</span><span class="s2">&quot;backward should invoke exitApp in webview&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">Ember</span><span class="p">.</span><span class="nx">run</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">controller</span> <span class="o">=</span> <span class="nx">MyApp</span><span class="p">.</span><span class="nx">__container__</span><span class="p">.</span><span class="nx">lookup</span><span class="p">(</span><span class="s1">&#39;controller:lobby&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">sinon</span><span class="p">.</span><span class="nx">stub</span><span class="p">(</span><span class="nx">ViewManager</span><span class="p">,</span> <span class="s2">&quot;isWebview&quot;</span><span class="p">).</span><span class="nx">returns</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">sinon</span><span class="p">.</span><span class="nx">spy</span><span class="p">(</span><span class="nx">LifeManager</span><span class="p">,</span> <span class="s2">&quot;exitApp&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">controller</span><span class="p">.</span><span class="nx">backward</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//assert</span>
</span><span class='line'>    <span class="nx">equal</span><span class="p">(</span><span class="nx">LifeManager</span><span class="p">.</span><span class="nx">exitApp</span><span class="p">.</span><span class="nx">callCount</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="s2">&quot;LifeManager.exitApp should be called&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">ViewManager</span><span class="p">.</span><span class="nx">isWebview</span><span class="p">.</span><span class="nx">restore</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">LifeManager</span><span class="p">.</span><span class="nx">exitApp</span><span class="p">.</span><span class="nx">restore</span><span class="p">();</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>View</h3>

<p>Have a lobby view and template as below.</p>

<figure class='code'><figcaption><span>LobbyView</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">MyApp</span><span class="p">.</span><span class="nx">LobbyView</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">templateName</span> <span class="o">:</span> <span class="s1">&#39;tmp_lobby&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">classNames</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;lobby-layout&#39;</span><span class="p">],</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="nx">Ember</span><span class="p">.</span><span class="nx">TEMPLATES</span><span class="p">.</span><span class="nx">tmp_lobby</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Handlebars</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span>
</span><span class='line'>  <span class="p">[</span><span class="s1">&#39;&lt;div class=&quot;lobby-header&quot;&gt;&#39;</span><span class="p">,</span>
</span><span class='line'>     <span class="s1">&#39;&lt;div class=&quot;lobby-logo&quot;&gt;&lt;/div&gt;&#39;</span><span class="p">,</span>
</span><span class='line'>   <span class="s1">&#39;&lt;/div&gt;&#39;</span><span class="p">,</span>
</span><span class='line'>   <span class="s1">&#39;&lt;div class=&quot;lobby-content&quot;&gt;&lt;/div&gt;&#39;</span>
</span><span class='line'>  <span class="p">].</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>In <code>setup</code> we have to append view to document.
Then we could use css selector to find expected element.
Remeber to remove it from document in <code>teardown</code>.</p>

<figure class='code'><figcaption><span>lobby.spec.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">module</span><span class="p">(</span><span class="s2">&quot;LobbyView&quot;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">setup</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">Gamenow</span><span class="p">.</span><span class="nx">reset</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">Ember</span><span class="p">.</span><span class="nx">run</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">view</span> <span class="o">=</span> <span class="nx">MyApp</span><span class="p">.</span><span class="nx">__container__</span><span class="p">.</span><span class="nx">lookup</span><span class="p">(</span><span class="s1">&#39;view:lobby&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">view</span><span class="p">.</span><span class="nx">append</span><span class="p">();</span> <span class="c1">// Hook up to our document.</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">teardown</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">Ember</span><span class="p">.</span><span class="nx">run</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">view</span><span class="p">.</span><span class="nx">remove</span><span class="p">();</span> <span class="c1">// Unhook from our document.</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">test</span><span class="p">(</span><span class="s2">&quot;header should has logo&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">equal</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">view</span><span class="p">.</span><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;.lobby-header .lobby-logo&quot;</span><span class="p">).</span><span class="nx">length</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="s2">&quot;.lobby-logo should exist&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Refactor ruby code by meta programming]]></title>
    <link href="http://weichienhung.github.io/blog/2014/02/22/refactor-ruby-code-by-meta-programming/"/>
    <updated>2014-02-22T12:52:00+08:00</updated>
    <id>http://weichienhung.github.io/blog/2014/02/22/refactor-ruby-code-by-meta-programming</id>
    <content type="html"><![CDATA[<p>最近重構了一些自動化部署的程式碼，因為發現程式碼裡面大部份的邏輯是一樣的。
決定使用meta programming來重構這些程式碼順便學習ruby的meta programming。</p>

<h3>dynamic define method</h3>

<p>看看底下的程式碼，想取得使用者輸入的版號來進行自動部署。</p>

<figure class='code'><figcaption><span>before_refactor</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">get_gc_version_from_user</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Type a version d.d.d or leave blank to get the latest gc:&quot;</span>
</span><span class='line'>    <span class="vi">@gc_version</span> <span class="o">=</span> <span class="n">get_user_input</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">get_gv_version_from_user</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">unless</span> <span class="vi">@config</span><span class="o">[</span><span class="ss">:import_gv</span><span class="o">]</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Type a version d.d.d or leave blank to get the latest gv:&quot;</span>
</span><span class='line'>    <span class="vi">@gv_version</span> <span class="o">=</span> <span class="n">get_user_input</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">get_game_combo_version_from_user</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">unless</span> <span class="vi">@config</span><span class="o">[</span><span class="ss">:import_game_combo</span><span class="o">]</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Type a version d.d.d or leave blank to get the latest game combo:&quot;</span>
</span><span class='line'>    <span class="vi">@game_combo_version</span> <span class="o">=</span> <span class="n">get_user_input</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>After refactor, use array to create methods. <code>define_method</code> is used to define new methods dynamically.
<code>do |argument|</code> means your could pass parameters in. <code>instance_variable_set</code> is used to set a instance varaible</p>

<figure class='code'><figcaption><span>after_refactor</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="o">[</span><span class="s1">&#39;gc&#39;</span><span class="p">,</span><span class="s1">&#39;gv&#39;</span><span class="p">,</span><span class="s1">&#39;game_combo&#39;</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span>
</span><span class='line'>    <span class="n">define_method</span><span class="p">(</span><span class="s2">&quot;get_</span><span class="si">#{</span><span class="n">item</span><span class="si">}</span><span class="s2">_version_from_user&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">argument</span><span class="o">|</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">unless</span> <span class="n">argument</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;Type a version d.d.d or leave blank to get the </span><span class="si">#{</span><span class="n">item</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="nb">instance_variable_set</span><span class="p">(</span><span class="s2">&quot;@</span><span class="si">#{</span><span class="n">item</span><span class="si">}</span><span class="s2">_version&quot;</span><span class="p">,</span> <span class="n">get_user_input</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<p>After refactor, how to invoke these methods?</p>

<figure class='code'><figcaption><span>how_to_invoke</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">prefer_versions</span>
</span><span class='line'>  <span class="n">get_gc_version_from_user</span><span class="p">(</span><span class="kp">true</span><span class="p">)</span>
</span><span class='line'>  <span class="n">get_gv_version_from_user</span><span class="p">(</span><span class="vi">@config</span><span class="o">[</span><span class="ss">:import_gv</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="n">get_game_combo_version_from_user</span><span class="p">(</span><span class="vi">@config</span><span class="o">[</span><span class="ss">:import_game_combo</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I found it&#8217;s unconvenient to pass parameter everytime. Methods should determine if it&#8217;s executed or not.
So i did a little updated. Use <code>instance_variable_get</code> to access instance variable and determine return or not.</p>

<figure class='code'><figcaption><span>after_refactor2</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="o">[</span><span class="s1">&#39;gc&#39;</span><span class="p">,</span><span class="s1">&#39;gv&#39;</span><span class="p">,</span><span class="s1">&#39;game_combo&#39;</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span>
</span><span class='line'>    <span class="n">define_method</span><span class="p">(</span><span class="s2">&quot;get_</span><span class="si">#{</span><span class="n">item</span><span class="si">}</span><span class="s2">_version_from_user&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">unless</span> <span class="nb">instance_variable_get</span><span class="p">(</span><span class="s2">&quot;@config&quot;</span><span class="p">)</span><span class="o">[</span><span class="s2">&quot;import_</span><span class="si">#{</span><span class="n">item</span><span class="si">}</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">to_sym</span><span class="o">]</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;Type a version d.d.d or leave blank to get the </span><span class="si">#{</span><span class="n">item</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="nb">instance_variable_set</span><span class="p">(</span><span class="s2">&quot;@</span><span class="si">#{</span><span class="n">item</span><span class="si">}</span><span class="s2">_version&quot;</span><span class="p">,</span> <span class="n">get_user_input</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>How to invoke?</p>

<figure class='code'><figcaption><span>how_to_invoke2</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">prefer_versions</span>
</span><span class='line'>  <span class="n">get_gc_version_from_user</span>
</span><span class='line'>  <span class="n">get_gv_version_from_user</span>
</span><span class='line'>  <span class="n">get_game_combo_version_from_user</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>dynamic define class method</h3>

<p>I have a util class and most of methods are class method.</p>

<figure class='code'><figcaption><span>before_refactor</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">MvnUtils</span>
</span><span class='line'>  <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">find_latest_gc_version</span>
</span><span class='line'>      <span class="n">find_latest_version</span> <span class="s1">&#39;http://xxx.yyy.zzz/folder_a/gc/maven-metadata.xml&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">find_latest_gv_version</span>
</span><span class='line'>      <span class="n">find_latest_version</span> <span class="s1">&#39;http://xxx.yyy.zzz/folder_b/gv/maven-metadata.xml&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">find_latest_game_combo_version</span>
</span><span class='line'>      <span class="n">find_latest_version</span> <span class="s1">&#39;http://xxx.yyy.zzz/folder_c/game_combo/maven-metadata.xml&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>There&#8217;re few ways to create class methods but i think below are favroite.<br/>
Use <code>define_method</code> inside <code>class &lt;&lt; self</code></p>

<figure class='code'><figcaption><span>first way</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">MvnUtils</span>
</span><span class='line'>  <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
</span><span class='line'>    <span class="o">[</span><span class="sx">%w(gc folder_a)</span><span class="p">,</span><span class="sx">%w(gv folder_b)</span><span class="p">,</span><span class="sx">%w(game_combo folder_c)</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span>
</span><span class='line'>      <span class="n">define_method</span><span class="p">(</span><span class="s2">&quot;find_latest_</span><span class="si">#{</span><span class="n">item</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="si">}</span><span class="s2">_version&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">find_latest_version</span> <span class="s2">&quot;http://xxx.yyy.zzz/</span><span class="si">#{</span><span class="n">item</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">item</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="si">}</span><span class="s2">/maven-metadata.xml&quot;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>OR use <code>define_singleton_method</code> to create class method</p>

<figure class='code'><figcaption><span>second way</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">MvnUtils</span>
</span><span class='line'>  <span class="o">[</span><span class="sx">%w(gc folder_a)</span><span class="p">,</span><span class="sx">%w(gv folder_b)</span><span class="p">,</span><span class="sx">%w(game_combo folder_c)</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span>
</span><span class='line'>    <span class="n">define_singleton_method</span><span class="p">(</span><span class="s2">&quot;find_latest_</span><span class="si">#{</span><span class="n">item</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="si">}</span><span class="s2">_version&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">find_latest_version</span> <span class="s2">&quot;http://xxx.yyy.zzz/</span><span class="si">#{</span><span class="n">item</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">item</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="si">}</span><span class="s2">/maven-metadata.xml&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>dynamic call</h3>

<p>Originally i will retrieve the latest version from mvn if user doens&#8217;t specific the target deployment version.</p>

<figure class='code'><figcaption><span>before_refactor</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">check_gc_version</span>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@gc_version</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>      <span class="vi">@gc_version</span> <span class="o">=</span> <span class="no">MvnUtils</span><span class="o">.</span><span class="n">find_latest_gc_version</span>
</span><span class='line'>      <span class="nb">abort</span><span class="p">(</span><span class="s2">&quot;Can&#39;t find the latest gc version.&quot;</span><span class="p">)</span> <span class="k">if</span> <span class="vi">@version</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">check_gv_version</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">unless</span> <span class="vi">@config</span><span class="o">[</span><span class="ss">:import_gv_game</span><span class="o">]</span>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@gv_version</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>      <span class="vi">@gv_version</span> <span class="o">=</span> <span class="no">MvnUtils</span><span class="o">.</span><span class="n">find_latest_gv_version</span>
</span><span class='line'>      <span class="nb">abort</span><span class="p">(</span><span class="s2">&quot;Can&#39;t find the latest gv version.&quot;</span><span class="p">)</span> <span class="k">if</span> <span class="vi">@gv_version</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">check_game_combo_version</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">unless</span> <span class="vi">@config</span><span class="o">[</span><span class="ss">:import_game_combo</span><span class="o">]</span>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@game_comb_version</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>      <span class="vi">@game_comb_version</span> <span class="o">=</span> <span class="no">MvnUtils</span><span class="o">.</span><span class="n">find_latest_game_combo_version</span>
</span><span class='line'>      <span class="nb">abort</span><span class="p">(</span><span class="s2">&quot;Can&#39;t find the latest game comb version.&quot;</span><span class="p">)</span> <span class="k">if</span> <span class="vi">@game_comb_version</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Use <code>.send()</code> to invoke object&#8217;s method</p>

<figure class='code'><figcaption><span>after_factor</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="o">[</span><span class="s1">&#39;gc&#39;</span><span class="p">,</span><span class="s1">&#39;gv&#39;</span><span class="p">,</span><span class="s1">&#39;game_combo&#39;</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span>
</span><span class='line'>    <span class="n">define_method</span><span class="p">(</span><span class="s2">&quot;check_</span><span class="si">#{</span><span class="n">item</span><span class="si">}</span><span class="s2">_version&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">unless</span> <span class="nb">instance_variable_get</span><span class="p">(</span><span class="s2">&quot;@config&quot;</span><span class="p">)</span><span class="o">[</span><span class="s2">&quot;import_</span><span class="si">#{</span><span class="n">item</span><span class="si">}</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">to_sym</span><span class="o">]</span>
</span><span class='line'>      <span class="k">if</span> <span class="nb">instance_variable_get</span><span class="p">(</span><span class="s2">&quot;@</span><span class="si">#{</span><span class="n">item</span><span class="si">}</span><span class="s2">_version&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>        <span class="nb">instance_variable_set</span><span class="p">(</span><span class="s2">&quot;@</span><span class="si">#{</span><span class="n">item</span><span class="si">}</span><span class="s2">_version&quot;</span><span class="p">,</span> <span class="no">MvnUtils</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s2">&quot;find_latest_</span><span class="si">#{</span><span class="n">item</span><span class="si">}</span><span class="s2">_version&quot;</span><span class="p">))</span>
</span><span class='line'>        <span class="nb">abort</span><span class="p">(</span><span class="s2">&quot;Can&#39;t find the latest </span><span class="si">#{</span><span class="n">item</span><span class="si">}</span><span class="s2"> version.&quot;</span><span class="p">)</span> <span class="k">if</span> <span class="nb">instance_variable_get</span><span class="p">(</span><span class="s2">&quot;@</span><span class="si">#{</span><span class="n">item</span><span class="si">}</span><span class="s2">_version&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nginx configuration]]></title>
    <link href="http://weichienhung.github.io/blog/2014/01/25/nginx-configuration/"/>
    <updated>2014-01-25T10:04:00+08:00</updated>
    <id>http://weichienhung.github.io/blog/2014/01/25/nginx-configuration</id>
    <content type="html"><![CDATA[<p>As a web developer, nginx is often used in deployment architecture.
Write down the useful nginx configuration examples here.</p>

<p>Intall nginx is very easy and not describe here. Configuration good reference <a href="https://calomel.org/nginx.html">here</a></p>

<p>底下的設定值是用最基本的nginx install, 沒有額外的module</p>

<h3>Basic configuration</h3>

<figure class='code'><figcaption><span>/etc/nginx/nginx.conf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># 最基本的設定,不詳述</span>
</span><span class='line'>user  nginx;
</span><span class='line'>worker_processes  1;
</span><span class='line'>pid        /var/run/nginx.pid;
</span><span class='line'>
</span><span class='line'>events <span class="o">{</span>
</span><span class='line'>  worker_connections  1024;
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>http <span class="o">{</span>
</span><span class='line'>  <span class="c"># 載入支援的mime type</span>
</span><span class='line'>  include       /etc/nginx/mime.types;
</span><span class='line'>
</span><span class='line'>  <span class="c"># 當有不認識的mime type時就用octet-stream當一般binary檔案處理</span>
</span><span class='line'>  default_type  application/octet-stream;
</span><span class='line'>
</span><span class='line'>  <span class="c"># 定義自己的log format</span>
</span><span class='line'>  log_format  main  <span class="s1">&#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;</span>
</span><span class='line'>                    <span class="s1">&#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;</span>
</span><span class='line'>                    <span class="s1">&#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;</span>;
</span><span class='line'>
</span><span class='line'>  <span class="c"># access log存放位置並且使用 main 這個log format,也就是上述定義的格式</span>
</span><span class='line'>  <span class="c"># buffer=8k 表示不會一直寫log到disk,等到buffer滿了才寫,避免I/O過重</span>
</span><span class='line'>  access_log  /var/log/nginx/access.log main <span class="nv">buffer</span><span class="o">=</span>8k;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="c">## Size Limits</span>
</span><span class='line'>  <span class="c"># 當request body超過這個body size時會被先寫進暫存檔處理</span>
</span><span class='line'>  client_body_buffer_size   8k;
</span><span class='line'>
</span><span class='line'>  <span class="c"># 限制http header的大小</span>
</span><span class='line'>  client_header_buffer_size 1k;
</span><span class='line'>
</span><span class='line'>  <span class="c"># 限制request body大小，超過server會回傳413(Request Entity Too Large)</span>
</span><span class='line'>  client_max_body_size      1m;
</span><span class='line'>
</span><span class='line'>  <span class="c">## Timeouts, do not keep connections open longer then necessary to reduce</span>
</span><span class='line'>  <span class="c"># 讀取request body timeout時間,超過時間會回傳408(Request time out)</span>
</span><span class='line'>  client_body_timeout     4s;
</span><span class='line'>
</span><span class='line'>  <span class="c"># 讀取request header timeout時間(e.g GET HTTP/1.1),超過時間回傳408(Request time out)</span>
</span><span class='line'>  client_header_timeout   2s;
</span><span class='line'>
</span><span class='line'>  <span class="c"># HTTP 1.1 keepalive的timeout時間, 各家browser各有不同時間.</span>
</span><span class='line'>  keepalive_timeout       65s;
</span><span class='line'>
</span><span class='line'>  <span class="c"># 送資料給client的timeout時間(指得是兩次資料讀取時間), 降低這個值可以避免Slowloris DoS attack</span>
</span><span class='line'>  send_timeout            5s;
</span><span class='line'>
</span><span class='line'>  <span class="c">## General Options</span>
</span><span class='line'>  <span class="c"># 設定值 &gt;=1 的話讓NGINX支持下載部份檔。 如果你的server有要讓人下載大檔續傳的話..</span>
</span><span class='line'>  max_ranges 0;
</span><span class='line'>
</span><span class='line'>  <span class="c"># keepalive的連線最大數量</span>
</span><span class='line'>  keepalive_requests        5;
</span><span class='line'>
</span><span class='line'>  <span class="c"># Browder cache 失效時間, 負值的話表示不要有任何cache.</span>
</span><span class='line'>  expires 1d;
</span><span class='line'>
</span><span class='line'>  <span class="c"># Request limits</span>
</span><span class='line'>  <span class="c"># 限制一個IP在1秒內只處理5個requests</span>
</span><span class='line'>  <span class="c"># myzone是自行定義的名稱,用來存放IP, 2m表示最大不超過2M記憶體</span>
</span><span class='line'>  limit_req_zone  <span class="nv">$binary_remote_addr</span>  <span class="nv">zone</span><span class="o">=</span>myzone:2m  <span class="nv">rate</span><span class="o">=</span>5r/s;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="c"># 載入其它設定檔</span>
</span><span class='line'>  include /etc/nginx/conf.d/*.conf;
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>How to reverse proxy?</h3>

<!-- more -->


<p>Separate the config from nginx.conf is good practice. I move server defination into <code>default.conf</code></p>

<figure class='code'><figcaption><span>/etc/nginx/conf.d/default.conf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># 定義在後端的servers</span>
</span><span class='line'>upstream backend_web_servers <span class="o">{</span>
</span><span class='line'>  server 192.168.0.102:3000 <span class="nv">max_fails</span><span class="o">=</span>250 <span class="nv">fail_timeout</span><span class="o">=</span>180s;
</span><span class='line'>  server 192.168.0.103:3000 <span class="nv">max_fails</span><span class="o">=</span>250 <span class="nv">fail_timeout</span><span class="o">=</span>180s;
</span><span class='line'>
</span><span class='line'>  <span class="c"># 設了backup後只有當上面102,103 server都掛點時才會導request到底下100</span>
</span><span class='line'>  server 192.168.0.100 backup;
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>server <span class="o">{</span>
</span><span class='line'>  <span class="c"># listening on 80 port. 額外設定socket receive和send buffer size</span>
</span><span class='line'>  listen 80 <span class="nv">rcvbuf</span><span class="o">=</span>8k <span class="nv">sndbuf</span><span class="o">=</span>8k;
</span><span class='line'>
</span><span class='line'>  <span class="c"># server名稱</span>
</span><span class='line'>  server_name www.myserver.io
</span><span class='line'>
</span><span class='line'>  ＃ 文件根目錄
</span><span class='line'>  root /usr/share/nginx/html;
</span><span class='line'>
</span><span class='line'>  <span class="c"># 限制一個IP不能超過10個open connections. nodelay會讓超過限制的connection直接回傳503不等待</span>
</span><span class='line'>  limit_req <span class="nv">zone</span><span class="o">=</span>myzone <span class="nv">burst</span><span class="o">=</span>10 nodelay;
</span><span class='line'>
</span><span class='line'>  <span class="c"># location 怎麼用可以參考http://cssor.com/nginx-location-configuration.html</span>
</span><span class='line'>  location / <span class="o">{</span>
</span><span class='line'>    try_files <span class="nv">$uri</span> @backend_web_servers;
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  location @backend_web_servers <span class="o">{</span>
</span><span class='line'>    <span class="c"># 允許proxies server cache網頁，看個人需求。如果你的網頁有太多個人資訊就不建議public</span>
</span><span class='line'>    add_header  Cache-Control <span class="s2">&quot;public&quot;</span>;
</span><span class='line'>
</span><span class='line'>    <span class="c"># 不允許網頁內容被放進iframe</span>
</span><span class='line'>    add_header  X-Frame-Options <span class="s2">&quot;DENY&quot;</span>;
</span><span class='line'>
</span><span class='line'>    <span class="c"># header設定. 將real ip傳進backend servers</span>
</span><span class='line'>    proxy_set_header   Host             <span class="nv">$host</span>;
</span><span class='line'>    proxy_set_header   X-Real-IP        <span class="nv">$remote_addr</span>;
</span><span class='line'>    proxy_set_header   X-Forwarded-For  <span class="nv">$proxy_add_x_forwarded_for</span>;
</span><span class='line'>
</span><span class='line'>    <span class="c"># 將request proxy到後端server</span>
</span><span class='line'>    proxy_pass http://backend_web_servers;
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Redirect domain name.</h3>

<p>For instance: redirect <code>http://myserver.io</code> to <code>http://www.myserver.io</code>.
The official document suggest us using <code>return</code> not <code>rewrite</code>.</p>

<figure class='code'><figcaption><span>/etc/nginx/conf.d/redirect_server.conf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>server <span class="o">{</span>
</span><span class='line'>  listen 80;
</span><span class='line'>  server_name myserver.io;
</span><span class='line'>  <span class="k">return </span>301 <span class="nv">$scheme</span>://www.myserver.io<span class="nv">$request_uri</span>;
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Enable/Disable Maintenance mode</h3>

<p>If the maintenance.html exists, it shows maintenance page first.
And disable the cache(set <code>expires -1</code>) to prevent browser cache maintenance.html.</p>

<figure class='code'><figcaption><span>/etc/nginx/conf.d/default.conf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>location / <span class="o">{</span>
</span><span class='line'>  try_files /maintenance.html <span class="nv">$uri</span> @backend_web_servers;
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>location /maintenance.html <span class="o">{</span>
</span><span class='line'>  expires -1; <span class="c"># prevent maintenance.html cached</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Serve static resources for RAILS</h3>

<p>All requests to assets folder like <code>http://127.0.0.1/assets/applicatoin-xxxxx.js</code> will be served by Nginx.</p>

<figure class='code'><figcaption><span>/etc/nginx/conf.d/default.conf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>location ^~ /assets/ <span class="o">{</span>
</span><span class='line'>  root /home/rails/myrail/public/;
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[emberjs-data trying]]></title>
    <link href="http://weichienhung.github.io/blog/2014/01/11/emberjs-data-trying/"/>
    <updated>2014-01-11T11:05:00+08:00</updated>
    <id>http://weichienhung.github.io/blog/2014/01/11/emberjs-data-trying</id>
    <content type="html"><![CDATA[<p>In my old emberjs project(<a href="https://github.com/weichienhung/money">money</a>,<a href="https://github.com/weichienhung/food-ntpc">food-ntpc</a>)
i didn&#8217;t use <a href="https://github.com/emberjs/data">ember-data</a> to handle data processing with backend server.
The ember-data is closed to 1.0.0(now is 1.0.0.beta4) so i give it a try.
The official document is quite less and some posts in StackOverflow are out of date.
Checkout their source code is the quickest way to understand how they work and do customized.
I write down tips here for my reference in the future.</p>

<p>Define your store to use ember-data</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">MyAdapter = </span><span class="nx">DS</span><span class="p">.</span><span class="nx">RESTAdapter</span><span class="p">.</span><span class="nx">extend</span>
</span><span class='line'>
</span><span class='line'><span class="nv">MyApp.Store = </span><span class="nx">DS</span><span class="p">.</span><span class="nx">Store</span><span class="p">.</span><span class="nx">extend</span>
</span><span class='line'>  <span class="nv">revision: </span><span class="mi">11</span>
</span><span class='line'>  <span class="nv">adapter: </span><span class="nx">MyAdapter</span>
</span></code></pre></td></tr></table></div></figure>


<p>Assume your have a <code>record</code> object and json format is</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;record&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;id&quot;</span><span class="p">:</span><span class="s2">&quot;1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;amount&quot;</span><span class="p">:</span><span class="mi">150</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;category_id&quot;</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;description&quot;</span><span class="p">:</span><span class="s2">&quot;dinner&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Define your model object.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">MyApp.Record = </span><span class="nx">DS</span><span class="p">.</span><span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span>
</span><span class='line'>  <span class="nv">category_id: </span><span class="nx">DS</span><span class="p">.</span><span class="nx">attr</span> <span class="s">&#39;number&#39;</span>
</span><span class='line'>  <span class="nv">amount: </span><span class="nx">DS</span><span class="p">.</span><span class="nx">attr</span> <span class="s">&#39;number&#39;</span>
</span><span class='line'>  <span class="nv">description: </span><span class="nx">DS</span><span class="p">.</span><span class="nx">attr</span> <span class="s">&#39;string&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>Get all <code>MyApp.Record</code> from backend server.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">MyApp.ApplicationRoute = </span><span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span>
</span><span class='line'>  <span class="nv">model: </span><span class="nf">(params)-&gt;</span>
</span><span class='line'>    <span class="nv">model = </span><span class="nx">@store</span><span class="p">.</span><span class="nx">find</span> <span class="s">&#39;record&#39;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">model</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>If you want to use store without in route,controller</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">MyApp</span><span class="p">.</span><span class="nx">__container__</span><span class="p">.</span><span class="nx">lookup</span><span class="p">(</span><span class="s">&#39;store:main&#39;</span><span class="p">).</span><span class="nx">find</span> <span class="s">&#39;record&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The backend should provide the REST api path <code>http://127.0.0.1/records</code>.<br/>
Server response json should be like</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;records&quot;</span><span class="p">:</span> <span class="p">[{</span>
</span><span class='line'>    <span class="nt">&quot;id&quot;</span><span class="p">:</span><span class="s2">&quot;1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;amount&quot;</span><span class="p">:</span><span class="mi">150</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;category_id&quot;</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;description&quot;</span><span class="p">:</span><span class="s2">&quot;dinner&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;id&quot;</span><span class="p">:</span><span class="s2">&quot;2&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;amount&quot;</span><span class="p">:</span><span class="mi">250</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;category_id&quot;</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;description&quot;</span><span class="p">:</span><span class="s2">&quot;lunch&quot;</span>
</span><span class='line'>  <span class="p">}]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The default root of json become <code>records</code> not <code>record</code> and content should be a Array.<br/>
In case you want to pass parameter into URL like <code>http://127.0.0.1/records?year=2014</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">MyApp.ApplicationRoute = </span><span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span>
</span><span class='line'>  <span class="nv">model: </span><span class="nf">(params)-&gt;</span>
</span><span class='line'>    <span class="nv">model = </span><span class="nx">@store</span><span class="p">.</span><span class="nx">find</span> <span class="s">&#39;record&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nv">year: </span><span class="mi">2014</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">model</span>
</span></code></pre></td></tr></table></div></figure>


<p>Get single record.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">MyApp.RecordRoute = </span><span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span>
</span><span class='line'>  <span class="nv">model: </span><span class="nf">(params)-&gt;</span>
</span><span class='line'>    <span class="c1"># assume params.id is 1</span>
</span><span class='line'>    <span class="nv">model = </span><span class="nx">@store</span><span class="p">.</span><span class="nx">find</span> <span class="s">&#39;record&#39;</span><span class="p">,</span> <span class="nx">params</span><span class="p">.</span><span class="nx">id</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">model</span>
</span></code></pre></td></tr></table></div></figure>


<p>The backend should provide the REST api path <code>http://127.0.0.1/record/1</code>.</p>

<h2>Customerized</h2>

<h3>change default request url</h3>

<p>Your backend server may provide REST api like <code>http://127.0.0.1/api/records</code>.
You could add namesapce to your rest adapter.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">MyAdapter = </span><span class="nx">DS</span><span class="p">.</span><span class="nx">RESTAdapter</span><span class="p">.</span><span class="nx">extend</span>
</span><span class='line'>  <span class="nv">namespace: </span><span class="s">&#39;api&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>change single model request url</h3>

<p>Your backend server doesn&#8217;t provide REST api <code>http://127.0.0.1/api/records</code> but <code>http://127.0.0.1/api/usages</code>.
The responsed json format doesn&#8217;t change.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">records_pattern = </span><span class="sr">///</span>
</span><span class='line'><span class="sr">  api/records</span>
</span><span class='line'><span class="sr">///</span>
</span><span class='line'>
</span><span class='line'><span class="nv">MyAdapter = </span><span class="nx">DS</span><span class="p">.</span><span class="nx">RESTAdapter</span><span class="p">.</span><span class="nx">extend</span>
</span><span class='line'>  <span class="nv">namespace: </span><span class="s">&#39;api&#39;</span>
</span><span class='line'>  <span class="nv">buildURL: </span><span class="nf">(type,id)-&gt;</span>
</span><span class='line'>    <span class="nv">url = </span><span class="nx">@</span><span class="p">.</span><span class="nx">_super</span><span class="p">(</span><span class="nx">type</span><span class="p">,</span> <span class="nx">id</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">url</span><span class="p">.</span><span class="nx">match</span> <span class="nx">records_pattern</span>
</span><span class='line'>      <span class="nv">url = </span><span class="nx">url</span><span class="p">.</span><span class="nx">replace</span> <span class="s">&#39;records&#39;</span><span class="p">,</span> <span class="s">&#39;usages&#39;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">url</span>
</span></code></pre></td></tr></table></div></figure>


<h3>change root of responsed json</h3>

<p>Your backend server change the default json format from</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;records&quot;</span><span class="p">:</span> <span class="p">[{</span>
</span><span class='line'>    <span class="nt">&quot;id&quot;</span><span class="p">:</span><span class="s2">&quot;1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;amount&quot;</span><span class="p">:</span><span class="mi">150</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;category_id&quot;</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;description&quot;</span><span class="p">:</span><span class="s2">&quot;dinner&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;id&quot;</span><span class="p">:</span><span class="s2">&quot;2&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;amount&quot;</span><span class="p">:</span><span class="mi">250</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;category_id&quot;</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;description&quot;</span><span class="p">:</span><span class="s2">&quot;lunch&quot;</span>
</span><span class='line'>  <span class="p">}]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>to</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;usages&quot;</span><span class="p">:</span> <span class="p">[{</span>
</span><span class='line'>    <span class="nt">&quot;id&quot;</span><span class="p">:</span><span class="s2">&quot;1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;amount&quot;</span><span class="p">:</span><span class="mi">150</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;category_id&quot;</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;description&quot;</span><span class="p">:</span><span class="s2">&quot;dinner&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;id&quot;</span><span class="p">:</span><span class="s2">&quot;2&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;amount&quot;</span><span class="p">:</span><span class="mi">250</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;category_id&quot;</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;description&quot;</span><span class="p">:</span><span class="s2">&quot;lunch&quot;</span>
</span><span class='line'>  <span class="p">}]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Simple extend the original serializer and overwrite methods</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">MyApp.RecordSerializer = </span><span class="nx">DS</span><span class="p">.</span><span class="nx">RESTSerializer</span><span class="p">.</span><span class="nx">extend</span>
</span><span class='line'>  <span class="nv">typeForRoot: </span><span class="nf">(root) -&gt;</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&quot;usage&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Refer to <a href="https://github.com/emberjs/data/blob/master/packages/ember-data/lib/serializers/rest_serializer.js">rest_serializer.js</a> to know more customerized.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UI automation]]></title>
    <link href="http://weichienhung.github.io/blog/2013/12/28/ui-automation/"/>
    <updated>2013-12-28T15:47:00+08:00</updated>
    <id>http://weichienhung.github.io/blog/2013/12/28/ui-automation</id>
    <content type="html"><![CDATA[<p>This article is the last one in 2013. In the rails project we use capybara to do UI testing.
Like click a button/link or fill the form. But i will show how to use capybara without rails in UI automation today.</p>

<p>Sometimes we have to repeat trivial works and these require user to interactive with browser.
For instance, upload file to server or input necessary data.</p>

<p>Install below gems and Firefox</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>gem install capybara
</span><span class='line'>gem install selenium-webdriver
</span></code></pre></td></tr></table></div></figure>


<p>In orer to use capybara without rails. You need to require <code>capybara</code> manually.
In default capybara will launch rack server, change <code>run_server</code> to <code>false</code>.
Because we assume your server is running. Use <code>selenium</code> as <code>driver</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;capybara&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;capybara/dsl&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="no">Capybara</span><span class="o">.</span><span class="n">run_server</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'><span class="no">Capybara</span><span class="o">.</span><span class="n">current_driver</span> <span class="o">=</span> <span class="ss">:selenium</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># it will open the browser to 127.0.0.1:8888/admin</span>
</span><span class='line'><span class="no">Capybara</span><span class="o">.</span><span class="n">app_host</span> <span class="o">=</span> <span class="s1">&#39;http://127.0.0.1:8888/admin&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<p>With capybara DSL, you can operate UI easily.
Below code shows fill id and password field with <code>admin</code> then click login button.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">login</span>
</span><span class='line'>  <span class="n">visit</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">fill_in</span> <span class="s1">&#39;userNameTxtField&#39;</span><span class="p">,</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="s1">&#39;admin&#39;</span>
</span><span class='line'>  <span class="n">fill_in</span> <span class="s1">&#39;passwordTxtField&#39;</span><span class="p">,</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="s1">&#39;admin&#39;</span>
</span><span class='line'>  <span class="n">find</span><span class="p">(</span><span class="s1">&#39;#loginBtn&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">click</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In case you have to wait specified element show in page or element class changed</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">wait_util_find</span><span class="p">(</span><span class="n">cssString</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;start waiting until find &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">cssString</span>
</span><span class='line'>  <span class="k">until</span> <span class="n">page</span><span class="o">.</span><span class="n">has_selector?</span><span class="p">(</span><span class="n">cssString</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;waiting...&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">cssString</span>
</span><span class='line'>    <span class="nb">sleep</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">wait_element_enable</span><span class="p">(</span><span class="n">cssString</span><span class="p">)</span>
</span><span class='line'>  <span class="n">elem</span> <span class="o">=</span> <span class="n">find</span><span class="p">(</span><span class="n">cssString</span><span class="p">)</span>
</span><span class='line'>  <span class="k">while</span> <span class="n">elem</span><span class="o">[</span><span class="ss">:class</span><span class="o">].</span><span class="n">include?</span><span class="p">(</span><span class="s1">&#39;disabled&#39;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;waiting...&quot;</span>
</span><span class='line'>    <span class="nb">sleep</span> <span class="mi">5</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># If you need to find multiple elements, you can use page.all</span>
</span><span class='line'><span class="c1"># find() method can&#39;t find multiple elements. It causes exception.</span>
</span><span class='line'><span class="k">def</span> <span class="nf">wait_something</span><span class="p">(</span><span class="n">cssString</span><span class="p">)</span>
</span><span class='line'>  <span class="k">while</span> <span class="n">page</span><span class="o">.</span><span class="n">all</span><span class="p">(</span><span class="ss">:css</span><span class="p">,</span> <span class="n">cssString</span><span class="p">)</span><span class="o">.</span><span class="n">length</span> <span class="o">&gt;</span> <span class="mi">1</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;waiting...&quot;</span>
</span><span class='line'>    <span class="nb">sleep</span> <span class="mi">5</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>How to attach file? In capybara official document, you can use <code>attach_file</code> to attach file easily.
But i found it doesn&#8217;t work in HTML5 input file tag with multiple like</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">input</span> <span class="nb">id</span><span class="o">=</span><span class="s2">&quot;upload&quot;</span> <span class="nb">name</span><span class="o">=</span><span class="s2">&quot;upload-btn&quot;</span> <span class="n">type</span><span class="o">=</span><span class="s2">&quot;file&quot;</span> <span class="n">multiple</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The capybara always show can&#8217;t find the element.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">attach_file</span> <span class="s1">&#39;upload-btn&#39;</span><span class="p">,</span> <span class="s1">&#39;/upload/1.zip&#39;</span> <span class="c1"># it won&#39;t work.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then i think i could click the button then select the file myself.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">upload</span>
</span><span class='line'>  <span class="n">find</span><span class="p">(</span><span class="s1">&#39;#upload&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">click</span> <span class="c1"># click upload button </span>
</span><span class='line'>
</span><span class='line'>  <span class="n">select_file</span> <span class="c1"># select files from disk.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>But here is the problem, selenium driver can&#8217;t control the native file selection window.
There&#8217;s no way to select files in file selection window.
After few days survey, i solved it with <code>rautomation</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>gem install rautomation
</span></code></pre></td></tr></table></div></figure>


<p>After the file selection window popups, the running program is stoped.
It means <code>select_file</code> method won&#8217;t be executed.
I think it&#8217;s because the native window popups and require user to interactive.
So i change capybara click method to selenium method and <code>select_file</code> can be executed.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="sb">`rautomation`</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">upload</span>
</span><span class='line'>  <span class="c1"># find(&#39;#upload&#39;).click </span>
</span><span class='line'>
</span><span class='line'>  <span class="n">upload_elem</span> <span class="o">=</span> <span class="n">page</span><span class="o">.</span><span class="n">driver</span><span class="o">.</span><span class="n">browser</span><span class="o">.</span><span class="n">all</span><span class="p">(</span><span class="ss">:xpath</span><span class="p">,</span> <span class="s1">&#39;//input[@name=&quot;upload-btn&quot;]&#39;</span><span class="p">)</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>  <span class="n">upload_elem</span><span class="o">.</span><span class="n">send_keys</span> <span class="s2">&quot;gogo&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">select_file</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The next step is how to select files in native window.
The first step is find the native window. I use a simple way to do it.
Compare the window number before click upload button and after.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">upload</span>
</span><span class='line'>  <span class="n">before</span> <span class="o">=</span> <span class="ss">RAutomation</span><span class="p">:</span><span class="ss">:Window</span><span class="o">.</span><span class="n">windows</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:hwnd</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">upload_elem</span> <span class="o">=</span> <span class="n">page</span><span class="o">.</span><span class="n">driver</span><span class="o">.</span><span class="n">browser</span><span class="o">.</span><span class="n">all</span><span class="p">(</span><span class="ss">:xpath</span><span class="p">,</span> <span class="s1">&#39;//input[@name=&quot;upload-btn&quot;]&#39;</span><span class="p">)</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>  <span class="n">upload_elem</span><span class="o">.</span><span class="n">send_keys</span> <span class="s2">&quot;gogo&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">after</span> <span class="o">=</span> <span class="ss">RAutomation</span><span class="p">:</span><span class="ss">:Window</span><span class="o">.</span><span class="n">windows</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:hwnd</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">select_file</span><span class="p">(</span><span class="n">before</span><span class="p">,</span> <span class="n">after</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">select_file</span><span class="p">(</span><span class="n">before</span><span class="p">,</span> <span class="n">after</span><span class="p">)</span>
</span><span class='line'>  <span class="n">file_select_window</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'>  <span class="n">candidate</span> <span class="o">=</span> <span class="n">after</span> <span class="o">-</span> <span class="n">before</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">candidate</span><span class="o">.</span><span class="n">length</span>
</span><span class='line'>    <span class="k">when</span> <span class="mi">0</span>
</span><span class='line'>      <span class="kp">nil</span>
</span><span class='line'>    <span class="k">when</span> <span class="mi">1</span>
</span><span class='line'>      <span class="n">file_select_window</span> <span class="o">=</span> <span class="ss">RAutomation</span><span class="p">:</span><span class="ss">:Window</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:hwnd</span> <span class="o">=&gt;</span> <span class="n">candidate</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">select_from_other_criteria</span><span class="p">(</span><span class="n">candidate</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>If the candidate length equals 1, that candidate will be the file selection window.
There should be better way to find the native window.
I try to find window by window&#8217;s title but it won&#8217;t work. Maybe it&#8217;s because my OS or Firebox is Chinese.<br/>
After you get the <code>file_select_window</code>, set the file path to text_field and click the button.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">select_file</span><span class="p">(</span><span class="n">before</span><span class="p">,</span> <span class="n">after</span><span class="p">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">file_select_window</span><span class="o">.</span><span class="n">text_field</span><span class="o">.</span><span class="n">set</span> <span class="s1">&#39;/upload/1.zip&#39;</span>
</span><span class='line'>  <span class="n">file_select_window</span><span class="o">.</span><span class="n">button</span><span class="o">.</span><span class="n">click</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Useful methods in ruby]]></title>
    <link href="http://weichienhung.github.io/blog/2013/12/14/utility-tool-by-ruby/"/>
    <updated>2013-12-14T21:14:00+08:00</updated>
    <id>http://weichienhung.github.io/blog/2013/12/14/utility-tool-by-ruby</id>
    <content type="html"><![CDATA[<p>This week i write automatic utility tools for colleague.
It saves time and reduce trivial works. Learn useful ruby built-in methods.</p>

<h3>List all under a folder</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># lists all files and folders under target/ folder</span>
</span><span class='line'><span class="no">Dir</span><span class="o">.</span><span class="n">glob</span><span class="p">(</span><span class="s1">&#39;target/**/**&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">select</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
</span><span class='line'>  <span class="k">if</span> <span class="no">File</span><span class="o">.</span><span class="n">directory?</span> <span class="n">f</span>
</span><span class='line'>    <span class="c1"># do something</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="c1"># do something</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># ONLY list all in target/ , doesn&#39;t list subfolders like target/subfolders/</span>
</span><span class='line'><span class="no">Dir</span><span class="o">.</span><span class="n">glob</span><span class="p">(</span><span class="s1">&#39;target/**&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">select</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<!--more -->


<h3>Get folder name or file name from file path</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">f</span> <span class="o">=</span> <span class="s2">&quot;/abc/def/ghi.rb&quot;</span>
</span><span class='line'><span class="no">File</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="n">f</span><span class="p">)</span> <span class="c1"># /abc/def</span>
</span><span class='line'><span class="no">File</span><span class="o">.</span><span class="n">basename</span><span class="p">(</span><span class="n">f</span><span class="p">)</span> <span class="c1"># ghi.rb</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Read and parse file to json</h3>

<p><code>@data</code> will be JSON object</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;json&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s2">&quot;data.cfg&quot;</span><span class="p">,</span> <span class="s2">&quot;r:UTF-8&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="vi">@data</span> <span class="o">=</span> <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">)</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Write json to file</h3>

<p>Use <code>JSON.pretty_generate</code> to create well format json file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;json&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s2">&quot;data.cfg&quot;</span><span class="p">,</span> <span class="s2">&quot;w&quot;</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">file</span><span class="o">|</span> <span class="n">file</span><span class="o">.</span><span class="n">puts</span> <span class="no">JSON</span><span class="o">.</span><span class="n">pretty_generate</span><span class="p">(</span><span class="vi">@data</span><span class="p">)}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Read a CSV file</h3>

<p><code>{ headers: true }</code> means first row is as header</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;csv&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="no">CSV</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s2">&quot;datacfg.csv&quot;</span><span class="p">,</span> <span class="s2">&quot;r&quot;</span><span class="p">,</span> <span class="p">{</span> <span class="ss">headers</span><span class="p">:</span> <span class="kp">true</span> <span class="p">})</span> <span class="k">do</span> <span class="o">|</span><span class="n">csv</span><span class="o">|</span>
</span><span class='line'>  <span class="n">matches</span> <span class="o">=</span> <span class="n">csv</span><span class="o">.</span><span class="n">find_all</span> <span class="k">do</span> <span class="o">|</span><span class="n">row</span><span class="o">|</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="n">row</span><span class="o">.</span><span class="n">headers</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="c1"># first column of header</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="n">row</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="c1"># first column of each row</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Create a http connection to download big file and calculate progress</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;net/http&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">downloadLink</span> <span class="o">=</span> <span class="s2">&quot;http://abc/def/ghi.zip&quot;</span>
</span><span class='line'><span class="n">uri</span> <span class="o">=</span> <span class="no">URI</span><span class="o">.</span><span class="n">parse</span> <span class="n">downloadLink</span>
</span><span class='line'><span class="ss">Net</span><span class="p">:</span><span class="ss">:HTTP</span><span class="o">.</span><span class="n">start</span><span class="p">(</span><span class="n">uri</span><span class="o">.</span><span class="n">host</span><span class="p">,</span> <span class="n">uri</span><span class="o">.</span><span class="n">port</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">http</span><span class="o">|</span>
</span><span class='line'>  <span class="n">request</span> <span class="o">=</span> <span class="ss">Net</span><span class="p">:</span><span class="ss">:HTTP</span><span class="o">::</span><span class="no">Get</span><span class="o">.</span><span class="n">new</span> <span class="n">uri</span><span class="o">.</span><span class="n">request_uri</span>
</span><span class='line'>  <span class="n">request</span><span class="o">.</span><span class="n">basic_auth</span> <span class="no">USERNAME</span><span class="p">,</span> <span class="no">PASSWORD</span> <span class="c1"># if you need basic web auth</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">http</span><span class="o">.</span><span class="n">request</span> <span class="n">request</span> <span class="k">do</span> <span class="o">|</span><span class="n">response</span><span class="o">|</span>
</span><span class='line'>    <span class="n">download_size</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">begin</span>
</span><span class='line'>      <span class="n">file</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s2">&quot;target.zip&quot;</span><span class="p">,</span> <span class="s1">&#39;wb&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">length</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">content_length</span>
</span><span class='line'>      <span class="n">response</span><span class="o">.</span><span class="n">read_body</span> <span class="k">do</span> <span class="o">|</span><span class="n">fragment</span><span class="o">|</span>
</span><span class='line'>        <span class="n">download_size</span> <span class="o">+=</span> <span class="n">fragment</span><span class="o">.</span><span class="n">length</span>
</span><span class='line'>        <span class="n">file</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">fragment</span><span class="p">)</span>
</span><span class='line'>        <span class="n">progress</span> <span class="o">=</span> <span class="s1">&#39;%.2f&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">download_size</span><span class="o">.</span><span class="n">to_f</span> <span class="o">*</span> <span class="mi">100</span> <span class="o">/</span> <span class="n">length</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">ensure</span>
</span><span class='line'>      <span class="n">file</span><span class="o">.</span><span class="n">close</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>XML handle by nokogiri</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;nokogiri&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">doc</span> <span class="o">=</span> <span class="ss">Nokogiri</span><span class="p">:</span><span class="ss">:XML</span><span class="p">(</span><span class="n">f</span><span class="p">)</span> <span class="c1"># create a xml doc from a file</span>
</span><span class='line'>
</span><span class='line'><span class="n">nodes</span> <span class="o">=</span> <span class="n">doc</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span><span class="s1">&#39;//bean[@id=&quot;getcha&quot;]/*&#39;</span><span class="p">)</span> <span class="c1"># find nodes under bean with id &#39;getcha&#39;</span>
</span><span class='line'><span class="n">nodes</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">node</span><span class="o">|</span>
</span><span class='line'>  <span class="n">node</span><span class="o">[</span><span class="s1">&#39;value&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;good&quot;</span> <span class="c1"># set the attribute &#39;value&#39; to &#39;good&#39;</span>
</span><span class='line'>  <span class="n">node</span><span class="o">.</span><span class="n">content</span> <span class="o">=</span> <span class="s2">&quot;bad&quot;</span> <span class="c1"># set the content to &#39;bad&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span> <span class="n">file</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">doc</span><span class="p">)</span> <span class="p">}</span> <span class="c1"># write xml to file</span>
</span></code></pre></td></tr></table></div></figure>


<h3>xpath with xml namespace</h3>

<p>For example, the <code>bean</code> is under namespace <code>http://www.springframework.org/schema/util</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">nodes</span> <span class="o">=</span> <span class="n">doc</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span><span class="s1">&#39;//util:bean[@id=&quot;getcha&quot;]/*&#39;</span><span class="p">,</span> <span class="p">{</span><span class="s2">&quot;util&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;http://www.springframework.org/schema/util&quot;</span><span class="p">}</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[new rails project for fun]]></title>
    <link href="http://weichienhung.github.io/blog/2013/11/30/new-practicing-rails-project/"/>
    <updated>2013-11-30T20:16:00+08:00</updated>
    <id>http://weichienhung.github.io/blog/2013/11/30/new-practicing-rails-project</id>
    <content type="html"><![CDATA[<p>Today i push a new rails project to <a href="http://weichien-lunch.herokuapp.com/">heroku</a> called lunch.
I also push to <a href="https://github.com/weichienhung/lunch">github</a>.
Every week day i and colleague have to discuss which lunch to eat.
It will be very helpful if a site can random pick a lunch restaurant for us. So i create a new rails project for this purpose.
The basic idea is simple, everybody can share a restaurant and add others&#8217; restaurants to favorites list. Then site pick a restaurant for you.
I can study new stuff when i practice rails each time. I try to write down here.</p>

<!-- more -->


<h3>image store in S3</h3>

<p>Because the heroku doesn&#8217;t allow to store images, i move the paperclip default storage to S3.
It&#8217;s very easy to implement, just follow this <a href="https://devcenter.heroku.com/articles/paperclip-s3">tutorial</a></p>

<h3>social network signin</h3>

<p>This time i integrate three social networks(facebook, twitter, google).
I am stuck in google app setting for a while. Because they all have different callback url setting.
Finally i resolved and here are screenshots for these sites. These samples are for <code>127.0.0.1:3000</code> testing</p>

<h4>google</h4>

<p><img src="http://weichienhung.github.io/images/posts/20131129-1.png" width="800" height="600" title="list-image" alt="list"></p>

<h4>twitter</h4>

<p><img src="http://weichienhung.github.io/images/posts/20131129-2.png" width="800" height="600" title="list-image" alt="list"></p>

<h4>facebook</h4>

<p><img src="http://weichienhung.github.io/images/posts/20131129-3.png" width="800" height="600" title="list-image" alt="list"></p>

<h3>MVP design</h3>

<p>I add a <code>app/presenters</code> folder and make controller logic more impact.
Add folder path to <code>application.rb</code> that controller could access them.</p>

<figure class='code'><figcaption><span>application.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">paths</span><span class="o">.</span><span class="n">add</span> <span class="s2">&quot;app/presenters&quot;</span><span class="p">,</span> <span class="ss">glob</span><span class="p">:</span> <span class="s2">&quot;**/*.rb&quot;</span>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">autoload_paths</span> <span class="o">+=</span> <span class="no">Dir</span><span class="o">[</span><span class="s2">&quot;</span><span class="si">#{</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="si">}</span><span class="s2">/app/presenters/*&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Google map support</h3>

<p>Use <code>gmaps4rails</code> gem. github <a href="https://github.com/apneadiving/Google-Maps-for-Rails">link</a>.
Good video tutorial <a href="https://www.youtube.com/watch?v=R0l-7en3dUw&amp;feature=youtu.be">link</a></p>

<h3>rspec testing</h3>

<h4>devise signin</h4>

<p>Just create a user and call <code>signin</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:user</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">name</span> <span class="ss">Faker</span><span class="p">:</span><span class="ss">:Name</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'>    <span class="n">sequence</span><span class="p">(</span><span class="ss">:email</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span> <span class="s2">&quot;example</span><span class="si">#{</span><span class="n">n</span><span class="si">}</span><span class="s2">@example.com&quot;</span> <span class="p">}</span> <span class="c1"># create different email each user.</span>
</span><span class='line'>    <span class="n">password</span> <span class="s1">&#39;a1234567&#39;</span>
</span><span class='line'>    <span class="n">password_confirmation</span> <span class="s1">&#39;a1234567&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">factory</span> <span class="ss">:user_with_restaurant</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">after</span><span class="p">(</span><span class="ss">:create</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">user</span><span class="o">|</span>
</span><span class='line'>        <span class="n">restaurant</span> <span class="o">=</span> <span class="no">FactoryGirl</span><span class="o">.</span><span class="n">build</span><span class="p">(</span><span class="ss">:restaurant</span><span class="p">)</span>
</span><span class='line'>        <span class="n">restaurant</span><span class="o">.</span><span class="n">creator_id</span> <span class="o">=</span> <span class="n">user</span><span class="o">.</span><span class="n">id</span>
</span><span class='line'>        <span class="n">restaurant</span><span class="o">.</span><span class="n">save!</span>
</span><span class='line'>        <span class="n">user</span><span class="o">.</span><span class="n">favor_restaurant</span> <span class="o">&lt;&lt;</span> <span class="n">restaurant</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># It&#39;s good practice to put in before block</span>
</span><span class='line'><span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="vi">@user</span> <span class="o">=</span> <span class="n">create</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sign_in</span> <span class="vi">@user</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Use expect to assert result</h4>

<p>For example <code>restaurant</code> is the return object from controller.</p>

<figure class='code'><figcaption><span>xx_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">new</span>
</span><span class='line'>    <span class="vi">@restaurant</span> <span class="o">=</span> <span class="no">Restaurant</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>xx_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">restaurant</span> <span class="o">=</span> <span class="n">assigns</span><span class="p">(</span><span class="ss">:restaurant</span><span class="p">)</span>
</span><span class='line'><span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">status</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="mi">302</span> <span class="c1"># check http status code</span>
</span><span class='line'><span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">render_template</span> <span class="ss">:index</span> <span class="c1"># check render template</span>
</span><span class='line'><span class="n">expect</span><span class="p">(</span><span class="n">restaurant</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_a_new</span><span class="p">(</span><span class="no">Restaurant</span><span class="p">)</span> <span class="c1"># check restaurant is new object</span>
</span><span class='line'><span class="n">expect</span><span class="p">(</span><span class="n">flash</span><span class="o">[</span><span class="ss">:notice</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be</span> <span class="c1"># check flash[:notice] exist</span>
</span><span class='line'><span class="n">expect</span><span class="p">(</span><span class="n">flash</span><span class="o">[</span><span class="ss">:warn</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_nil</span> <span class="c1"># check flash[:warn] nil</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># we could even use block </span>
</span><span class='line'><span class="c1"># check restaurant is added by 1 after post to create controller</span>
</span><span class='line'><span class="n">expect</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">post</span> <span class="ss">:create</span><span class="p">,</span> <span class="ss">restaurant</span><span class="p">:</span> <span class="n">attributes_for</span><span class="p">(</span><span class="ss">:restaurant</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span><span class="o">.</span><span class="n">to</span> <span class="n">change</span><span class="p">(</span><span class="no">Restaurant</span><span class="p">,</span> <span class="ss">:count</span><span class="p">)</span><span class="o">.</span><span class="n">by</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[open source project studying]]></title>
    <link href="http://weichienhung.github.io/blog/2013/11/03/open-source-projects-studying/"/>
    <updated>2013-11-03T09:57:00+08:00</updated>
    <id>http://weichienhung.github.io/blog/2013/11/03/open-source-projects-studying</id>
    <content type="html"><![CDATA[<p>I study the open source project <a href="https://github.com/gitlabhq/gitlabhq">gitlab</a>. It&#8217;s a well coding rails structure.
Here are some examples i think they are good.</p>

<h3>Don&#8217;t query data in View/Helper</h3>

<p>Avoid perform query in view/helper in Xdite&#8217;s <a href="http://blog.xdite.net/posts/2013/10/31/maintainable-rails-view-6">Maintainable Rails View</a>.</p>

<figure class='code'><figcaption><span>dashboard_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">show</span>
</span><span class='line'>  <span class="vi">@projects_limit</span> <span class="o">=</span> <span class="mi">30</span>
</span><span class='line'>  <span class="vi">@groups</span> <span class="o">=</span> <span class="n">current_user</span><span class="o">.</span><span class="n">authorized_groups</span><span class="o">.</span><span class="n">sort_by</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:human_name</span><span class="p">)</span>
</span><span class='line'>  <span class="vi">@has_authorized_projects</span> <span class="o">=</span> <span class="vi">@projects</span><span class="o">.</span><span class="n">count</span> <span class="o">&gt;</span> <span class="mi">0</span>
</span><span class='line'>  <span class="vi">@projects_count</span> <span class="o">=</span> <span class="vi">@projects</span><span class="o">.</span><span class="n">count</span>
</span><span class='line'>  <span class="vi">@projects</span> <span class="o">=</span> <span class="vi">@projects</span><span class="o">.</span><span class="n">limit</span><span class="p">(</span><span class="vi">@projects_limit</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="vi">@events</span> <span class="o">=</span> <span class="no">Event</span><span class="o">.</span><span class="n">in_projects</span><span class="p">(</span><span class="n">current_user</span><span class="o">.</span><span class="n">authorized_projects</span><span class="o">.</span><span class="n">pluck</span><span class="p">(</span><span class="ss">:id</span><span class="p">))</span>
</span><span class='line'>  <span class="vi">@events</span> <span class="o">=</span> <span class="vi">@event_filter</span><span class="o">.</span><span class="n">apply_filter</span><span class="p">(</span><span class="vi">@events</span><span class="p">)</span>
</span><span class='line'>  <span class="vi">@events</span> <span class="o">=</span> <span class="vi">@events</span><span class="o">.</span><span class="n">limit</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span><span class="o">.</span><span class="n">offset</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:offset</span><span class="o">]</span> <span class="o">||</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="vi">@last_push</span> <span class="o">=</span> <span class="n">current_user</span><span class="o">.</span><span class="n">recent_push</span>
</span><span class='line'>  <span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
</span><span class='line'>    <span class="nb">format</span><span class="o">.</span><span class="n">html</span>
</span><span class='line'>    <span class="nb">format</span><span class="o">.</span><span class="n">js</span>
</span><span class='line'>    <span class="nb">format</span><span class="o">.</span><span class="n">atom</span> <span class="p">{</span> <span class="n">render</span> <span class="ss">layout</span><span class="p">:</span> <span class="kp">false</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<h3>Group class methods</h3>

<p>You could put all your class methods inside <code>class &lt;&lt; self</code>. Avoid to put <code>self.</code> in each methods.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># method 1</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Ability</span>
</span><span class='line'>  <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">allowed</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="n">subject</span><span class="p">)</span>
</span><span class='line'>      <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># method 2</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Ability</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">allowed</span><span class="p">(</span><span class="n">user</span><span class="p">,</span><span class="n">subject</span><span class="p">)</span>
</span><span class='line'>    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Always sexy validations</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">validates</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">presence</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'><span class="n">validates</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">presence</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="nb">format</span><span class="p">:</span> <span class="p">{</span> <span class="ss">with</span><span class="p">:</span> <span class="sr">/\A([^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})\Z/</span> <span class="p">}</span>
</span><span class='line'><span class="n">validates</span> <span class="ss">:bio</span><span class="p">,</span> <span class="ss">length</span><span class="p">:</span> <span class="p">{</span> <span class="ss">within</span><span class="p">:</span> <span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">255</span> <span class="p">}</span>
</span><span class='line'><span class="n">validates</span> <span class="ss">:extern_uid</span><span class="p">,</span> <span class="n">allow_blank</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">uniqueness</span><span class="p">:</span> <span class="p">{</span><span class="ss">scope</span><span class="p">:</span> <span class="ss">:provider</span><span class="p">}</span>
</span><span class='line'><span class="n">validates</span> <span class="ss">:projects_limit</span><span class="p">,</span> <span class="ss">presence</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">numericality</span><span class="p">:</span> <span class="p">{</span><span class="n">greater_than_or_equal_to</span><span class="p">:</span> <span class="mi">0</span><span class="p">}</span>
</span><span class='line'><span class="n">validates</span> <span class="ss">:username</span><span class="p">,</span> <span class="ss">presence</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">uniqueness</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span>
</span><span class='line'>          <span class="ss">exclusion</span><span class="p">:</span> <span class="p">{</span> <span class="k">in</span><span class="p">:</span> <span class="ss">Gitlab</span><span class="p">:</span><span class="ss">:Blacklist</span><span class="o">.</span><span class="n">path</span> <span class="p">},</span>
</span><span class='line'>          <span class="nb">format</span><span class="p">:</span> <span class="p">{</span> <span class="ss">with</span><span class="p">:</span> <span class="ss">Gitlab</span><span class="p">:</span><span class="ss">:Regex</span><span class="o">.</span><span class="n">username_regex</span><span class="p">,</span>
</span><span class='line'>                    <span class="ss">message</span><span class="p">:</span> <span class="s2">&quot;only letters, digits &amp; &#39;_&#39; &#39;-&#39; &#39;.&#39; allowed. Letter should be first&quot;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">validate</span> <span class="ss">:namespace_uniq</span><span class="p">,</span> <span class="k">if</span><span class="p">:</span> <span class="o">-&gt;</span><span class="p">(</span><span class="n">user</span><span class="p">)</span> <span class="p">{</span> <span class="n">user</span><span class="o">.</span><span class="n">username_changed?</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Delgate method</h3>

<p>Reference <a href="http://www.simonecarletti.com/blog/2009/12/inside-ruby-on-rails-delegate/">delegate in rails</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Post</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:user</span>
</span><span class='line'>  <span class="n">delegate</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="ss">:user</span><span class="p">,</span> <span class="ss">:allow_nil</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">:prefix</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">delegate</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="ss">:user</span><span class="p">,</span> <span class="ss">:allow_nil</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">:prefix</span> <span class="o">=&gt;</span> <span class="s2">&quot;author&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">User</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:posts</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># You can call it in Post instance</span>
</span><span class='line'><span class="n">post</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">param</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="n">post</span><span class="o">.</span><span class="n">user_name</span> <span class="c1"># return user&#39;s name</span>
</span><span class='line'><span class="n">post</span><span class="o">.</span><span class="n">author_name</span> <span class="c1"># return user&#39; name</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Some basics i didn&#8217;t mention before.</h2>

<h3>object.map(&amp;:foo)</h3>

<p>Below are equivalent.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Base</span> <span class="o">=</span> <span class="no">Struct</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:name</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">tag1</span> <span class="o">=</span> <span class="no">Base</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;hello&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">tag2</span> <span class="o">=</span> <span class="no">Base</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;bye&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">result</span> <span class="o">=</span> <span class="o">[</span><span class="n">tag1</span><span class="p">,</span> <span class="n">tag2</span><span class="o">].</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">tag</span><span class="o">|</span> <span class="n">tag</span><span class="o">.</span><span class="n">name</span> <span class="p">}</span>
</span><span class='line'><span class="n">result</span> <span class="o">=</span> <span class="o">[</span><span class="n">tag1</span><span class="p">,</span> <span class="n">tag2</span><span class="o">].</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:name</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>send</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># These statements are equal</span>
</span><span class='line'><span class="vi">@person</span><span class="o">.</span><span class="n">age</span>
</span><span class='line'><span class="vi">@person</span><span class="o">.</span><span class="n">send</span> <span class="ss">:age</span>
</span><span class='line'>
</span><span class='line'><span class="vi">@person</span><span class="o">.</span><span class="n">age</span> <span class="o">=</span> <span class="mi">5</span>
</span><span class='line'><span class="vi">@person</span><span class="o">.</span><span class="n">send</span> <span class="ss">:age</span><span class="o">=</span><span class="p">,</span> <span class="mi">5</span>
</span><span class='line'>
</span><span class='line'><span class="vi">@person</span><span class="o">.</span><span class="n">set_age</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="vi">@person</span><span class="o">.</span><span class="n">send</span> <span class="ss">:set_age</span><span class="p">,</span> <span class="mi">5</span>
</span></code></pre></td></tr></table></div></figure>


<h3>content_for ( yield )</h3>

<p>Learned from Xdite&#8217;s <a href="http://blog.xdite.net/posts/2013/10/31/maintainable-rails-view-3">Maintainable Rails View</a></p>

<figure class='code'><figcaption><span>layout.html.erb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># In your layout, you can put a sidebar with yield :sidebar</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;main&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="sx">%= yield %&gt;</span>
</span><span class='line'><span class="sx">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sx">&lt;div class=</span><span class="s2">&quot;sidebar&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;%=</span> <span class="k">yield</span> <span class="ss">:sidebar</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>xxx.html.erb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Use content_for :sidebar to render sidebar.</span>
</span><span class='line'><span class="o">&lt;</span><span class="sx">%= content_for :sidebar do %&gt;    </span>
</span><span class='line'><span class="sx">  &lt;%=</span> <span class="n">render</span> <span class="s2">&quot;ad/foo&quot;</span><span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">&lt;% end %&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>change entire layout</h3>

<p>Use <code>layout</code> to make profiles page use <em>profile</em> layout not <em>application</em> layout</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ProfilesController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">layout</span> <span class="s1">&#39;profile&#39;</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>redirect from localhost/project/yyy.git to localhost/project/yyy</h3>

<figure class='code'><figcaption><span>application_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">project</span>
</span><span class='line'>  <span class="k">if</span> <span class="nb">id</span> <span class="o">=~</span> <span class="sr">/\.git\Z/</span>
</span><span class='line'>    <span class="n">redirect_to</span> <span class="n">request</span><span class="o">.</span><span class="n">original_url</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/\.git\Z/</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="ow">and</span> <span class="k">return</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Good gems</h2>

<ol>
<li><a href="https://github.com/ctran/annotate_models">annotate</a>: add comments to your ActiveRecord models/specs/routes..rb</li>
<li><a href="https://github.com/michaeldv/awesome_print">awesome_print</a>: pretty print your ruby objects</li>
<li><a href="https://github.com/charliesome/better_errors">better_errors</a>: better error page for rails</li>
<li><a href="https://github.com/mbleigh/acts-as-taggable-on">acts-as-taggable-on</a>: a tagging plugin</li>
<li><a href="https://github.com/railsbp/rails_best_practices">rails_best_practices</a>: code metric tool for rails</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mongodb in rails4]]></title>
    <link href="http://weichienhung.github.io/blog/2013/10/25/mongodb-in-rails/"/>
    <updated>2013-10-25T23:53:00+08:00</updated>
    <id>http://weichienhung.github.io/blog/2013/10/25/mongodb-in-rails</id>
    <content type="html"><![CDATA[<p>In the past week i had tried <a href="http://www.mongodb.org">mongodb</a> in rails.
I rewrite my previous project <a href="https://github.com/weichienhung/money">money</a> to use mongodb instead of active record.
The source code is in branch <a href="https://github.com/weichienhung/money/tree/mongodb">money-mongodb</a>.
Here i record the steps of changing active record to mongodb</p>

<!-- more -->


<h3>Install mongodb</h3>

<p>I am using Mac OSX, very easy to install</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>brew install mongodb
</span></code></pre></td></tr></table></div></figure>


<p>Run mongodb in your shell</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>mongod
</span></code></pre></td></tr></table></div></figure>


<h3>Update Gemfile</h3>

<p>I choose <em>mongoid</em> gem because it has good documents and it&#8217;s a object document mapper framework.
I am familiar with SQL so i could catch up NonSQL database easily.<br/>
Need to add <code>github: 'mongoid/mongoid'</code> because Rails4.</p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;mongoid&#39;</span><span class="p">,</span> <span class="ss">github</span><span class="p">:</span> <span class="s1">&#39;mongoid/mongoid&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Generate mongoid config</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>rails g mongoid:config
</span></code></pre></td></tr></table></div></figure>


<h3>Mark active record related codes</h3>

<p>In <em>application.rb</em> mark the <code>require rails/all</code> and add below.</p>

<figure class='code'><figcaption><span>application.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># require &#39;rails/all&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;action_controller/railtie&quot;</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;action_mailer/railtie&quot;</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;sprockets/railtie&quot;</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;rails/test_unit/railtie&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In <em>development.rb</em> mark the <code>config.active_record.migration_error = :page_load</code></p>

<figure class='code'><figcaption><span>development.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># config.active_record.migration_error = :page_load</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Re-generate devise</h3>

<p>Mark <code>devise_for :users</code> in routes.rb</p>

<figure class='code'><figcaption><span>routes.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># devise_for :users</span>
</span></code></pre></td></tr></table></div></figure>


<p>Execute <code>devise:install</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>rails g devise:install
</span></code></pre></td></tr></table></div></figure>


<p>Remember to unmark <code>devise_for</code> after new user.rb created.
New <em>user.rb</em> looks like below, it includes <code>Mongoid::Document</code>.</p>

<figure class='code'><figcaption><span>user.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span>
</span><span class='line'>  <span class="kp">include</span> <span class="ss">Mongoid</span><span class="p">:</span><span class="ss">:Document</span>
</span><span class='line'>  <span class="c1"># Include default devise modules. Others available are:</span>
</span><span class='line'>  <span class="c1"># :confirmable, :lockable, :timeoutable and :omniauthable</span>
</span><span class='line'>  <span class="n">devise</span> <span class="ss">:database_authenticatable</span><span class="p">,</span> <span class="ss">:registerable</span><span class="p">,</span>
</span><span class='line'>         <span class="ss">:recoverable</span><span class="p">,</span> <span class="ss">:rememberable</span><span class="p">,</span> <span class="ss">:trackable</span><span class="p">,</span> <span class="ss">:validatable</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">## Database authenticatable</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:email</span><span class="p">,</span>              <span class="ss">:type</span> <span class="o">=&gt;</span> <span class="nb">String</span><span class="p">,</span> <span class="ss">:default</span> <span class="o">=&gt;</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:encrypted_password</span><span class="p">,</span> <span class="ss">:type</span> <span class="o">=&gt;</span> <span class="nb">String</span><span class="p">,</span> <span class="ss">:default</span> <span class="o">=&gt;</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Update models</h3>

<p>Bascially we just need to include <code>Mongoid::Document</code> and add <code>field</code></p>

<figure class='code'><figcaption><span>category.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># class Category &lt; ActiveRecord::Base</span>
</span><span class='line'><span class="c1"># end</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Category</span>
</span><span class='line'>  <span class="kp">include</span> <span class="ss">Mongoid</span><span class="p">:</span><span class="ss">:Document</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">type</span><span class="p">:</span> <span class="nb">String</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:cid</span><span class="p">,</span> <span class="ss">type</span><span class="p">:</span> <span class="nb">Integer</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Update logic of querying data in model</h3>

<p>This is the most difficult part.  Model has methods to query data from database.
All need to rewrite.</p>

<p>No <code>where.not</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># scope :expense, -&gt; { where.not(category_id: 0) }</span>
</span><span class='line'><span class="n">scope</span> <span class="ss">:expense</span><span class="p">,</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="n">where</span><span class="p">(</span><span class="ss">:category_id</span><span class="o">.</span><span class="n">gt</span> <span class="o">=&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Order by</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># where.order(&#39;month ASC&#39;)</span>
</span><span class='line'><span class="n">where</span><span class="o">.</span><span class="n">asc</span><span class="p">(</span><span class="ss">:month</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Query condition.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#r = where(&#39;year = ?&#39;, params[:y])</span>
</span><span class='line'><span class="n">r</span> <span class="o">=</span> <span class="n">where</span><span class="p">(</span><span class="ss">year</span><span class="p">:</span> <span class="n">params</span><span class="o">[</span><span class="ss">:y</span><span class="o">]</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>No <code>group()</code>. Need to use map/reduce funciton. Good <a href="http://www.mongovue.com/2010/11/03/yet-another-mongodb-map-reduce-tutorial/#comment-117">tutorial</a>.<br/>
For instance: calculate each month&#8217;s total cost.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># r.expense.group(:month).select(:month, &#39;sum(amount) as total&#39;)</span>
</span><span class='line'><span class="n">map</span> <span class="o">=</span> <span class="sx">%Q(</span>
</span><span class='line'><span class="sx">  function(){</span>
</span><span class='line'><span class="sx">    emit(this.month, { month:this.month, amount:this.amount});</span>
</span><span class='line'><span class="sx">  }</span>
</span><span class='line'><span class="sx">)</span>
</span><span class='line'><span class="n">reduce</span> <span class="o">=</span> <span class="sx">%Q(</span>
</span><span class='line'><span class="sx">  function(key, values) {</span>
</span><span class='line'><span class="sx">    var result = { month: 0, total: 0 };</span>
</span><span class='line'><span class="sx">    values.forEach(function(value) {</span>
</span><span class='line'><span class="sx">      result.month = value.month;</span>
</span><span class='line'><span class="sx">      if (value.amount)</span>
</span><span class='line'><span class="sx">        result.total += value.amount;</span>
</span><span class='line'><span class="sx">      else</span>
</span><span class='line'><span class="sx">        result.total += value.total;</span>
</span><span class='line'><span class="sx">      });</span>
</span><span class='line'><span class="sx">    return result;</span>
</span><span class='line'><span class="sx">  }</span>
</span><span class='line'><span class="sx">)</span>
</span><span class='line'><span class="n">final</span> <span class="o">=</span> <span class="sx">%Q(</span>
</span><span class='line'><span class="sx">  function(key, value) {</span>
</span><span class='line'><span class="sx">    if (value.amount)</span>
</span><span class='line'><span class="sx">      value.total = value.amount</span>
</span><span class='line'><span class="sx">    return value;</span>
</span><span class='line'><span class="sx">  }</span>
</span><span class='line'><span class="sx">)</span>
</span><span class='line'><span class="n">result</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'><span class="n">where</span><span class="p">(</span><span class="ss">year</span><span class="p">:</span> <span class="n">params</span><span class="o">[</span><span class="ss">:y</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">map_reduce</span><span class="p">(</span><span class="n">map</span><span class="p">,</span> <span class="n">reduce</span><span class="p">)</span><span class="o">.</span><span class="n">out</span><span class="p">(</span><span class="ss">inline</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span><span class="o">.</span><span class="n">finalize</span><span class="p">(</span><span class="n">final</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">document</span><span class="o">|</span>
</span><span class='line'>  <span class="n">result</span><span class="o">.</span><span class="n">push</span> <span class="nb">self</span><span class="o">.</span><span class="n">build_money_record_by_month</span><span class="p">(</span><span class="n">document</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Fecth data from reduced document.
If there&#8217;s more easy way to fetch data from <code>document</code>, plz let me know.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">build_money_record_by_month</span><span class="p">(</span><span class="n">document</span><span class="p">)</span>
</span><span class='line'>  <span class="n">value</span> <span class="o">=</span> <span class="n">document</span><span class="o">.</span><span class="n">fetch</span> <span class="s1">&#39;value&#39;</span>
</span><span class='line'>  <span class="n">monny</span> <span class="o">=</span> <span class="no">MoneyRecord</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="n">monny</span><span class="o">.</span><span class="n">total</span> <span class="o">=</span> <span class="n">value</span><span class="o">.</span><span class="n">fetch</span> <span class="s1">&#39;total&#39;</span>
</span><span class='line'>  <span class="n">monny</span><span class="o">.</span><span class="n">month</span> <span class="o">=</span> <span class="n">value</span><span class="o">.</span><span class="n">fetch</span> <span class="s1">&#39;month&#39;</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">monny</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Update cucumber and rspec testing</h3>

<p>In <em>spec/spec_help.rb</em></p>

<figure class='code'><figcaption><span>spec_help.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># mark below </span>
</span><span class='line'><span class="c1"># config.fixture_path = &quot;#{::Rails.root}/spec/fixtures&quot;</span>
</span><span class='line'><span class="c1"># config.use_transactional_fixtures = true</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># unmark below</span>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">before</span><span class="p">(</span><span class="ss">:suite</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="no">DatabaseCleaner</span><span class="o">.</span><span class="n">strategy</span> <span class="o">=</span> <span class="ss">:truncation</span> <span class="c1"># must be truncation</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="no">DatabaseCleaner</span><span class="o">.</span><span class="n">start</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">after</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="no">DatabaseCleaner</span><span class="o">.</span><span class="n">clean</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In <em>feature/env/rb</em></p>

<figure class='code'><figcaption><span>env.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">begin</span>
</span><span class='line'>  <span class="no">DatabaseCleaner</span><span class="o">.</span><span class="n">strategy</span> <span class="o">=</span> <span class="ss">:truncation</span>  <span class="c1"># must be truncation</span>
</span><span class='line'><span class="k">rescue</span> <span class="no">NameError</span>
</span><span class='line'>  <span class="k">raise</span> <span class="s2">&quot;You need to add database_cleaner to your Gemfile (in the :test group) if you wish to use it.&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s it. But i still have a question not solved. During my trying the mongod process was crash easily and no idea why.
Error log like below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Wed Oct 23 00:37:28.314 Invalid access at address: 0x10 from thread: conn5
</span><span class='line'>
</span><span class='line'>Wed Oct 23 00:37:28.314 Got signal: 11 <span class="o">(</span>Segmentation fault: 11<span class="o">)</span>.
</span><span class='line'>
</span><span class='line'>Wed Oct 23 00:37:28.380 Backtrace:
</span><span class='line'>0x100a3eaf0 0x1005515bd 0x1005518f8 0x7fff8904a90a 0 0x100b70cc7 0x100c3e2c9 0x100c3e131 0x1009f873b 0x1009f85ff 0x1009f32c2 0x1009f3093 0x1009f2c0f 0x100699c7d 0x1006a484c 0x1006c72f5 0x1006c82b3 0x1006c9096 0x1007dec8d 0x1007e50a8
</span><span class='line'> 0   mongod                              0x0000000100a3eaf0 _ZN5mongo15printStackTraceERSo + 64
</span><span class='line'> 1   mongod                              0x00000001005515bd _ZN5mongo10abruptQuitEi + 397
</span><span class='line'> 2   mongod                              0x00000001005518f8 _ZN5mongo24abruptQuitWithAddrSignalEiP9__siginfoPv + 344
</span><span class='line'> 3   libsystem_c.dylib                   0x00007fff8904a90a _sigtramp + 26
</span><span class='line'> 4   ???                                 0x0000000000000000 0x0 + 0
</span><span class='line'> 5   mongod                              0x0000000100b70cc7 _ZN2v88internal15DeoptimizerDataD1Ev + 55
</span><span class='line'> 6   mongod                              0x0000000100c3e2c9 _ZN2v88internal7Isolate6DeinitEv + 105
</span><span class='line'> 7   mongod                              0x0000000100c3e131 _ZN2v88internal7Isolate8TearDownEv + 81
</span><span class='line'> 8   mongod                              0x00000001009f873b _ZN5mongo7V8ScopeD2Ev + 267
</span><span class='line'> 9   mongod                              0x00000001009f85ff _ZN5mongo7V8ScopeD0Ev + 15
</span><span class='line'> 10  mongod
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[design pattern in javascript]]></title>
    <link href="http://weichienhung.github.io/blog/2013/10/19/design-pattern-in-javascript/"/>
    <updated>2013-10-19T14:50:00+08:00</updated>
    <id>http://weichienhung.github.io/blog/2013/10/19/design-pattern-in-javascript</id>
    <content type="html"><![CDATA[<p>I read the <a href="http://addyosmani.com/resources/essentialjsdesignpatterns/book/">javascript design pattern</a> from Addy Osmani.
There&#8217;re code examples in the book and i try to re-write it by coffeescript.
It helps me understand pattern more and clear. During writing i found a good coffeescript <a href="http://coffeescriptcookbook.com">cookbook</a> and very helpful.
I put the final result to <a href="https://gist.github.com/weichienhung/7055412">gist</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing,Documentation and others]]></title>
    <link href="http://weichienhung.github.io/blog/2013/10/13/testing/"/>
    <updated>2013-10-13T19:38:00+08:00</updated>
    <id>http://weichienhung.github.io/blog/2013/10/13/testing</id>
    <content type="html"><![CDATA[<p>Past two weeks, i have studied some useful gems in rails. Here are the summary and tips.</p>

<h2><a href="https://github.com/cucumber/cucumber-rails">Cucumber</a></h2>

<p>Cucumber is the Behavior Driven Development(BDD). Writing testing is the most important in software development.
Without testing case it&#8217;s hard to refactor any code in the future.</p>

<p>For instance: my site provide REST API with JSON and require devise login to use.
How to test?<br/>
Add to Gemfile. Suggest to use rspec and factory_gril gems together.</p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">group</span> <span class="ss">:test</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s2">&quot;rspec-rails&quot;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;cucumber-rails&#39;</span><span class="p">,</span> <span class="ss">:require</span> <span class="o">=&gt;</span> <span class="kp">false</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s2">&quot;factory_girl_rails&quot;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;database_cleaner&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">group</span> <span class="ss">:development</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s2">&quot;rspec-rails&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Run <code>rails g cucumber:install</code> to initial features/ structure.</p>

<!--more-->


<p>Modify <em>config/initializers/devise.rb</em> if you use devise and need to test sign_out function.</p>

<figure class='code'><figcaption><span>devise.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">sign_out_via</span> <span class="o">=</span> <span class="no">Rails</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">test?</span> <span class="p">?</span> <span class="ss">:get</span> <span class="p">:</span> <span class="ss">:delete</span>
</span></code></pre></td></tr></table></div></figure>


<p>Create <em>api.feature</em> in features/. You should describe your feature by plain english.</p>

<figure class='code'><figcaption><span>api.feature</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">Feature</span><span class="p">:</span> <span class="no">Provide</span> <span class="no">API</span>
</span><span class='line'>  <span class="no">In</span> <span class="n">order</span> <span class="n">to</span> <span class="n">show</span> <span class="n">list</span>
</span><span class='line'>  <span class="no">As</span> <span class="n">an</span> <span class="no">Frontend</span> <span class="n">javascript</span>
</span><span class='line'>  <span class="no">Should</span> <span class="n">be</span> <span class="n">able</span> <span class="n">to</span> <span class="n">retrieve</span> <span class="n">data</span> <span class="n">through</span> <span class="no">REST</span> <span class="no">API</span>
</span><span class='line'>
</span><span class='line'>  <span class="ss">Scenario</span><span class="p">:</span> <span class="n">list</span> <span class="n">category</span> <span class="n">through</span> <span class="no">REST</span> <span class="no">API</span>
</span><span class='line'>    <span class="no">Given</span> <span class="n">I</span> <span class="n">exist</span> <span class="n">as</span> <span class="n">a</span> <span class="n">user</span> <span class="ow">and</span> <span class="n">logged</span> <span class="k">in</span>
</span><span class='line'>      <span class="no">And</span> <span class="n">the</span> <span class="nb">system</span> <span class="n">knows</span> <span class="n">about</span> <span class="n">the</span> <span class="n">following</span> <span class="n">category</span>
</span><span class='line'>       <span class="o">|</span> <span class="mi">1</span> <span class="o">|</span> <span class="err">食</span> <span class="o">|</span>
</span><span class='line'>       <span class="o">|</span> <span class="mi">2</span> <span class="o">|</span> <span class="err">交際娛樂</span> <span class="o">|</span>
</span><span class='line'>       <span class="o">|</span> <span class="mi">3</span> <span class="o">|</span> <span class="err">交通</span> <span class="o">|</span>
</span><span class='line'>    <span class="no">When</span> <span class="n">I</span> <span class="nb">send</span> <span class="n">a</span> <span class="no">GET</span> <span class="n">request</span> <span class="n">to</span> <span class="n">category</span> <span class="n">api</span>
</span><span class='line'>    <span class="no">Then</span> <span class="n">should</span> <span class="n">response</span> <span class="n">correct</span> <span class="n">category</span> <span class="no">JSON</span> <span class="n">data</span>
</span><span class='line'>      <span class="s2">&quot;&quot;&quot;</span>
</span><span class='line'><span class="s2">      {&quot;</span><span class="n">monny</span><span class="s2">&quot;:[{&quot;</span><span class="n">cid</span><span class="s2">&quot;:1,&quot;</span><span class="nb">name</span><span class="s2">&quot;:&quot;</span><span class="err">食</span><span class="s2">&quot;},</span>
</span><span class='line'><span class="s2">      {&quot;</span><span class="n">cid</span><span class="s2">&quot;:2,&quot;</span><span class="nb">name</span><span class="s2">&quot;:&quot;</span><span class="err">交際娛樂</span><span class="s2">&quot;},</span>
</span><span class='line'><span class="s2">      {&quot;</span><span class="n">cid</span><span class="s2">&quot;:3,&quot;</span><span class="nb">name</span><span class="s2">&quot;:&quot;</span><span class="err">交通</span><span class="s2">&quot;}]}</span>
</span><span class='line'><span class="s2">      &quot;&quot;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Create <em>api_steps.rb</em> in features/step_definitions/ and <em>users.rb</em> in spec/factories/.</p>

<figure class='code'><figcaption><span>api_steps.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">create_user</span>
</span><span class='line'>  <span class="vi">@user</span> <span class="o">=</span> <span class="no">FactoryGirl</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">sign_in</span>
</span><span class='line'>  <span class="n">visit</span> <span class="s1">&#39;/users/sign_in&#39;</span>
</span><span class='line'>  <span class="n">fill_in</span> <span class="s2">&quot;user_email&quot;</span><span class="p">,</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="vi">@user</span><span class="o">[</span><span class="ss">:email</span><span class="o">]</span>
</span><span class='line'>  <span class="n">fill_in</span> <span class="s2">&quot;user_password&quot;</span><span class="p">,</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="vi">@user</span><span class="o">[</span><span class="ss">:password</span><span class="o">]</span>
</span><span class='line'>  <span class="n">click_button</span> <span class="s2">&quot;Sign in&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Given</span> <span class="sr">/^I exist as a user and logged in$/</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">create_user</span>
</span><span class='line'>  <span class="n">sign_in</span>
</span><span class='line'>  <span class="n">page</span><span class="o">.</span><span class="n">should</span> <span class="n">have_content</span> <span class="s2">&quot;Signed in successfully.&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">And</span> <span class="sr">/^the system knows about the following category$/</span> <span class="k">do</span> <span class="o">|</span><span class="n">table</span><span class="o">|</span>
</span><span class='line'>  <span class="n">table</span><span class="o">.</span><span class="n">raw</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">cid</span><span class="p">,</span> <span class="nb">name</span><span class="o">|</span>
</span><span class='line'>    <span class="no">Category</span><span class="o">.</span><span class="n">create</span><span class="p">({</span><span class="ss">cid</span><span class="p">:</span> <span class="n">cid</span><span class="p">,</span> <span class="nb">name</span><span class="p">:</span> <span class="nb">name</span><span class="p">})</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">When</span> <span class="sr">/^I send a GET request to category api$/</span> <span class="k">do</span>
</span><span class='line'>  <span class="vi">@response</span> <span class="o">=</span> <span class="n">page</span><span class="o">.</span><span class="n">driver</span><span class="o">.</span><span class="n">get</span> <span class="n">api_category_path</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Then</span> <span class="sr">/^should response correct category JSON data$/</span> <span class="k">do</span> <span class="o">|</span><span class="n">expect</span><span class="o">|</span>
</span><span class='line'>  <span class="n">actual</span> <span class="o">=</span> <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="vi">@response</span><span class="o">.</span><span class="n">body</span><span class="p">)</span>
</span><span class='line'>  <span class="n">expect</span> <span class="o">=</span> <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">expect</span><span class="p">)</span>
</span><span class='line'>  <span class="n">expect</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">key</span><span class="p">,</span><span class="n">value</span><span class="o">|</span>
</span><span class='line'>    <span class="n">assert_equal</span> <span class="n">value</span><span class="p">,</span> <span class="n">actual</span><span class="o">[</span><span class="n">key</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>users.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:user</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">email</span> <span class="s1">&#39;a@a.com&#39;</span>
</span><span class='line'>    <span class="n">password</span> <span class="s1">&#39;a1234567&#39;</span>
</span><span class='line'>    <span class="n">confirmed_at</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here are some items should be take care.<br/>
1. Use capybara to visit <em>sign_in</em> page and click it to sign in<br/>
2. With <code>| name | yyy |</code>, you can pass a table into steps function. I use it to create Category.<br/>
3. Use <code>page.driver.get api_category_path</code> to send GET request with authentication session(Because you have sign in)<br/>
Run <em>cucumber</em> to test and get report.</p>

<h2><a href="https://github.com/ernie/ransack">Ransack</a></h2>

<p>Search your data in active record. I add the search function into <a href="https://github.com/weichienhung/rails101_groupme">rails101_groupme</a> project.
The usage is quite simple. The groupme site has a search field in the navigation bar to search all posts.<br/>
<img src="http://weichienhung.github.io/images/posts/20131013-groupme.png" width="500" height="500" title="groupme" alt="groupme">
Add a method in application_controller.rb because we have a search field in nav bar and every controller need to render it.</p>

<figure class='code'><figcaption><span>application_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="c1"># exec set_search before_filter</span>
</span><span class='line'><span class="n">before_filter</span> <span class="ss">:set_search</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">set_search</span>
</span><span class='line'>  <span class="vi">@q</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:q</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Add controller to handle search request.</p>

<figure class='code'><figcaption><span>search_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">SearchController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">search</span>
</span><span class='line'>    <span class="vi">@posts</span> <span class="o">=</span> <span class="vi">@q</span><span class="o">.</span><span class="n">result</span><span class="p">(</span><span class="ss">distinct</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Add search path in route. Only accepts post here.</p>

<figure class='code'><figcaption><span>routes.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="n">post</span> <span class="s1">&#39;search&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;search#search&#39;</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Add search view. Ransack has <code>search_form_for</code> tag and it&#8217;s nice!</p>

<figure class='code'><figcaption><span>search.html.erb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sx">%= search_form_for @q, :class =</span><span class="o">&gt;</span> <span class="s2">&quot;navbar-form navbar-left&quot;</span><span class="p">,</span> <span class="ss">url</span><span class="p">:</span> <span class="n">search_path</span><span class="p">,</span> <span class="ss">html</span><span class="p">:</span> <span class="p">{</span> <span class="nb">method</span><span class="p">:</span> <span class="ss">:post</span> <span class="p">}</span>  <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;%= f.text_field :content_or_title_cont %&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sx">% end </span><span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>:content_or_title_cont</code> means we want to search content or title that matches search keyword.
If you want to search title column only, you should use <code>:title_cont</code>. <code>_cont</code> is necessary and means column&#8217;s content.
column name is the same with the active record you defined.</p>

<h2><a href="http://yardoc.org/">Yard</a></h2>

<p>Documentation is important. The Yard syntax is like Java and i like it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># @author weichienhung</span>
</span><span class='line'><span class="c1"># Get places data belong to the category.  </span>
</span><span class='line'><span class="c1"># It uses _id_ from ApplicationController#params to query Place from Category.</span>
</span><span class='line'><span class="c1"># @return [JSON] the Place json format.</span>
</span><span class='line'><span class="k">def</span> <span class="nf">show</span>
</span><span class='line'>  <span class="k">begin</span>
</span><span class='line'>    <span class="vi">@category</span> <span class="o">=</span> <span class="no">Category</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="n">respond_with</span> <span class="vi">@category</span><span class="o">.</span><span class="n">places</span>
</span><span class='line'>  <span class="k">rescue</span>
</span><span class='line'>    <span class="n">respond_with</span> <span class="o">[]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yard supports markdown syntax in describe your method. <code>_id_</code> is the italic word in markdown.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[animated on media query]]></title>
    <link href="http://weichienhung.github.io/blog/2013/10/12/animated-on-media-query/"/>
    <updated>2013-10-12T14:44:00+08:00</updated>
    <id>http://weichienhung.github.io/blog/2013/10/12/animated-on-media-query</id>
    <content type="html"><![CDATA[<p>I see a post <a href="http://css-tricks.com/animated-media-queries/?utm_source=dlvr.it&amp;utm_medium=twitter">animated on media query</a> today.
It&#8217;s very interest to put CSS transition on media query changed. It&#8217;s a simple skill and i just try it on my blog.
You could resize my blog to check it.<br/>
For example: add width transition to my avatar.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.myheader-avatar</span> <span class="o">&gt;</span> <span class="nt">img</span><span class="p">{</span>
</span><span class='line'>  <span class="k">height</span><span class="o">:</span> <span class="m">60px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span> <span class="m">60px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">float</span><span class="o">:</span> <span class="k">left</span><span class="p">;</span>
</span><span class='line'>  <span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">30px</span><span class="p">;</span>
</span><span class='line'>  <span class="o">@</span><span class="n">include</span> <span class="n">high_z_index</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">/* New line. */</span>
</span><span class='line'>  <span class="n">transition</span><span class="o">:</span> <span class="k">width</span> <span class="m">1.5s</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@media</span> <span class="nt">screen</span> <span class="nt">and</span> <span class="o">(</span><span class="nt">max-width</span><span class="o">:</span> <span class="nt">700px</span><span class="o">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nc">.myheader-avatar</span> <span class="o">&gt;</span> <span class="nt">img</span> <span class="p">{</span>
</span><span class='line'>    <span class="c">/* When devie max-width under 700px, change width to 0 */</span>
</span><span class='line'>    <span class="k">height</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">width</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">/* transition can&#39;t put on display. So i change it to set width=0 */</span>
</span><span class='line'>    <span class="c">/* display: none; */</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Originally i use <code>display:none</code> to hide avatar but it doesn&#8217;t work with transition. I use <code>width=0</code> insteadly.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apply octopress new theme]]></title>
    <link href="http://weichienhung.github.io/blog/2013/09/29/apply-octopress-new-theme/"/>
    <updated>2013-09-29T15:04:00+08:00</updated>
    <id>http://weichienhung.github.io/blog/2013/09/29/apply-octopress-new-theme</id>
    <content type="html"><![CDATA[<p>I change octopress theme to <a href="http://zespia.tw/Octopress-Theme-Slash/index_tw.html">slash</a>.
I also do a little modification. like<br/>
1. Add avatar<br/>
2. Show site&#8217;s subtitle<br/>
3. Add <em>About</em> page and remove <em>Blog</em> page in the navigation header.<br/>
4. Modify CSS to fit mobile browing.<br/>
I feel whole site becomes beatiful and clear.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[String things in ruby]]></title>
    <link href="http://weichienhung.github.io/blog/2013/09/28/string-thing-in-ruby/"/>
    <updated>2013-09-28T22:21:00+08:00</updated>
    <id>http://weichienhung.github.io/blog/2013/09/28/string-thing-in-ruby</id>
    <content type="html"><![CDATA[<p>String alternatives in ruby</p>

<h3>%Q</h3>

<p>Alternative for double-quoted strings. Below are equivalent</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">name_of_object</span> <span class="o">=</span> <span class="s2">&quot;John&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="sx">%Q(Hello World </span><span class="si">#{</span><span class="n">name_of_object</span><span class="si">}</span><span class="sx">)</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Hello World John&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You could replace <code>(</code> and <code>)</code> with non-alphanumeric characters.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="sx">%Q!Hello World!</span>
</span><span class='line'><span class="nb">puts</span> <span class="sx">%Q[Hello World]</span>
</span><span class='line'><span class="nb">puts</span> <span class="sx">%Q+Hello World+</span>
</span><span class='line'><span class="nb">puts</span> <span class="sx">%/Hello World/</span> <span class="c1"># you can use also.</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<h3>%q</h3>

<p>Alternative for single-quoted strings. But it can&#8217;t do expression substitution</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="sx">%q(Hello World #{name_of_object})</span> <span class="c1"># output: Hello World #{name_of_object}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>%W</h3>

<p>Used for double-quoted array.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">world</span> <span class="o">=</span> <span class="s2">&quot;World&quot;</span>
</span><span class='line'><span class="sx">%W(Hello </span><span class="si">#{</span><span class="n">world</span><span class="si">}</span><span class="sx"> John\ Smile)</span> <span class="c1"># output: [&quot;Hello&quot;, &quot;World&quot;, &quot;John Smile&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>%w</h3>

<p>Used for single-quoted array. No expression substitution</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sx">%w(Hello #{world} Good)</span> <span class="c1"># output: [&quot;Hello&quot;, &quot;#{world}&quot;, &quot;Good&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>%s</h3>

<p>Used for symbols. No expression substitution.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sx">%s(foo)</span> <span class="c1"># output: :foo</span>
</span><span class='line'><span class="sx">%s(foo bar)</span> <span class="c1"># output: :&quot;foo bar&quot;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Generator and Gem]]></title>
    <link href="http://weichienhung.github.io/blog/2013/09/28/rails-generator-in-gem/"/>
    <updated>2013-09-28T20:52:00+08:00</updated>
    <id>http://weichienhung.github.io/blog/2013/09/28/rails-generator-in-gem</id>
    <content type="html"><![CDATA[<p>Recently i created two emberjs-rails projects.(<a href="https://github.com/weichienhung/money">money</a>,<a href="https://github.com/weichienhung/food-ntpc">food-ntpc</a>).
Everytime i have to create a new rails project and add gems(ember-rails,twitter-bootstrap,thin&#8230;) repeatedly. Based on DRY principle i try to write a gem to solve trivials.<br/>
Finally, my first gem <a href="http://rubygems.org/gems/railsone">railsone</a> is out and push to RubyGems. There are many Rail proper nouns like Generator,Template,Plugins,Engine.
In the beginning it&#8217;s very confuse to me but i have solved them luckly :)</p>

<h3>How to make gem and generator?</h3>

<!-- more -->


<p>Use bundler to create gem structure. <em>railsone</em> is my gem name.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>bundle gem railsone
</span></code></pre></td></tr></table></div></figure>


<p>It create structure like below</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>railsone/lib/
</span><span class='line'>railsone/lib/railsone.rb
</span><span class='line'>railsone/lib/railsone/version.rb
</span><span class='line'>railsone/railsone.gemspec
</span><span class='line'>railsone/Gemfile
</span><span class='line'>railsone/Rakefile
</span></code></pre></td></tr></table></div></figure>


<p>Edit <em>railsone.gemspec</em>. We should finish <code>TODO</code> parts.</p>

<figure class='code'><figcaption><span>railsone.gemspec</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="n">spec</span><span class="o">.</span><span class="n">description</span>   <span class="o">=</span> <span class="sx">%q{Railsone helps you create emberjs 1.0 with twitter bootstrap 3.0}</span>
</span><span class='line'><span class="n">spec</span><span class="o">.</span><span class="n">summary</span>       <span class="o">=</span> <span class="sx">%q{Create emberjs with twitter bootstrap}</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then create a file in <em>lib/railsone/generators/install_generator.rb</em>. It&#8217;s better to put my custom generator in a generators folder.</p>

<figure class='code'><figcaption><span>railsone.gemspec</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">vim</span> <span class="n">railsone</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">railsone</span><span class="o">/</span><span class="n">generators</span><span class="o">/</span><span class="n">install_generator</span><span class="o">.</span><span class="n">rb</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next the default auto generated file is in <em>lib/railsone.rb</em>. We should modify it to require my generator file.</p>

<figure class='code'><figcaption><span>railsone.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s2">&quot;railsone/version&quot;</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;railsone/generators/install_generator&quot;</span> <span class="c1"># require my custom generator.</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">Railsone</span>
</span><span class='line'>  <span class="c1"># Your code goes here...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now continue to finish our <em>install_generator.rb</em></p>

<figure class='code'><figcaption><span>railsone.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rails/generators&#39;</span> <span class="c1"># require rails&#39;s generator</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">Railsone</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">Generators</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">InstallGenerator</span> <span class="o">&lt;</span> <span class="o">::</span><span class="ss">Rails</span><span class="p">:</span><span class="ss">:Generators</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>      <span class="n">desc</span> <span class="s2">&quot;generator to create emberjs and twitter bootstrap&quot;</span> <span class="c1"># description when you type rails g railsone:install --help</span>
</span><span class='line'>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">source_paths</span> <span class="o">&lt;&lt;</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="bp">__FILE__</span><span class="p">),</span> <span class="s1">&#39;../../../templates&#39;</span><span class="p">)</span> <span class="c1"># source_paths is for external files</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">def</span> <span class="nf">example_cmd</span>
</span><span class='line'>        <span class="n">gem</span> <span class="s1">&#39;ember-rails&#39;</span>
</span><span class='line'>        <span class="n">remove_file</span> <span class="s1">&#39;app/assets/javascripts/application.js&#39;</span>
</span><span class='line'>        <span class="n">copy_file</span> <span class="s1">&#39;application.js&#39;</span><span class="p">,</span> <span class="s1">&#39;app/assets/javascripts/application.js&#39;</span>
</span><span class='line'>        <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Your generator may use external files and they should be searched by <code>source_paths</code>. I create a <em>templates</em> folder to place files. It&#8217;s under root folder.</p>

<figure class='code'><figcaption><span>folder_structure</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>railsone/lib/
</span><span class='line'>railsone/templates/
</span></code></pre></td></tr></table></div></figure>


<p>Any public method in your generator will be executed automatically. It means <code>example_cmd</code> will be executed when you execute generator.<br/>
Directive <code>gem 'ember-rails'</code> means add <em>gem &#8216;ember-rails&#8217;</em> into Gemfile. All commands can be found in <a href="http://guides.rubyonrails.org/generators.html">RubyGuides</a> and <a href="http://rdoc.info/github/wycats/thor/master/Thor/Actions.html">Thor:Action</a>.<br/>
Directive <code>copy_file</code> copy my custom application.js<em>(in templates/application.js)</em> to overwrite project&#8217;s application.js<em>(in app/assets/javascripts/application.js)</em>.</p>

<h3>How to test?</h3>

<p>Before push to RubyGems, we should do a minimal testing. Create a new rails project.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>rails new myrails
</span></code></pre></td></tr></table></div></figure>


<p>Assume your <em>myrails</em> and <em>railsone</em> are in the same folder</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>railsone/
</span><span class='line'>myrails/
</span></code></pre></td></tr></table></div></figure>


<p>Add <em>railsone</em> to your myrails&#8217;s Gemfile</p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;railsone&#39;</span><span class="p">,</span> <span class="ss">path</span><span class="p">:</span> <span class="s1">&#39;../railsone&#39;</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Execute railsone generator. <em>railsone</em> is our namespace and <em>install</em> is our generator name.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">cd </span>myrails/
</span><span class='line'>rails g railsone:install
</span></code></pre></td></tr></table></div></figure>


<p>Then your will find your myrails Gemfile and application.js are changed.</p>

<h3>How to publish?</h3>

<p>Push to RubyGems is incrediblely simple. Refer to <a href="http://rubygems.org/">RubyGems</a>. <strong>Don&#8217;t forget to create your account first.</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># build your gem</span>
</span><span class='line'>gem build railsone.gemspec
</span><span class='line'>
</span><span class='line'><span class="c"># publish your gem</span>
</span><span class='line'>gem push railsone-0.0.1.gem
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Async in Emberjs]]></title>
    <link href="http://weichienhung.github.io/blog/2013/09/22/async-in-emberjs/"/>
    <updated>2013-09-22T17:40:00+08:00</updated>
    <id>http://weichienhung.github.io/blog/2013/09/22/async-in-emberjs</id>
    <content type="html"><![CDATA[<h2>Async Routing</h2>

<p>Reference to <a href="http://emberjs.com/guides/routing/asynchronous-routing/">ember guide</a>.<br/>
If you want to make sure model is ready before entering the target route. You could use async routing. How?<br/>
Make your model as Promise object in route&#8217;s model function.
For example: In year route i return a model that comes from <code>ModelMgr.listMonth(params.year_id)</code>.
Because model is Promise object, i add a <code>then</code> method to set id attribute to model(resolve will be model here)</p>

<figure class='code'><figcaption><span>YearRoute</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">model: </span><span class="nf">(params) -&gt;</span>
</span><span class='line'>  <span class="nv">model = </span><span class="nx">ModelMgr</span><span class="p">.</span><span class="nx">listMonth</span><span class="p">(</span><span class="nx">params</span><span class="p">.</span><span class="nx">year_id</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">model</span><span class="p">.</span><span class="nx">then</span> <span class="nf">(resolve, reject)-&gt;</span>
</span><span class='line'>      <span class="nx">resolve</span><span class="p">.</span><span class="nx">set</span> <span class="s">&#39;id&#39;</span><span class="p">,</span> <span class="nx">params</span><span class="p">.</span><span class="nx">year_id</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">model</span>
</span></code></pre></td></tr></table></div></figure>


<p>In <code>ModelMgr.listMonth</code> method, use <code>Ember.RSVP.Promise</code> to wrap your function. Because i don&#8217;t return anything in the last line of function.
CoffeeScript will return the promise object automatically. <code>months</code> will be the real model object.</p>

<figure class='code'><figcaption><span>ModelMgr</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">listMonth: </span><span class="nf">(year) -&gt;</span>
</span><span class='line'>  <span class="nv">months = </span><span class="nx">Ember</span><span class="p">.</span><span class="nx">ArrayProxy</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span><span class="nx">content</span><span class="o">:</span><span class="p">[]})</span>
</span><span class='line'>  <span class="k">new</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">RSVP</span><span class="p">.</span><span class="nx">Promise</span> <span class="nf">(resolve) -&gt;</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span> <span class="s">&#39;/api/list&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nv">type: </span><span class="s">&#39;GET&#39;</span>
</span><span class='line'>    <span class="nv">dataType: </span><span class="s">&#39;json&#39;</span>
</span><span class='line'>    <span class="nv">data: </span><span class="s">&#39;y=&#39;</span><span class="o">+</span><span class="nx">year</span>
</span><span class='line'>    <span class="nv">success: </span><span class="nf">(data, textStatus, jqXHR) -&gt;</span>
</span><span class='line'>      <span class="k">for</span> <span class="nx">raw</span> <span class="k">in</span> <span class="nx">data</span>
</span><span class='line'>        <span class="nx">months</span><span class="p">.</span><span class="nx">addObject</span> <span class="nx">raw</span>
</span><span class='line'>      <span class="nx">months</span><span class="p">.</span><span class="nx">set</span> <span class="s">&#39;isReady&#39;</span><span class="p">,</span> <span class="kc">true</span>
</span><span class='line'>      <span class="nx">resolve</span><span class="p">(</span><span class="nx">months</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Wait multiple function call ready</h2>

<p>Sometimes you will use 3rd party library and it requires element existed in the DOM tree.
For example: I use highchartJS to draw diagram.<br/>
In the route it queries two models to finish the whole scenarios.
<code>model</code> is the result from <code>ModelMgr.listMonth</code> and <code>modelForTrend</code> is the result from <code>ModelMgr.queryTrend</code>.
The models all have attributes called <code>isReady</code> with false default. After <code>ModelMgr</code> get the data, it will set to true.</p>

<figure class='code'><figcaption><span>SummaryRoute</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'>  <span class="nv">model: </span><span class="nf">(params)-&gt;</span>
</span><span class='line'>    <span class="nv">model = </span><span class="nx">ModelMgr</span><span class="p">.</span><span class="nx">listMonth</span><span class="p">(</span><span class="nx">params</span><span class="p">.</span><span class="nx">year_id</span><span class="p">)</span>
</span><span class='line'>    <span class="nv">model.year = </span><span class="nx">params</span><span class="p">.</span><span class="nx">year_id</span> <span class="c1">#For queryTrend needs year as parameter</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">model</span>
</span><span class='line'>  <span class="nv">setupController: </span><span class="nf">(controller, model)-&gt;</span>
</span><span class='line'>    <span class="nv">modelForTrend = </span><span class="nx">ModelMgr</span><span class="p">.</span><span class="nx">queryTrend</span><span class="p">(</span><span class="nx">model</span><span class="p">.</span><span class="nx">year</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">controller</span><span class="p">.</span><span class="nx">set</span> <span class="s">&#39;model&#39;</span><span class="p">,</span> <span class="nx">model</span>
</span><span class='line'>    <span class="nx">controller</span><span class="p">.</span><span class="nx">set</span> <span class="s">&#39;modelForTrend&#39;</span><span class="p">,</span> <span class="nx">modelForTrend</span>
</span></code></pre></td></tr></table></div></figure>


<p>We have two attribute bindings to model&#8217;s attributes in controller.</p>

<figure class='code'><figcaption><span>SummaryController</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">SummaryController = </span><span class="nx">Ember</span><span class="p">.</span><span class="nx">ObjectController</span><span class="p">.</span><span class="nx">extend</span>
</span><span class='line'>  <span class="nv">dataReadyBinding: </span><span class="s">&#39;model.isReady&#39;</span>
</span><span class='line'>  <span class="nv">trendDataReadyBinding: </span><span class="s">&#39;modelForTrend.isReady&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Create a method to observe all attributes we care about. View shouldn&#8217;t connect to Model directly.
So i make <code>drawLineChart</code> method to observe controller&#8217;s attribute.</p>

<figure class='code'><figcaption><span>SummaryView</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">SummaryView = </span><span class="nx">Ember</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span>
</span><span class='line'>  <span class="nv">elementReady: </span><span class="kc">false</span>
</span><span class='line'>  <span class="nv">drawLineChart: </span><span class="p">(</span> <span class="nf">-&gt;</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">@get</span><span class="p">(</span><span class="s">&#39;controller.dataReady&#39;</span><span class="p">)</span> <span class="o">and</span> <span class="nx">@get</span><span class="p">(</span><span class="s">&#39;controller.trendDataReady&#39;</span><span class="p">)</span> <span class="o">and</span> <span class="nx">@get</span><span class="p">(</span><span class="s">&#39;elementReady&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="nv">content = </span><span class="nx">@get</span> <span class="s">&#39;controller.model.content&#39;</span> <span class="c1"># content is ready</span>
</span><span class='line'>      <span class="nv">contentForTrend = </span><span class="nx">@get</span> <span class="s">&#39;controller.modelForTrend.content&#39;</span> <span class="c1"># contentForTrend is ready</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="s">&#39;#myTrend&#39;</span><span class="p">).</span><span class="nx">highcharts</span><span class="p">(</span> <span class="p">...</span> <span class="p">)</span> <span class="c1"># element is ready.</span>
</span><span class='line'>      <span class="c1"># do something here...</span>
</span><span class='line'>  <span class="p">).</span><span class="nx">observes</span><span class="p">(</span><span class="s">&#39;controller.dataReady&#39;</span><span class="p">,</span> <span class="s">&#39;elementReady&#39;</span><span class="p">,</span> <span class="s">&#39;controller.trendDataReady&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="nv">didInsertElement: </span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">@set</span> <span class="s">&#39;elementReady&#39;</span><span class="p">,</span> <span class="kc">true</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use HighchartJS to visual data]]></title>
    <link href="http://weichienhung.github.io/blog/2013/09/22/use-highchartjs-to-visual/"/>
    <updated>2013-09-22T17:16:00+08:00</updated>
    <id>http://weichienhung.github.io/blog/2013/09/22/use-highchartjs-to-visual</id>
    <content type="html"><![CDATA[<p>I just push a new project to <a href="https://github.com/weichienhung/money">github</a> and <a href="http://weichien-money.herokuapp.com/">heroku</a>.
This project is derived from my iOS App <a href="https://itunes.apple.com/tw/app/monny/id590327036?mt=8">Monny</a>.
The App I used it to record my daily expense. The free version doesn&#8217;t have visual graph to show summary data.
So i use EmberJS,HighchartJS and Rails to build this simple web app. I always learned new knowledge during coding.</p>

<p>I take few snaphots of this probject.</p>

<!-- more -->


<h3>List every record</h3>

<p><img src="http://weichienhung.github.io/images/posts/0922-list.png" width="500" height="500" title="list-image" alt="list"></p>

<h3>Category summary</h3>

<p><img src="http://weichienhung.github.io/images/posts/0922-summary.png" width="500" height="500" title="summary-image" alt="summary"></p>

<h3>Year trend</h3>

<p><img src="http://weichienhung.github.io/images/posts/0922-trend.png" width="500" height="500" title="trend-image" alt="trend"></p>

<p>I won&#8217;t describe studying notes here but write them in other posts.</p>
]]></content>
  </entry>
  
</feed>
